var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/ArgumentsMatcher.html",[0,0.332,1,2.345]],["body/classes/ArgumentsMatcher.html",[0,0.49,1,3.462,2,0.217,3,0.217,4,0.192,5,2.952,6,5.196,7,2.133,8,0.158,9,0.617,10,0.319,11,0.018,12,0.673,13,3.531,14,4.388,15,0.353,16,4.114,17,0.498,18,0.019,19,0.319,20,0.22,21,0.424,22,2.996,23,3.559,24,4.114,25,2.996,26,0.637,27,1.638,28,0.576,29,1.127,30,1.692,31,1.184,32,2.439,33,2.276,34,0.217,35,1.021,36,3.146,37,2.024,38,4.114,39,4.114,40,1.81,41,4.114,42,0.601,43,5.416,44,4.114,45,4.114,46,0.014]],["title/classes/CallCounter.html",[0,0.332,47,2.175]],["body/classes/CallCounter.html",[0,0.483,2,0.212,3,0.212,4,0.187,8,0.118,9,0.607,10,0.315,11,0.014,12,0.658,15,0.347,17,0.55,18,0.019,19,0.314,20,0.244,21,0.417,26,0.593,28,0.678,29,1.64,33,2.223,34,0.281,35,0.997,37,1.343,42,0.587,46,0.014,47,3.548,48,4.577,49,3.073,50,5.693,51,3.448,52,4.359,53,4.018,54,5.332,55,2.36,56,0.577,57,4.018,58,2.083,59,2.764,60,0.997,61,2.793,62,2.569,63,3.073,64,2.569,65,3.448,66,2.793,67,1.048,68,2.569,69,0.949,70,4.018]],["title/classes/ConstantFormatter.html",[0,0.332,71,2.029]],["body/classes/ConstantFormatter.html",[0,0.517,2,0.235,3,0.235,4,0.208,8,0.167,9,0.65,10,0.331,11,0.014,15,0.29,17,0.41,18,0.019,19,0.262,20,0.182,21,0.349,26,0.679,28,0.474,29,1.222,30,1.835,31,1.284,34,0.235,36,3.411,42,0.834,46,0.014,71,3.157,72,4.898,73,1.938,74,2.48,75,5.707,76,3.827,77,3.995,78,1.211,79,2.213,80,4.46,81,4.46,82,4.46,83,4.46,84,4.898,85,4.46,86,4.46]],["title/classes/ConstantMatcher.html",[0,0.332,14,2.345]],["body/classes/ConstantMatcher.html",[0,0.538,2,0.25,3,0.25,4,0.221,5,2.896,7,2.463,8,0.139,9,0.676,10,0.341,11,0.017,14,3.798,15,0.309,17,0.437,18,0.019,19,0.279,20,0.193,21,0.372,22,3.286,23,3.944,25,3.286,26,0.642,27,1.797,28,0.505,29,1.302,30,1.955,31,1.368,34,0.25,36,3.634,46,0.015,79,1.671,87,5.098,88,4.752,89,3.038]],["title/classes/DefinedSetups.html",[0,0.332,90,1.594]],["body/classes/DefinedSetups.html",[0,0.415,2,0.17,3,0.17,4,0.15,8,0.094,9,0.521,10,0.359,11,0.012,12,0.527,15,0.399,17,0.534,18,0.019,19,0.375,20,0.25,21,0.454,26,0.649,27,1.385,28,0.617,29,0.882,33,1.782,34,0.17,35,0.799,37,1.531,40,1.077,42,0.669,46,0.012,51,2.764,52,4.074,55,2.27,56,0.524,60,0.799,61,2.238,65,2.764,78,0.973,79,1.133,90,1.99,91,5.469,92,2.764,93,1.081,94,1.46,95,2.613,96,3.93,97,2.928,98,4.58,99,1.91,100,1.534,101,4.58,102,4.557,103,3.221,104,6.373,105,1.61,106,4.58,107,3.221,108,4.58,109,3.221,110,1.884,111,2.059,112,3.221,113,4.58,114,3.221,115,1.133,116,3.221]],["title/classes/ExpectedExpressionFormatter.html",[0,0.332,117,2.549]],["body/classes/ExpectedExpressionFormatter.html",[0,0.472,2,0.204,3,0.204,4,0.181,8,0.114,9,0.593,10,0.31,11,0.013,12,0.636,15,0.339,17,0.479,18,0.019,19,0.307,20,0.212,21,0.408,26,0.583,28,0.626,29,1.428,34,0.274,35,0.963,42,0.761,46,0.013,55,2.327,56,0.513,59,3.05,60,0.963,67,1.012,69,0.917,73,1.687,74,2.264,78,1.28,115,1.365,117,4.088,118,4.499,119,3.332,120,4.317,121,3.332,122,4.472,123,5.049,124,5.396,125,4.193,126,3.332,127,2.148,128,1.893,129,2.698,130,3.332,131,2.698,132,3.883,133,3.883,134,3.883,135,3.883,136,3.883,137,3.883,138,2.302,139,3.332]],["title/classes/ExpectedExpressionReflector.html",[0,0.332,140,1.902]],["body/classes/ExpectedExpressionReflector.html",[0,0.427,2,0.177,3,0.177,4,0.157,8,0.098,9,0.537,10,0.287,11,0.012,15,0.355,17,0.434,18,0.02,19,0.321,20,0.192,21,0.427,26,0.64,28,0.502,29,0.921,31,1.703,34,0.249,37,1.124,42,0.797,46,0.012,55,2.02,56,0.519,58,2.447,60,1.468,69,1.471,79,1.182,93,1.115,94,1.771,100,1.359,105,1.182,110,1.383,115,1.182,140,2.447,141,2.571,142,2.337,143,5.078,144,5.078,145,4.721,146,3.362,147,3.362,148,4.052,149,3.067,150,3.362,151,1.383,152,1.383,153,1.461,154,1.244,155,1.86,156,2.571,157,2.571,158,2.885,159,4.173,160,5.546,161,2.885,162,2.509,163,2.885,164,2.337,165,2.885,166,2.571,167,2.571,168,2.885,169,2.571,170,1.993,171,2.885,172,2.885]],["title/classes/ExpectedGetPropertyExpression.html",[0,0.332,151,1.509]],["body/classes/ExpectedGetPropertyExpression.html",[0,0.622,2,0.236,3,0.236,4,0.209,8,0.131,10,0.302,11,0.015,15,0.292,18,0.019,19,0.371,20,0.233,28,0.609,31,1.292,34,0.362,46,0.015,55,1.662,56,0.448,60,1.114,78,1.046,93,1.353,110,2.357,141,1.95,151,2.597,152,2.357,153,2.49,173,2.661,174,2.986,175,2.012,176,2.87,177,4.489,178,1.65,179,1.65,180,1.734]],["title/classes/ExpectedMethodExpression.html",[0,0.332,153,1.594]],["body/classes/ExpectedMethodExpression.html",[0,0.623,2,0.238,3,0.238,4,0.211,8,0.132,10,0.303,11,0.015,15,0.294,18,0.019,20,0.234,28,0.612,31,1.301,34,0.363,46,0.015,55,1.672,56,0.45,60,1.121,93,1.359,110,2.367,141,1.963,151,2.367,152,2.367,153,2.752,173,2.679,174,2.992,175,1.741,176,2.888,178,1.657,179,1.92,180,1.741,181,3.088,182,4.518]],["title/classes/ExpectedNamedMethodExpression.html",[0,0.332,110,1.509]],["body/classes/ExpectedNamedMethodExpression.html",[0,0.615,2,0.228,3,0.228,4,0.202,8,0.127,10,0.346,11,0.014,15,0.365,18,0.019,19,0.365,20,0.253,28,0.596,31,1.248,34,0.358,46,0.014,55,1.604,56,0.438,60,1.075,78,1.023,93,1.323,110,2.554,141,1.883,151,2.305,152,2.305,153,2.435,173,2.569,174,2.954,175,1.695,176,3.582,178,1.613,179,1.613,180,2.056,181,3.027,183,4.334,184,4.334]],["title/classes/ExpectedSetPropertyExpression.html",[0,0.332,152,1.509]],["body/classes/ExpectedSetPropertyExpression.html",[0,0.615,2,0.228,3,0.228,4,0.202,8,0.127,10,0.346,11,0.014,15,0.365,18,0.019,19,0.365,20,0.253,28,0.596,31,1.248,34,0.358,46,0.014,55,1.604,56,0.438,60,1.075,78,1.023,93,1.323,100,1.788,110,2.305,141,1.883,151,2.305,152,2.554,153,2.435,173,2.569,174,2.954,175,1.695,176,3.582,178,1.957,179,1.613,180,1.695,185,4.334,186,4.334]],["title/classes/ExpressionFormatter.html",[0,0.332,120,2.345]],["body/classes/ExpressionFormatter.html",[0,0.451,2,0.191,3,0.191,4,0.17,8,0.106,9,0.648,10,0.299,11,0.013,12,0.595,15,0.325,17,0.458,18,0.019,19,0.293,20,0.203,21,0.39,26,0.672,28,0.721,29,0.996,30,1.496,31,1.047,32,2.156,34,0.191,35,0.903,46,0.013,56,0.554,71,3.752,73,1.58,74,2.166,78,0.91,79,2.255,94,1.677,115,1.279,120,3.187,128,3.126,175,1.508,178,1.435,179,1.435,180,1.508,187,4.882,188,3.637,189,4.254,190,5.689,191,4.254,192,5.689,193,4.254,194,5.689,195,4.254,196,3.637,197,4.986,198,3.187,199,3.637,200,3.121,201,3.121,202,3.121,203,3.637,204,3.637,205,3.637,206,3.637,207,3.637,208,3.637]],["title/classes/ExpressionMatcher.html",[0,0.332,52,2.345]],["body/classes/ExpressionMatcher.html",[0,0.417,2,0.171,3,0.171,4,0.152,5,2.612,7,1.685,8,0.095,9,0.61,10,0.282,11,0.015,12,0.532,15,0.3,17,0.424,18,0.019,19,0.271,20,0.188,21,0.361,22,2.55,23,4.042,25,3.536,26,0.665,27,1.395,28,0.699,29,1.263,30,1.337,31,0.936,33,3.225,34,0.171,35,0.807,37,1.541,40,1.087,46,0.012,52,2.947,55,2.158,56,0.5,60,0.807,61,3.723,79,2.488,94,1.468,110,1.897,115,1.143,151,1.897,152,1.897,153,2.003,175,1.395,178,1.327,179,1.327,180,1.395,200,2.79,201,2.79,202,2.79,209,3.251,210,4.443,211,4.569,212,4.569,213,4.569,214,3.251,215,3.251,216,3.251,217,3.251,218,3.251,219,3.251]],["title/classes/GetPropertyExpression.html",[0,0.332,175,1.11]],["body/classes/GetPropertyExpression.html",[0,0.611,2,0.223,3,0.223,4,0.197,8,0.124,10,0.355,11,0.014,12,0.692,15,0.359,17,0.389,18,0.019,19,0.42,20,0.25,21,0.331,34,0.355,46,0.014,56,0.331,78,1.286,93,1.302,100,1.217,162,2.821,175,1.856,178,1.587,179,1.587,180,1.668,181,2.688,220,2.506,221,2.703,222,4.228,223,4.228,224,3.638,225,3.832,226,2.938]],["title/classes/GetPropertyExpressionFormatter.html",[0,0.332,189,2.549]],["body/classes/GetPropertyExpressionFormatter.html",[0,0.554,2,0.263,3,0.263,4,0.233,8,0.146,9,0.697,10,0.349,11,0.016,15,0.325,17,0.459,18,0.018,19,0.294,20,0.203,21,0.39,26,0.607,28,0.531,34,0.263,46,0.016,56,0.479,73,2.169,74,2.662,76,4.284,78,1.118,175,2.09,189,4.257,198,3.916,227,5.257,228,4.993,229,3.818]],["title/classes/GetPropertyExpressionMatcher.html",[0,0.332,210,2.549]],["body/classes/GetPropertyExpressionMatcher.html",[0,0.517,2,0.235,3,0.235,4,0.208,5,2.783,7,2.312,8,0.13,9,0.65,10,0.331,11,0.017,15,0.29,17,0.41,18,0.019,19,0.262,20,0.182,21,0.349,22,3.157,23,3.881,25,2.467,26,0.657,27,1.727,28,0.669,29,1.564,30,1.835,31,1.284,34,0.235,37,1.491,40,1.491,42,0.651,46,0.014,56,0.446,60,1.107,79,1.568,89,2.851,151,2.729,175,2.007,210,3.967,230,4.898,231,4.46,232,4.46,233,3.1,234,3.411,235,3.411]],["title/interfaces/IExpectedExpression.html",[149,1.902,154,1.358]],["body/interfaces/IExpectedExpression.html",[0,0.335,2,0.195,3,0.195,4,0.173,8,0.108,10,0.195,11,0.013,18,0.02,19,0.297,21,0.395,26,0.639,28,0.537,29,1.015,31,1.776,34,0.266,37,1.239,42,0.839,46,0.013,55,1.869,56,0.449,58,2.618,60,0.919,69,1.524,79,1.303,93,1.356,94,1.384,100,1.454,105,1.775,110,1.524,115,1.303,140,1.921,141,1.61,142,2.575,143,3.18,144,3.18,148,3.18,149,2.978,151,1.524,152,1.524,153,1.61,154,1.869,155,2.793,156,2.834,157,2.834,158,3.18,159,4.393,160,5.716,161,3.18,162,2.641,163,3.18,164,2.575,165,3.18,166,2.834,167,2.834,168,3.18,169,2.834,170,2.197,171,3.18,172,3.18,236,3.18,237,3.18]],["title/interfaces/IInterceptorCallbacks.html",[154,1.358,238,2.029]],["body/interfaces/IInterceptorCallbacks.html",[0,0.304,2,0.177,3,0.177,4,0.156,8,0.098,9,0.537,10,0.311,11,0.012,15,0.307,17,0.308,18,0.019,19,0.197,20,0.137,21,0.262,26,0.617,27,1.426,28,0.662,34,0.328,35,0.832,42,0.688,46,0.012,56,0.505,67,0.875,69,1.286,78,0.86,90,2.048,94,1.291,95,1.308,105,2.19,154,2.017,174,2.048,238,3.014,239,2.443,240,2.048,241,1.989,242,3.348,243,3.275,244,4.167,245,3.692,246,3.354,247,3.787,248,2.806,249,1.989,250,2.048,251,2.565,252,1.989,253,2.565,254,2.331,255,2.144,256,2.144,257,3.013,258,3.013,259,2.505,260,3.013,261,1.989,262,2.794,263,4.167,264,2.565,265,4.167,266,2.565,267,2.565,268,1.635,269,2.565,270,4.167,271,2.565,272,2.565,273,2.565,274,2.565,275,2.565,276,2.565,277,2.565]],["title/interfaces/IInterceptorCallbacksStrategy.html",[154,1.358,242,1.902]],["body/interfaces/IInterceptorCallbacksStrategy.html",[0,0.28,2,0.163,3,0.163,4,0.144,8,0.09,9,0.506,10,0.3,11,0.011,15,0.371,17,0.479,18,0.019,19,0.306,20,0.212,21,0.407,26,0.641,27,1.576,28,0.642,34,0.318,35,0.767,42,0.65,46,0.011,56,0.548,67,0.806,69,1.23,78,1.04,90,1.932,94,1.219,95,1.205,97,2.843,105,2.123,154,1.928,174,1.343,238,2.46,239,2.953,240,2.475,241,1.833,242,3.259,244,3.401,245,3.088,247,3.091,248,2.731,249,1.833,250,1.932,251,2.364,252,1.833,253,2.364,254,2.148,255,1.976,256,1.976,257,3.33,258,3.33,259,2.775,260,3.33,261,1.833,262,2.637,263,3.984,264,2.364,265,3.984,266,2.364,267,2.364,268,1.507,269,2.364,270,3.984,271,2.364,272,2.364,273,2.364,274,2.364,275,2.364,276,2.364,277,2.364,278,3.091,279,2.637,280,3.091,281,2.148,282,3.091,283,3.091]],["title/interfaces/IPredicate.html",[154,1.358,284,2.549]],["body/interfaces/IPredicate.html",[0,0.395,2,0.23,3,0.23,4,0.203,8,0.128,10,0.328,11,0.014,18,0.02,26,0.674,27,1.884,30,1.794,31,1.256,34,0.296,37,1.881,40,1.458,42,0.637,46,0.017,58,3.229,69,1.328,93,1.47,115,1.533,141,1.895,154,2.082,155,3.112,224,2.586,236,3.743,237,3.743,284,4.573,285,3.335,286,3.91,287,3.743,288,3.743,289,3.743,290,3.743,291,3.743,292,3.743,293,3.743,294,3.743]],["title/classes/Interceptor.html",[0,0.332,250,1.594]],["body/classes/Interceptor.html",[0,0.467,2,0.133,3,0.133,4,0.118,8,0.074,9,0.436,10,0.308,11,0.01,12,0.413,15,0.395,17,0.352,18,0.02,19,0.304,20,0.226,21,0.404,26,0.681,28,0.407,34,0.133,35,0.627,37,1.726,40,1.28,42,0.853,46,0.01,56,0.362,58,3.147,67,0.658,69,1.31,77,3.232,84,2.167,93,0.904,94,1.865,99,2.271,100,1.598,115,1.952,127,1.397,156,1.931,157,1.931,159,4.245,162,2.127,164,1.755,166,1.931,167,1.931,169,1.931,170,1.497,175,1.159,178,0.727,179,0.727,180,1.159,240,1.097,242,2.677,250,2.01,259,2.686,262,2.271,295,1.931,296,3.287,297,2.271,298,3.83,299,2.167,300,5.164,301,5.164,302,5.164,303,5.164,304,2.448,305,2.525,306,3.83,307,3.287,308,2.525,309,2.525,310,2.525,311,2.525,312,2.929,313,2.525,314,1.397,315,1.755,316,5.842,317,4.627,318,2.525,319,2.525,320,2.525,321,2.525,322,2.525,323,3.83,324,2.525,325,2.525,326,2.525,327,2.525,328,2.525,329,3.83,330,5.551,331,3.83,332,2.525,333,2.525,334,2.525]],["title/classes/InterceptorCallbacks.html",[0,0.332,262,2.175]],["body/classes/InterceptorCallbacks.html",[0,0.367,2,0.143,3,0.143,4,0.127,8,0.08,9,0.461,10,0.36,11,0.01,12,0.445,15,0.405,17,0.527,18,0.019,19,0.337,20,0.245,21,0.448,26,0.633,27,1.463,28,0.609,34,0.302,35,0.675,42,0.591,46,0.01,56,0.534,67,0.709,69,1.142,78,0.978,90,1.759,93,0.956,94,1.468,95,1.06,97,2.588,105,2.112,154,1.499,174,1.182,238,2.676,239,3.226,240,2.704,241,1.612,242,3.499,243,2.814,244,3.7,245,3.398,247,3.362,248,2.61,249,1.612,250,1.759,251,2.08,252,1.612,253,2.08,254,1.89,255,1.738,256,1.738,257,3.093,258,3.093,259,2.635,260,3.093,261,1.612,262,2.868,263,4.099,264,2.08,265,4.382,266,2.08,267,2.08,268,1.974,269,4.099,270,3.7,271,2.08,272,2.08,273,2.08,274,2.08,275,2.08,276,2.08,277,2.08,278,2.814,279,2.401,281,1.89,335,2.719,336,4.049,337,2.719,338,2.719,339,2.719,340,2.719]],["title/classes/InterceptorCallbacksLooseStrategy.html",[0,0.332,249,2.175]],["body/classes/InterceptorCallbacksLooseStrategy.html",[0,0.414,2,0.169,3,0.169,4,0.15,8,0.094,9,0.521,10,0.359,11,0.012,12,0.526,15,0.399,17,0.533,18,0.019,19,0.341,20,0.236,21,0.453,26,0.675,27,1.383,28,0.617,34,0.169,35,0.797,37,1.074,40,1.074,42,0.777,46,0.012,56,0.557,69,0.759,78,0.972,79,1.872,90,2.767,94,0.88,95,2.39,97,2.923,105,1.608,115,1.872,175,1.383,178,1.316,179,1.316,180,1.383,239,3.177,240,2.662,242,2.759,248,2.91,249,2.711,250,1.396,257,2.923,258,2.923,259,2.447,260,2.923,268,2.229,278,3.178,279,2.711,281,2.233,314,1.777,341,2.758,342,2.758,343,3.213,344,3.213,345,3.213,346,3.213,347,2.758,348,2.758,349,3.924,350,2.758,351,2.758,352,3.213,353,3.213]],["title/classes/InterceptorCallbacksStrictStrategy.html",[0,0.332,252,2.175]],["body/classes/InterceptorCallbacksStrictStrategy.html",[0,0.413,2,0.168,3,0.168,4,0.149,8,0.094,9,0.519,10,0.358,11,0.012,12,0.524,15,0.398,17,0.532,18,0.019,19,0.34,20,0.236,21,0.452,26,0.692,27,1.379,28,0.615,34,0.168,35,0.794,37,1.775,40,1.069,42,0.666,46,0.012,56,0.556,67,0.834,78,0.969,79,2.035,90,2.763,94,0.876,95,2.07,97,3.699,105,1.602,115,1.602,178,1.312,179,1.312,180,1.379,239,3.171,240,2.658,242,2.752,248,2.906,250,1.39,252,2.702,257,2.913,258,2.913,259,2.66,260,2.913,268,2.222,278,3.167,279,2.702,281,2.223,307,2.745,314,1.769,342,2.745,347,2.745,348,2.745,349,3.911,350,2.745,351,2.745,354,2.745,355,3.198,356,3.198,357,3.198,358,3.198,359,3.198,360,3.198]],["title/classes/It.html",[0,0.415]],["body/classes/It.html",[0,0.44,2,0.185,3,0.185,4,0.163,8,0.103,9,0.554,10,0.354,11,0.012,12,0.574,15,0.412,17,0.582,18,0.019,19,0.328,20,0.267,21,0.436,26,0.665,27,1.688,30,2.694,31,1.886,34,0.256,37,1.625,40,1.172,42,0.512,46,0.016,58,3.395,69,1.148,93,1.148,115,1.233,141,2.846,154,1.298,155,2.69,224,2.08,284,4.831,285,2.682,286,4.552,287,4.173,288,3.01,289,5.172,290,4.173,291,3.01,292,3.01,293,3.01,294,3.01,361,3.379,362,3.507,363,3.507,364,3.507,365,3.507,366,3.507,367,3.507]],["title/classes/MethodExpression.html",[0,0.332,179,1.056]],["body/classes/MethodExpression.html",[0,0.613,2,0.225,3,0.225,4,0.199,8,0.125,10,0.356,11,0.014,12,0.701,15,0.362,17,0.393,18,0.019,19,0.384,20,0.251,21,0.335,34,0.356,46,0.014,56,0.335,78,1.127,93,1.312,100,1.232,162,3.004,175,1.681,178,1.6,179,1.777,180,1.681,181,3.301,220,2.538,224,3.66,225,3.863,226,3.863,368,5.558]],["title/classes/MethodExpressionFormatter.html",[0,0.332,193,2.549]],["body/classes/MethodExpressionFormatter.html",[0,0.526,2,0.242,3,0.242,4,0.214,8,0.134,9,0.662,10,0.336,11,0.015,12,0.752,15,0.379,17,0.535,18,0.019,19,0.342,20,0.237,21,0.455,26,0.576,28,0.618,32,2.723,34,0.242,35,1.14,42,0.671,46,0.015,56,0.455,71,3.911,73,1.996,74,2.527,78,1.062,100,1.674,128,2.24,179,1.931,193,4.042,198,3.718,369,5.477,370,3.513,371,3.513,372,3.192,373,4.594]],["title/classes/MethodExpressionMatcher.html",[0,0.332,212,2.549]],["body/classes/MethodExpressionMatcher.html",[0,0.498,1,4.418,2,0.222,3,0.222,4,0.196,5,2.987,7,2.185,8,0.123,9,0.626,10,0.323,11,0.016,12,0.69,15,0.358,17,0.506,18,0.019,19,0.324,20,0.224,21,0.43,22,3.044,23,3.823,25,2.331,26,0.607,27,1.665,28,0.691,29,1.508,30,1.734,31,1.213,33,2.331,34,0.222,35,1.046,42,0.616,46,0.014,56,0.43,60,1.046,79,1.482,89,2.694,153,2.822,179,1.87,181,2.055,212,3.824,233,2.929,374,5.258,375,3.617,376,3.223,377,3.223,378,4.215,379,3.617,380,3.617]],["title/classes/Mock.html",[0,0.332,381,1.902]],["body/classes/Mock.html",[0,0.361,2,0.105,3,0.105,4,0.093,8,0.058,9,0.363,10,0.371,11,0.008,12,0.522,15,0.406,17,0.487,18,0.019,19,0.374,20,0.243,21,0.452,26,0.629,28,0.65,29,0.548,34,0.168,42,0.775,46,0.008,55,0.74,56,0.488,58,1.655,60,0.496,62,1.278,63,1.528,69,1.074,77,2.517,78,0.968,90,2.161,93,0.754,94,1.675,95,2.324,102,2.218,111,1.278,115,0.703,127,2.204,140,2.066,149,3.168,174,1.387,176,3.81,221,2.04,238,2.517,240,0.868,243,2.218,245,2.698,248,2.761,250,2.712,259,0.919,261,1.185,268,0.974,297,1.185,304,2.04,312,2.441,314,2.752,315,1.389,381,2.359,382,1.528,383,4.416,384,2.739,385,2.749,386,1.998,387,1.998,388,1.998,389,1.998,390,2.739,391,3.905,392,1.998,393,2.218,394,4.859,395,1.998,396,1.998,397,2.739,398,1.998,399,2.739,400,2.739,401,1.998,402,3.048,403,2.739,404,3.294,405,1.998,406,1.389,407,1.389,408,2.04,409,1.892,410,1.715,411,1.715,412,1.715,413,1.715,414,1.715,415,1.715,416,1.715,417,1.715,418,1.715,419,1.715,420,1.528,421,1.715,422,1.715,423,1.715,424,1.715,425,1.715,426,1.715,427,1.715,428,1.715,429,1.715,430,2.04,431,2.441,432,2.739,433,1.715,434,1.715,435,1.715,436,3.048,437,1.715,438,1.715,439,1.715,440,1.715,441,1.715,442,1.715,443,1.715]],["title/classes/MockCore.html",[0,0.332,383,2.549]],["body/classes/MockCore.html",[0,0.355,2,0.103,3,0.103,4,0.091,8,0.057,9,0.356,10,0.37,11,0.008,12,0.512,15,0.404,17,0.482,18,0.019,19,0.377,20,0.241,21,0.448,26,0.625,28,0.645,29,0.534,34,0.165,42,0.766,46,0.008,55,0.722,56,0.485,58,1.623,60,0.484,62,1.247,63,1.492,67,0.816,69,1.059,77,2.482,78,0.958,90,2.569,93,0.739,94,1.662,95,2.306,102,2.176,105,1.101,111,1.247,115,0.686,127,2.169,140,2.547,149,3.145,174,0.847,221,1.247,238,3.049,240,0.847,243,2.176,245,2.661,248,2.89,250,2.693,259,0.897,261,1.156,268,1.526,297,1.156,299,1.674,304,2.001,312,2.394,314,2.902,315,1.355,381,2.327,382,1.492,383,2.725,384,2.686,385,3.145,390,2.686,391,3.851,393,2.176,394,4.972,397,2.686,399,2.686,400,2.686,402,2.999,403,2.686,404,3.273,406,1.355,407,1.355,408,2.001,409,1.856,410,1.674,411,2.686,412,3.365,413,3.365,414,3.365,415,1.674,416,1.674,417,1.674,418,1.674,419,1.674,420,1.492,421,1.674,422,1.674,423,1.674,424,1.674,425,1.674,426,1.674,427,1.674,428,1.674,429,1.674,430,2.001,431,2.394,432,2.686,433,1.674,434,1.674,435,1.674,436,2.999,437,1.674,438,1.674,439,1.674,440,1.674,441,1.674,442,1.674,443,1.674,444,1.95,445,3.13,446,1.95,447,1.95,448,1.95,449,1.95,450,1.95,451,1.95,452,1.95,453,1.95]],["title/classes/NamedMethodExpression.html",[0,0.332,180,1.11]],["body/classes/NamedMethodExpression.html",[0,0.604,2,0.215,3,0.215,4,0.191,8,0.12,10,0.368,11,0.014,12,0.669,15,0.393,17,0.376,18,0.019,19,0.417,20,0.261,21,0.32,34,0.351,46,0.014,56,0.32,78,1.276,93,1.274,100,1.177,162,3.068,175,1.632,178,1.553,179,1.553,180,1.826,181,3.253,220,2.425,221,2.614,224,3.579,225,3.749,226,2.842,454,5.395,455,4.09]],["title/classes/NamedMethodExpressionFormatter.html",[0,0.332,195,2.549]],["body/classes/NamedMethodExpressionFormatter.html",[0,0.517,2,0.235,3,0.235,4,0.208,8,0.13,9,0.65,10,0.331,11,0.014,12,0.73,15,0.372,17,0.525,18,0.019,19,0.336,20,0.232,21,0.446,26,0.565,28,0.607,32,2.644,34,0.235,35,1.107,42,0.834,46,0.014,56,0.446,71,3.881,73,1.938,74,2.735,78,1.149,100,1.284,128,2.174,180,2.007,195,3.967,198,3.649,370,3.411,371,3.411,372,3.1,456,5.402,457,4.46,458,4.46,459,4.46,460,4.46]],["title/classes/NamedMethodExpressionMatcher.html",[0,0.332,213,2.549]],["body/classes/NamedMethodExpressionMatcher.html",[0,0.493,1,4.399,2,0.219,3,0.219,4,0.193,5,2.965,7,2.152,8,0.121,9,0.62,10,0.32,11,0.016,12,0.68,15,0.355,17,0.501,18,0.019,19,0.32,20,0.222,21,0.426,22,3.014,23,3.807,25,2.296,26,0.639,27,1.648,28,0.687,29,1.493,30,1.708,31,1.195,33,2.296,34,0.219,35,1.03,40,1.388,42,0.606,46,0.014,56,0.426,60,1.03,79,1.46,89,2.654,110,2.656,180,1.953,181,2.024,213,3.786,233,2.885,234,3.175,235,3.175,375,3.562,376,3.175,377,3.175,379,3.562,380,3.562,461,5.219,462,4.151]],["title/classes/PlayTimes.html",[0,0.332,463,2.549]],["body/classes/PlayTimes.html",[0,0.441,2,0.185,3,0.185,4,0.164,8,0.163,9,0.555,10,0.318,11,0.012,15,0.393,17,0.448,18,0.02,19,0.286,20,0.198,21,0.381,26,0.716,27,2.152,34,0.185,37,1.868,40,2.017,42,0.514,46,0.012,50,4.18,59,2.897,64,3.114,100,1.402,279,3.314,286,4.986,393,3.884,463,3.385,464,5.437,465,3.018,466,4.18,467,5.178,468,5.178,469,4.871,470,3.516,471,3.516,472,3.516,473,4.871,474,3.516,475,4.274,476,3.516]],["title/classes/SequenceId.html",[0,0.332,477,2.345]],["body/classes/SequenceId.html",[0,0.525,2,0.241,3,0.241,4,0.213,8,0.134,9,0.661,10,0.335,11,0.015,15,0.378,18,0.019,20,0.186,26,0.631,34,0.306,42,0.669,46,0.015,59,3.584,64,3.71,67,1.194,69,1.081,93,1.37,94,1.746,99,2.714,100,1.99,155,3.21,477,4.283,478,4.428,479,3.182,480,6.7,481,4.578,482,4.578,483,4.578,484,3.182]],["title/classes/SetPropertyExpression.html",[0,0.332,178,1.056]],["body/classes/SetPropertyExpression.html",[0,0.604,2,0.215,3,0.215,4,0.191,8,0.12,10,0.368,11,0.014,12,0.669,15,0.393,17,0.376,18,0.019,19,0.417,20,0.261,21,0.32,34,0.351,46,0.014,56,0.32,78,1.276,93,1.274,100,1.973,162,2.776,175,1.632,178,1.738,179,1.553,180,1.632,181,2.63,220,2.425,221,2.614,224,3.579,225,3.749,226,2.842,485,4.09,486,4.09,487,4.09]],["title/classes/SetPropertyExpressionFormatter.html",[0,0.332,191,2.549]],["body/classes/SetPropertyExpressionFormatter.html",[0,0.523,2,0.239,3,0.239,4,0.212,8,0.133,9,0.658,10,0.334,11,0.015,12,0.745,15,0.376,17,0.531,18,0.019,19,0.34,20,0.235,21,0.452,26,0.572,28,0.615,32,2.697,34,0.239,35,1.129,42,0.664,46,0.015,56,0.452,71,3.901,73,1.976,74,2.511,78,1.055,93,1.074,100,1.664,128,2.217,178,1.924,191,4.016,198,3.694,229,3.478,370,3.478,371,3.478,372,3.161,488,5.451,489,4.548,490,4.548]],["title/classes/SetPropertyExpressionMatcher.html",[0,0.332,211,2.549]],["body/classes/SetPropertyExpressionMatcher.html",[0,0.491,2,0.217,3,0.217,4,0.192,5,2.956,7,2.139,8,0.121,9,0.618,10,0.319,11,0.016,12,0.675,13,3.541,14,4.392,15,0.353,17,0.499,18,0.019,19,0.319,20,0.221,21,0.424,22,3.002,23,3.8,25,2.283,26,0.638,27,1.642,28,0.685,29,1.487,30,1.697,31,1.188,32,2.447,33,2.283,34,0.217,35,1.024,37,1.379,40,1.379,42,0.603,46,0.014,56,0.424,60,1.024,79,1.451,89,2.638,152,2.65,178,1.855,211,3.772,233,2.868,234,3.156,235,3.156,376,3.156,377,3.156,491,5.204,492,4.126,493,4.126,494,4.126]],["title/classes/Setup.html",[0,0.332,95,1.431]],["body/classes/Setup.html",[0,0.351,2,0.135,3,0.135,4,0.12,8,0.075,9,0.441,10,0.374,11,0.01,12,0.42,15,0.419,17,0.603,18,0.019,19,0.346,20,0.275,21,0.46,26,0.703,27,1.691,28,0.273,31,1.757,34,0.135,35,0.637,37,1.562,46,0.01,67,1.592,93,0.916,94,1.611,95,2.293,100,1.116,102,3.248,105,1.364,111,1.641,115,0.903,127,1.42,162,2.57,268,1.891,279,2.299,297,2.299,314,2.585,381,2.011,394,5.014,402,3.983,430,2.988,431,2.966,436,1.963,463,2.695,475,3.983,495,2.203,496,4.469,497,5.208,498,5.208,499,2.567,500,3.878,501,2.567,502,3.878,503,2.567,504,5.88,505,3.878,506,2.567,507,4.674,508,3.878,509,2.567,510,3.878,511,3.878,512,2.567,513,3.878,514,2.567,515,3.878,516,5.208,517,2.567,518,2.567,519,4.674,520,4.674,521,2.567,522,2.567,523,4.674]],["title/classes/Times.html",[0,0.332,404,1.902]],["body/classes/Times.html",[0,0.306,2,0.113,3,0.113,4,0.1,8,0.063,9,0.385,10,0.335,11,0.009,12,0.352,15,0.438,17,0.503,18,0.019,19,0.322,20,0.259,21,0.428,26,0.666,27,1.024,29,1.842,34,0.178,35,0.534,46,0.009,47,3.704,59,3.518,64,2.163,66,3.296,67,0.561,69,1.441,78,0.941,93,0.799,94,1.745,99,2.812,100,1.365,105,0.756,138,3.518,139,2.904,254,1.495,286,5.081,361,2.352,404,3.724,466,3.589,467,4.699,468,5.092,524,1.645,525,4.182,526,4.742,527,4.742,528,4.742,529,4.187,530,3.384,531,4.742,532,3.384,533,4.182,534,3.384,535,2.151,536,3.384,537,3.384,538,6.104,539,2.151,540,2.151,541,2.151,542,2.151,543,3.384,544,2.151,545,2.151,546,3.384,547,2.151,548,2.151,549,2.151,550,3.384,551,4.425,552,2.151,553,4.182,554,2.151,555,2.151,556,2.151,557,2.151,558,3.384,559,2.151,560,1.846,561,1.846,562,2.151,563,2.151,564,2.151,565,2.151,566,2.151]],["title/classes/TrackedExpressionsFormatter.html",[0,0.332,567,2.549]],["body/classes/TrackedExpressionsFormatter.html",[0,0.496,2,0.221,3,0.221,4,0.195,8,0.123,9,0.624,10,0.322,11,0.014,12,0.686,15,0.357,17,0.504,18,0.019,19,0.322,20,0.223,21,0.429,26,0.605,28,0.65,34,0.289,35,1.04,42,0.612,46,0.016,56,0.569,66,2.911,67,1.092,69,0.989,73,1.82,74,2.381,78,1.115,119,3.595,120,4.41,121,3.595,126,3.595,128,2.042,129,2.911,130,3.595,567,4.245,568,4.672,569,5.481,570,4.703,571,2.911,572,4.189,573,4.189,574,4.189,575,4.189]],["title/classes/Tracker.html",[0,0.332,248,1.594]],["body/classes/Tracker.html",[0,0.451,2,0.191,3,0.191,4,0.17,8,0.106,9,0.568,10,0.349,11,0.013,12,0.595,15,0.399,17,0.458,18,0.019,19,0.293,20,0.249,21,0.39,26,0.606,28,0.53,34,0.299,35,0.903,42,0.531,46,0.013,56,0.445,59,1.885,67,0.948,69,0.859,93,1.177,94,1.559,96,4.278,99,2.156,100,1.047,105,1.753,175,1.94,178,1.846,179,1.846,248,2.472,393,2.528,408,2.325,477,4.234,484,2.528,496,4.278,576,2.528,577,6.12,578,3.637,579,4.986,580,5.684,581,4.986,582,3.637,583,3.637,584,5.689,585,3.637,586,3.637,587,3.637,588,3.637,589,3.637]],["title/classes/Verifier.html",[0,0.332,385,1.902]],["body/classes/Verifier.html",[0,0.505,2,0.185,3,0.185,4,0.163,8,0.103,9,0.554,10,0.294,11,0.012,12,0.796,15,0.317,17,0.447,18,0.019,19,0.286,20,0.198,21,0.38,26,0.482,28,0.673,29,1.332,34,0.294,40,1.172,42,0.88,46,0.012,47,4.122,56,0.561,60,0.87,67,0.915,68,3.109,69,1.148,78,1.1,94,1.529,105,1.71,125,3.853,127,1.94,128,1.71,138,2.08,140,3.282,149,3.124,174,1.524,361,3.379,385,2.893,404,3.549,406,3.879,409,2.08,430,2.242,529,2.682,590,2.438,591,3.507,592,4.293,593,3.507,594,4.173,595,3.507,596,3.01,597,3.109,598,3.01,599,2.438,600,3.01,601,3.01,602,3.01,603,3.01,604,3.01,605,3.01,606,4.173,607,3.01,608,3.01,609,3.01,610,3.01]],["title/classes/VerifyError.html",[0,0.332,599,2.549]],["body/classes/VerifyError.html",[0,0.534,2,0.206,3,0.206,4,0.182,10,0.206,11,0.013,12,0.856,15,0.254,17,0.359,18,0.019,19,0.23,20,0.159,21,0.305,26,0.387,28,0.699,29,1.07,34,0.311,40,1.305,42,0.92,46,0.013,47,3.896,56,0.549,60,0.969,67,1.018,68,3.344,69,1.235,78,1.15,94,1.616,105,1.373,125,3.344,128,1.904,138,2.315,140,3.058,149,2.712,174,2.273,385,2.712,404,3.267,406,3.636,409,2.315,430,2.496,529,4.001,590,2.714,592,3.771,594,3.351,596,3.351,597,3.344,598,3.351,599,3.636,600,4.489,601,4.489,602,3.351,603,3.351,604,3.351,605,3.351,606,4.489,607,3.351,608,3.351,609,3.351,610,3.351,611,3.904]],["title/classes/VerifyFormatter.html",[0,0.332,592,2.345]],["body/classes/VerifyFormatter.html",[0,0.457,2,0.195,3,0.195,4,0.173,8,0.108,9,0.575,10,0.302,11,0.013,12,0.827,15,0.329,17,0.464,18,0.019,19,0.297,20,0.206,21,0.395,26,0.569,28,0.656,29,1.574,34,0.266,42,0.839,46,0.013,55,2.283,56,0.542,59,2.978,60,0.919,67,0.966,69,0.875,73,1.61,74,2.194,78,1.266,94,1.384,117,4.629,122,4.333,123,5.293,124,5.293,125,3.943,127,2.05,128,2.462,131,2.575,372,2.575,567,4.737,570,4.929,571,3.509,592,3.672,597,2.369,612,4.393,613,3.705,614,3.705,615,2.834,616,3.705,617,3.705,618,3.705,619,3.705,620,3.705,621,3.705,622,3.705,623,3.705]],["title/changelog.html",[624,2.625,625,2.34,626,3.059]],["body/changelog.html",[9,0.506,11,0.014,18,0.014,31,1.28,40,1.486,46,0.014,56,0.348,67,1.639,77,3.151,79,1.563,95,2.221,138,2.636,250,1.932,255,2.842,256,2.842,259,2.619,297,2.636,304,2.842,315,3.09,381,3.552,385,2.305,475,3.4,615,3.4,627,4.446,628,4.446,629,4.446,630,4.446,631,4.446,632,4.446,633,4.446,634,4.446,635,4.806,636,3.815,637,3.815,638,4.446,639,4.446,640,4.446,641,4.446,642,6.628,643,4.446,644,4.446,645,4.446,646,4.446,647,4.446,648,4.446,649,4.446,650,4.446,651,4.446,652,4.446,653,3.815,654,4.446,655,3.815,656,4.446,657,3.815,658,4.446,659,4.446,660,4.446,661,4.446,662,4.446,663,3.815,664,3.815,665,3.815,666,3.815,667,3.815,668,3.815,669,4.446,670,4.446]],["title/coverage.html",[671,4.304]],["body/coverage.html",[0,0.666,1,1.228,4,0.09,5,3.065,6,1.648,7,2.84,11,0.008,14,1.228,18,0.019,20,0.078,30,1.272,46,0.008,47,1.139,48,2.364,49,2.364,52,1.228,56,0.428,60,1.359,61,1.335,62,1.228,64,4.83,67,1.774,68,1.228,69,0.453,71,1.062,72,1.648,73,2.731,74,0.834,87,1.648,90,0.834,91,1.648,92,1.648,95,0.749,110,0.79,117,1.335,118,2.364,120,1.228,129,1.335,131,1.335,140,0.996,141,2.555,142,2.697,149,0.996,151,0.79,152,0.79,153,0.834,154,1.646,155,1.062,170,1.833,173,2.637,175,0.581,178,0.553,179,0.553,180,0.581,187,1.648,189,1.335,191,1.335,193,1.335,195,1.335,210,1.335,211,1.335,212,1.335,213,1.335,220,2.637,227,1.648,230,1.648,238,1.062,239,2.701,240,2.264,241,2.637,242,0.996,248,0.834,249,1.139,250,0.834,252,1.139,262,1.139,284,1.335,285,2.364,295,2.364,341,1.648,354,1.648,369,1.648,374,1.648,381,0.996,382,2.364,383,1.335,385,0.996,404,0.996,407,1.335,408,1.228,409,1.139,456,1.648,461,1.648,463,1.335,464,1.648,465,1.648,477,1.228,478,2.697,479,2.697,484,1.335,488,1.648,491,1.648,495,1.648,524,1.469,567,1.335,568,2.364,571,1.335,576,2.149,590,2.697,592,1.228,597,1.228,599,1.335,612,2.364,635,1.469,671,1.648,672,1.648,673,1.921,674,1.921,675,6.805,676,6.897,677,3.092,678,1.648,679,1.921,680,1.921,681,4.448,682,6.037,683,2.968,684,4.184,685,1.648,686,1.648,687,1.648,688,1.648,689,1.648,690,1.648,691,3.817,692,1.648,693,1.648,694,1.648,695,4.448,696,1.921,697,1.921,698,1.921,699,3.092,700,1.648,701,1.921,702,1.921,703,1.921,704,1.921]],["title/miscellaneous/enumerations.html",[705,1.586,706,3.788]],["body/miscellaneous/enumerations.html",[8,0.161,11,0.016,18,0.016,46,0.016,239,2.857,240,2.395,241,3.854,245,3.854,255,3.523,256,3.523,524,4.215,551,5.579,560,4.729,561,4.729,705,2.857,706,4.729,707,4.729,708,5.511]],["title/miscellaneous/functions.html",[67,1.151,705,1.586]],["body/miscellaneous/functions.html",[5,1.821,8,0.109,11,0.013,17,0.53,18,0.016,19,0.339,21,0.451,46,0.013,48,2.857,49,3.883,56,0.484,62,3.687,67,1.324,68,3.687,73,2.901,74,2.206,77,2.066,90,1.623,115,1.313,118,2.857,129,4.009,131,4.009,162,2.334,239,1.936,240,1.623,241,3.01,248,2.206,261,2.215,381,2.632,407,3.529,408,3.687,409,3.42,478,2.596,479,3.529,484,4.009,568,2.857,571,4.009,576,2.596,590,2.596,597,3.687,612,2.857,635,4.411,636,3.206,637,3.206,678,3.206,684,3.206,685,4.95,686,4.95,687,4.95,688,4.95,689,3.206,690,4.357,691,3.206,692,4.95,693,4.95,694,4.95,705,1.936,707,3.206,709,7.046,710,3.735,711,3.735,712,2.857,713,3.735,714,3.206,715,3.735,716,3.206,717,3.735,718,3.735,719,3.735,720,3.735,721,3.735]],["title/index.html",[8,0.089,624,2.625,625,2.34]],["body/index.html",[0,0.275,9,0.588,11,0.008,18,0.019,19,0.111,20,0.077,21,0.147,26,0.301,28,0.513,37,1.469,40,0.629,42,0.964,46,0.008,59,2.501,66,3.353,67,1.564,69,1.379,77,3.565,78,0.698,79,1.069,93,1.448,95,0.734,100,1.766,105,0.661,111,2.446,125,1.203,138,2.606,151,1.251,152,1.251,154,1.627,162,0.865,164,3.054,170,1.803,181,1.482,229,2.325,247,2.66,259,1.759,268,1.482,296,1.614,297,2.269,304,1.203,314,1.682,361,2.113,381,3.744,385,0.975,404,2.278,420,1.439,615,1.439,625,1.439,653,1.614,655,1.614,657,3.284,663,1.614,664,1.614,665,3.284,666,1.614,667,1.614,668,4.14,672,2.609,700,2.609,722,5.432,723,1.881,724,1.881,725,3.827,726,3.041,727,1.881,728,3.041,729,1.881,730,1.881,731,1.881,732,1.881,733,1.881,734,1.881,735,1.881,736,3.041,737,1.881,738,1.881,739,1.881,740,1.881,741,1.881,742,1.881,743,1.881,744,1.881,745,3.041,746,1.881,747,1.881,748,1.881,749,1.881,750,1.881,751,1.881,752,1.881,753,1.881,754,1.881,755,1.881,756,1.881,757,1.881,758,1.881,759,1.881,760,4.395,761,1.881,762,3.041,763,1.881,764,3.041,765,1.881,766,1.881,767,6.665,768,3.041,769,1.881,770,3.041,771,1.881,772,1.881,773,3.041,774,4.395,775,1.881,776,1.881,777,3.041,778,1.881,779,1.881,780,4.825,781,1.881,782,3.041,783,1.881,784,3.041,785,1.881,786,1.881,787,4.825,788,1.881,789,4.825,790,3.041,791,1.881,792,1.881,793,3.041,794,3.041,795,4.395,796,4.395,797,3.041,798,1.881,799,1.881,800,4.395,801,3.041,802,3.041,803,1.881,804,1.881,805,1.881,806,1.881,807,1.881,808,1.881,809,3.041,810,3.041,811,1.881,812,1.881,813,1.881,814,1.881,815,3.041,816,2.609,817,3.041,818,1.881,819,1.881,820,1.881,821,1.881,822,3.041,823,1.881,824,1.881,825,1.881,826,1.881,827,1.881,828,1.881,829,1.881,830,1.881,831,1.881,832,1.881,833,1.881,834,1.881,835,1.881,836,1.881,837,1.881,838,1.881,839,1.881,840,1.881,841,1.881,842,1.881,843,1.881,844,1.881,845,1.881,846,1.881,847,1.881,848,3.041,849,1.881,850,1.881,851,1.881]],["title/modules.html",[852,4.304]],["body/modules.html",[11,0.017,18,0.017,46,0.017,852,5.074]],["title/overview.html",[853,4.304]],["body/overview.html",[0,0.526,11,0.017,18,0.017,46,0.017,154,2.152,816,4.989,853,4.989,854,5.813]],["title/miscellaneous/typealiases.html",[705,1.586,855,4.414]],["body/miscellaneous/typealiases.html",[8,0.149,11,0.016,18,0.019,20,0.252,46,0.016,55,2.473,56,0.522,60,1.262,110,2.091,141,2.209,151,2.091,152,2.091,153,2.209,173,3.673,175,1.538,178,1.464,179,1.464,180,1.538,220,3.015,576,3.534,580,5.733,705,2.636,712,3.888,716,4.363,856,5.085,857,5.085,858,5.085]],["title/miscellaneous/variables.html",[683,3.376,705,1.586]],["body/miscellaneous/variables.html",[8,0.152,11,0.016,18,0.018,20,0.255,46,0.016,56,0.49,60,1.285,69,1.223,99,3.071,100,1.491,141,2.251,142,4.354,155,3.725,170,4.317,295,3.961,477,3.311,478,3.6,479,4.354,683,3.961,705,2.685,712,3.961,714,4.445,859,5.18]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":64,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"coverage.html":{}}}],["0/1",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":681,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":66,"title":{},"body":{"classes/CallCounter.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"index.html":{}}}],["1/1",{"_index":680,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":700,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["100",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":800,"title":{},"body":{"index.html":{}}}],["2bit",{"_index":851,"title":{},"body":{"index.html":{}}}],["3",{"_index":802,"title":{},"body":{"index.html":{}}}],["4",{"_index":816,"title":{},"body":{"index.html":{},"overview.html":{}}}],["41",{"_index":854,"title":{},"body":{"overview.html":{}}}],["6",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["_atleastonc",{"_index":525,"title":{},"body":{"classes/Times.html":{}}}],["_atmostonc",{"_index":526,"title":{},"body":{"classes/Times.html":{}}}],["_never",{"_index":527,"title":{},"body":{"classes/Times.html":{}}}],["_onc",{"_index":528,"title":{},"body":{"classes/Times.html":{}}}],["_prototyp",{"_index":300,"title":{},"body":{"classes/Interceptor.html":{}}}],["_proxi",{"_index":301,"title":{},"body":{"classes/Interceptor.html":{}}}],["_valu",{"_index":302,"title":{},"body":{"classes/Interceptor.html":{}}}],["accept",{"_index":330,"title":{},"body":{"classes/Interceptor.html":{}}}],["access",{"_index":782,"title":{},"body":{"index.html":{}}}],["action",{"_index":496,"title":{},"body":{"classes/Setup.html":{},"classes/Tracker.html":{}}}],["activestrategi",{"_index":269,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["actual",{"_index":817,"title":{},"body":{"index.html":{}}}],["ad",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":96,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Tracker.html":{}}}],["add(act",{"_index":581,"title":{},"body":{"classes/Tracker.html":{}}}],["add(key",{"_index":101,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["alias",{"_index":856,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":797,"title":{},"body":{"index.html":{}}}],["any|it",{"_index":36,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{}}}],["appli",{"_index":166,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["arg",{"_index":162,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Setup.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["arg1",{"_index":832,"title":{},"body":{"index.html":{}}}],["arg2",{"_index":822,"title":{},"body":{"index.html":{}}}],["argument",{"_index":181,"title":{},"body":{"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"index.html":{}}}],["argumentsmatch",{"_index":1,"title":{"classes/ArgumentsMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["argumentsmatcherfactori",{"_index":685,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["array",{"_index":83,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["ask",{"_index":735,"title":{},"body":{"index.html":{}}}],["assert",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["assign",{"_index":490,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["atleast",{"_index":530,"title":{},"body":{"classes/Times.html":{}}}],["atleast(callcount",{"_index":543,"title":{},"body":{"classes/Times.html":{}}}],["atleastonc",{"_index":531,"title":{},"body":{"classes/Times.html":{}}}],["atmost",{"_index":532,"title":{},"body":{"classes/Times.html":{}}}],["atmost(callcount",{"_index":546,"title":{},"body":{"classes/Times.html":{}}}],["atmostonc",{"_index":533,"title":{},"body":{"classes/Times.html":{}}}],["b",{"_index":823,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":247,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"index.html":{}}}],["behaviorstrategi",{"_index":399,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["behaviour",{"_index":670,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":534,"title":{},"body":{"classes/Times.html":{}}}],["between(callcountfrom",{"_index":549,"title":{},"body":{"classes/Times.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{}}}],["c",{"_index":725,"title":{},"body":{"index.html":{}}}],["call",{"_index":138,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["callback",{"_index":314,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["callback((arg1",{"_index":830,"title":{},"body":{"index.html":{}}}],["callback((argu",{"_index":812,"title":{},"body":{"index.html":{}}}],["callback(callback",{"_index":502,"title":{},"body":{"classes/Setup.html":{}}}],["callback.apply(undefin",{"_index":521,"title":{},"body":{"classes/Setup.html":{}}}],["callbacks.loose.strategi",{"_index":251,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.loose.strategy.t",{"_index":341,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"coverage.html":{}}}],["callbacks.loose.strategy.ts:12",{"_index":343,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:19",{"_index":345,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:23",{"_index":346,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:38",{"_index":344,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.strict.strategi",{"_index":253,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.strict.strategy.t",{"_index":354,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["callbacks.strict.strategy.ts:13",{"_index":357,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:17",{"_index":358,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:32",{"_index":356,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:6",{"_index":355,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.t",{"_index":241,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callbacks.ts:13",{"_index":282,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:15",{"_index":280,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:17",{"_index":283,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:21",{"_index":246,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["callbacks.ts:32",{"_index":336,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:40",{"_index":339,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:44",{"_index":338,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:48",{"_index":337,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:52",{"_index":340,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks/interceptor",{"_index":240,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callcount",{"_index":47,"title":{"classes/CallCounter.html":{}},"body":{"classes/CallCounter.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["callcounter(expressionmatcherfactori",{"_index":70,"title":{},"body":{"classes/CallCounter.html":{}}}],["callcounterfactori",{"_index":68,"title":{},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["callcountfrom",{"_index":553,"title":{},"body":{"classes/Times.html":{}}}],["callcountto",{"_index":550,"title":{},"body":{"classes/Times.html":{}}}],["calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n",{"_index":623,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["case",{"_index":647,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":293,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["changelog",{"_index":626,"title":{"changelog.html":{}},"body":{}}],["check",{"_index":755,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["code",{"_index":657,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compat",{"_index":729,"title":{},"body":{"index.html":{}}}],["compil",{"_index":655,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["console.log",{"_index":636,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":42,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["constant",{"_index":32,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constantformatt",{"_index":71,"title":{"classes/ConstantFormatter.html":{}},"body":{"classes/ConstantFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["constantformatter().format(object[index",{"_index":86,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["constantmatch",{"_index":14,"title":{"classes/ConstantMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["constructor(arg",{"_index":226,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(argumentsmatch",{"_index":375,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["constructor(constantformatt",{"_index":370,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constructor(constantmatch",{"_index":13,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor(definedsetup",{"_index":342,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["constructor(evalu",{"_index":535,"title":{},"body":{"classes/Times.html":{}}}],["constructor(expectedexpressionformatt",{"_index":613,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["constructor(expressionformatt",{"_index":119,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["constructor(expressionmatch",{"_index":51,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["constructor(expressionreflector",{"_index":444,"title":{},"body":{"classes/MockCore.html":{}}}],["constructor(getpropertyexpressionmatch",{"_index":209,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["constructor(getpropertyformatt",{"_index":188,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["constructor(interceptorcallback",{"_index":305,"title":{},"body":{"classes/Interceptor.html":{}}}],["constructor(messag",{"_index":601,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["constructor(mock",{"_index":499,"title":{},"body":{"classes/Setup.html":{}}}],["constructor(nam",{"_index":221,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(pred",{"_index":362,"title":{},"body":{"classes/It.html":{}}}],["constructor(priv",{"_index":35,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{}}}],["constructor(publ",{"_index":224,"title":{},"body":{"classes/GetPropertyExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(reflector",{"_index":591,"title":{},"body":{"classes/Verifier.html":{}}}],["constructor(sequenceid",{"_index":578,"title":{},"body":{"classes/Tracker.html":{}}}],["constructor(strictstrategi",{"_index":335,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["control",{"_index":838,"title":{},"body":{"index.html":{}}}],["correspond",{"_index":840,"title":{},"body":{"index.html":{}}}],["count",{"_index":50,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{}}}],["count(expect",{"_index":54,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter",{"_index":596,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["counter.t",{"_index":49,"title":{},"body":{"classes/CallCounter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["counter.ts:12",{"_index":57,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:6",{"_index":53,"title":{},"body":{"classes/CallCounter.html":{}}}],["coverag",{"_index":671,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createobject",{"_index":303,"title":{},"body":{"classes/Interceptor.html":{}}}],["custom",{"_index":428,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["date",{"_index":795,"title":{},"body":{"index.html":{}}}],["date(2016",{"_index":827,"title":{},"body":{"index.html":{}}}],["date(2017",{"_index":831,"title":{},"body":{"index.html":{}}}],["deal",{"_index":847,"title":{},"body":{"index.html":{}}}],["declar",{"_index":156,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["dedic",{"_index":732,"title":{},"body":{"index.html":{}}}],["default",{"_index":99,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Interceptor.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":15,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["definedsetup",{"_index":90,"title":{"classes/DefinedSetups.html":{}},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["definedsetups(expressionmatcherfactori",{"_index":440,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["delimit",{"_index":621,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["deni",{"_index":773,"title":{},"body":{"index.html":{}}}],["depend",{"_index":727,"title":{},"body":{"index.html":{}}}],["deprec",{"_index":427,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["describ",{"_index":429,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["descript",{"_index":84,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/Interceptor.html":{}}}],["description.push(new",{"_index":85,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["dev",{"_index":738,"title":{},"body":{"index.html":{}}}],["directli",{"_index":298,"title":{},"body":{"classes/Interceptor.html":{}}}],["document",{"_index":672,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dump",{"_index":635,"title":{},"body":{"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dump(mock",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e",{"_index":294,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["enum",{"_index":254,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Times.html":{}}}],["enumer",{"_index":706,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":600,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["error(\"setup",{"_index":843,"title":{},"body":{"index.html":{}}}],["error('an",{"_index":803,"title":{},"body":{"index.html":{}}}],["error('argu",{"_index":814,"title":{},"body":{"index.html":{}}}],["error('invok",{"_index":835,"title":{},"body":{"index.html":{}}}],["error('property4",{"_index":781,"title":{},"body":{"index.html":{}}}],["es5",{"_index":656,"title":{},"body":{"changelog.html":{}}}],["evalu",{"_index":537,"title":{},"body":{"classes/Times.html":{}}}],["exactli",{"_index":466,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["exactly(callcount",{"_index":554,"title":{},"body":{"classes/Times.html":{}}}],["exactly(count",{"_index":469,"title":{},"body":{"classes/PlayTimes.html":{}}}],["exampl",{"_index":299,"title":{},"body":{"classes/Interceptor.html":{},"classes/MockCore.html":{}}}],["except",{"_index":431,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["exclus",{"_index":560,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["expect",{"_index":29,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpress",{"_index":55,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/typealiases.html":{}}}],["expectedexpressionformatt",{"_index":117,"title":{"classes/ExpectedExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["expectedexpressionformatter(expressionformatterfactori",{"_index":132,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expectedexpressionformatterfactori",{"_index":131,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expectedexpressionmessag",{"_index":617,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessage}\\n${delimiter}\\ntrack",{"_index":622,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionreflector",{"_index":140,"title":{"classes/ExpectedExpressionReflector.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["expectedgetpropertyexpress",{"_index":151,"title":{"classes/ExpectedGetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedgetpropertyexpression(nam",{"_index":161,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpression|it",{"_index":232,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["expectedmethodexpress",{"_index":153,"title":{"classes/ExpectedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmethodexpression(arg",{"_index":168,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedmethodexpression|it",{"_index":378,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["expectednamedmethodexpress",{"_index":110,"title":{"classes/ExpectedNamedMethodExpression.html":{}},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectednamedmethodexpression(nam",{"_index":163,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectednamedmethodexpression).nam",{"_index":116,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["expectednamedmethodexpression|it",{"_index":462,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["expectedsetpropertyexpress",{"_index":152,"title":{"classes/ExpectedSetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedsetpropertyexpression(nam",{"_index":165,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedsetpropertyexpression|it",{"_index":492,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["experiment",{"_index":438,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["export",{"_index":34,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["express",{"_index":56,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expression(proxi",{"_index":172,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expression.arguments.foreach(arg",{"_index":457,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.nam",{"_index":229,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"index.html":{}}}],["expression.name}(${valu",{"_index":460,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.valu",{"_index":799,"title":{},"body":{"index.html":{}}}],["expressiondescript",{"_index":133,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressiondescription}${mockdescript",{"_index":136,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressionformatt",{"_index":120,"title":{"classes/ExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{}}}],["expressionformatterfactori",{"_index":129,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expressionmatch",{"_index":52,"title":{"classes/ExpressionMatcher.html":{}},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"coverage.html":{}}}],["expressionmatcherfactori",{"_index":62,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expressionproxi",{"_index":144,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expressionreflector",{"_index":411,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["expressions.t",{"_index":173,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/expect",{"_index":60,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expressions/express",{"_index":30,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["expressions|it",{"_index":203,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["extend",{"_index":174,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["factori",{"_index":130,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["fals",{"_index":40,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["field",{"_index":794,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["find",{"_index":751,"title":{},"body":{"index.html":{}}}],["fix",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["fluent",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":758,"title":{},"body":{"index.html":{}}}],["format",{"_index":74,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["format(expect",{"_index":122,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(express",{"_index":198,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["format(object",{"_index":75,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["format(templ",{"_index":720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["format(trackedexpress",{"_index":569,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["formatt",{"_index":128,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["formatted.join",{"_index":459,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatted.push(this.constantformatter.format(arg",{"_index":458,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatter.t",{"_index":73,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatter.ts:10",{"_index":372,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:12",{"_index":196,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:15",{"_index":126,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatter.ts:18",{"_index":614,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["formatter.ts:22",{"_index":199,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:4",{"_index":371,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["formatter.ts:5",{"_index":76,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["formatter.ts:9",{"_index":121,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatters/verifi",{"_index":598,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["friendli",{"_index":747,"title":{},"body":{"index.html":{}}}],["full",{"_index":745,"title":{},"body":{"index.html":{}}}],["fulli",{"_index":750,"title":{},"body":{"index.html":{}}}],["function",{"_index":67,"title":{"miscellaneous/functions.html":{}},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get",{"_index":624,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["get(express",{"_index":106,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["get.properti",{"_index":200,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["get.property.integrationtests.t",{"_index":759,"title":{},"body":{"index.html":{}}}],["getpropertyexpress",{"_index":175,"title":{"classes/GetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getpropertyexpression(methodnam",{"_index":352,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["getpropertyexpression(nam",{"_index":319,"title":{},"body":{"classes/Interceptor.html":{}}}],["getpropertyexpression:19",{"_index":177,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{}}}],["getpropertyexpressionformatt",{"_index":189,"title":{"classes/GetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["getpropertyexpressionmatch",{"_index":210,"title":{"classes/GetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["getpropertyformatt",{"_index":197,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["getprototypeof",{"_index":333,"title":{},"body":{"classes/Interceptor.html":{}}}],["getter",{"_index":228,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["hasnamedmethod",{"_index":97,"title":{},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(methodnam",{"_index":258,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(nam",{"_index":108,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["havebeencalledtim",{"_index":124,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["help",{"_index":734,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":410,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["hold",{"_index":783,"title":{},"body":{"index.html":{}}}],["hook",{"_index":791,"title":{},"body":{"index.html":{}}}],["id",{"_index":584,"title":{},"body":{"classes/Tracker.html":{}}}],["id.t",{"_index":479,"title":{},"body":{"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["id.ts:2",{"_index":481,"title":{},"body":{"classes/SequenceId.html":{}}}],["id.ts:4",{"_index":482,"title":{},"body":{"classes/SequenceId.html":{}}}],["identifi",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["iexpectedexpress",{"_index":149,"title":{"interfaces/IExpectedExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["ignor",{"_index":511,"title":{},"body":{"classes/Setup.html":{}}}],["iinterceptorcallback",{"_index":238,"title":{"interfaces/IInterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["iinterceptorcallbacksstrategi",{"_index":242,"title":{"interfaces/IInterceptorCallbacksStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["imock",{"_index":394,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["implement",{"_index":268,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["inclus",{"_index":561,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["inherit",{"_index":176,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/Mock.html":{}}}],["insequ",{"_index":384,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["insequence(sequ",{"_index":390,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["inspir",{"_index":724,"title":{},"body":{"index.html":{}}}],["instal",{"_index":736,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":155,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["instance(1",{"_index":809,"title":{},"body":{"index.html":{}}}],["instance(2",{"_index":811,"title":{},"body":{"index.html":{}}}],["instance(it.is(valu",{"_index":815,"title":{},"body":{"index.html":{}}}],["instance(valu",{"_index":813,"title":{},"body":{"index.html":{}}}],["instance.method",{"_index":785,"title":{},"body":{"index.html":{}}}],["instance.method(1",{"_index":824,"title":{},"body":{"index.html":{}}}],["instance.method(2",{"_index":837,"title":{},"body":{"index.html":{}}}],["instance.method(3",{"_index":833,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(valu",{"_index":828,"title":{},"body":{"index.html":{}}}],["instance.properti",{"_index":796,"title":{},"body":{"index.html":{}}}],["instance.property1",{"_index":768,"title":{},"body":{"index.html":{}}}],["instance.property2",{"_index":775,"title":{},"body":{"index.html":{}}}],["instance.property3",{"_index":778,"title":{},"body":{"index.html":{}}}],["instance[property4nam",{"_index":779,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":79,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"changelog.html":{},"index.html":{}}}],["integr",{"_index":754,"title":{},"body":{"index.html":{}}}],["intend",{"_index":296,"title":{},"body":{"classes/Interceptor.html":{},"index.html":{}}}],["interact",{"_index":637,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["intercept",{"_index":278,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["intercepted(express",{"_index":257,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptedcallback",{"_index":414,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptor",{"_index":250,"title":{"classes/Interceptor.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"coverage.html":{}}}],["interceptor(callback",{"_index":442,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptorcallback",{"_index":262,"title":{"classes/InterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"coverage.html":{}}}],["interceptorcallbacks(strictstrategi",{"_index":267,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksfactori",{"_index":407,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interceptorcallbacksfactory(definedsetup",{"_index":261,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"miscellaneous/functions.html":{}}}],["interceptorcallbacksloosestrategi",{"_index":249,"title":{"classes/InterceptorCallbacksLooseStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"coverage.html":{}}}],["interceptorcallbacksloosestrategy(definedsetup",{"_index":266,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksstrictstrategi",{"_index":252,"title":{"classes/InterceptorCallbacksStrictStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["interceptorcallbacksstrictstrategy(definedsetup",{"_index":264,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorfactori",{"_index":412,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptorfactory(interceptedcallback",{"_index":416,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interfac",{"_index":154,"title":{"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["intern",{"_index":315,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{}}}],["introduc",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["invok",{"_index":279,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/PlayTimes.html":{},"classes/Setup.html":{}}}],["invoke(arg",{"_index":505,"title":{},"body":{"classes/Setup.html":{}}}],["invoke(express",{"_index":260,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["ipred",{"_index":284,"title":{"interfaces/IPredicate.html":{}},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{}}}],["is(pred",{"_index":287,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isani",{"_index":289,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isequenceverifi",{"_index":391,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["isetup",{"_index":402,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["isetupinvok",{"_index":102,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["issu",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["it(pred",{"_index":288,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["it).pred",{"_index":81,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it).test(left",{"_index":89,"title":{},"body":{"classes/ConstantMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["it.i",{"_index":776,"title":{},"body":{"index.html":{}}}],["it.is(${(object",{"_index":80,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it.is((express",{"_index":770,"title":{},"body":{"index.html":{}}}],["it.is(express",{"_index":842,"title":{},"body":{"index.html":{}}}],["it.is(valu",{"_index":801,"title":{},"body":{"index.html":{}}}],["it.isani",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["itestfunct",{"_index":808,"title":{},"body":{"index.html":{}}}],["itestobject",{"_index":760,"title":{},"body":{"index.html":{}}}],["key",{"_index":104,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["latest",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":25,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["left.foreach((lvalu",{"_index":41,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.length",{"_index":38,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.nam",{"_index":234,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["let'",{"_index":772,"title":{},"body":{"index.html":{}}}],["lib/.../cal",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../dump.t",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../expect",{"_index":712,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/.../expressions.t",{"_index":857,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../factories.t",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../format",{"_index":713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../interceptor",{"_index":707,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/.../interceptor.t",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../sequ",{"_index":714,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lib/.../times.t",{"_index":708,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../track",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../tracker.t",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lib/.../verifi",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../verifier.t",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/cal",{"_index":48,"title":{},"body":{"classes/CallCounter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/defin",{"_index":91,"title":{},"body":{"classes/DefinedSetups.html":{},"coverage.html":{}}}],["lib/dump.t",{"_index":678,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/expect",{"_index":141,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/express",{"_index":5,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/expressions.t",{"_index":220,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/expressions.ts:11",{"_index":368,"title":{},"body":{"classes/MethodExpression.html":{}}}],["lib/expressions.ts:18",{"_index":222,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:19",{"_index":223,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:2",{"_index":454,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/expressions.ts:24",{"_index":485,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:25",{"_index":486,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:26",{"_index":487,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:4",{"_index":455,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/format",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/const",{"_index":72,"title":{},"body":{"classes/ConstantFormatter.html":{},"coverage.html":{}}}],["lib/formatters/expect",{"_index":118,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/express",{"_index":187,"title":{},"body":{"classes/ExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/factories.t",{"_index":691,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/get.properti",{"_index":227,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/method",{"_index":369,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/named.method",{"_index":456,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/set.properti",{"_index":488,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/track",{"_index":568,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/verifi",{"_index":612,"title":{},"body":{"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor",{"_index":239,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor.t",{"_index":295,"title":{},"body":{"classes/Interceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/interceptor.ts:13",{"_index":309,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:14",{"_index":308,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:15",{"_index":306,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:21",{"_index":311,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:29",{"_index":313,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:36",{"_index":310,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/mock.t",{"_index":382,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["lib/mock.ts:22",{"_index":445,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:29",{"_index":447,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:32",{"_index":446,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:37",{"_index":452,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:44",{"_index":453,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:51",{"_index":449,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:55",{"_index":450,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:65",{"_index":451,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:75",{"_index":448,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:81",{"_index":386,"title":{},"body":{"classes/Mock.html":{}}}],["lib/play",{"_index":464,"title":{},"body":{"classes/PlayTimes.html":{},"coverage.html":{}}}],["lib/sequ",{"_index":478,"title":{},"body":{"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lib/setup.t",{"_index":495,"title":{},"body":{"classes/Setup.html":{},"coverage.html":{}}}],["lib/setup.ts:12",{"_index":506,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:16",{"_index":514,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:21",{"_index":517,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:28",{"_index":503,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:39",{"_index":509,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:44",{"_index":512,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:5",{"_index":501,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:6",{"_index":500,"title":{},"body":{"classes/Setup.html":{}}}],["lib/times.t",{"_index":524,"title":{},"body":{"classes/Times.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["lib/times.ts:10",{"_index":536,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:13",{"_index":542,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:17",{"_index":544,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:21",{"_index":545,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:25",{"_index":547,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:29",{"_index":548,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:33",{"_index":552,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:40",{"_index":555,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:44",{"_index":556,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:48",{"_index":557,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:52",{"_index":559,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:7",{"_index":541,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:8",{"_index":540,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:9",{"_index":539,"title":{},"body":{"classes/Times.html":{}}}],["lib/tracker.t",{"_index":576,"title":{},"body":{"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lib/tracker.ts:13",{"_index":582,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:18",{"_index":583,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:7",{"_index":579,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/verifier.t",{"_index":590,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/verifier.ts:17",{"_index":593,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:26",{"_index":595,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:7",{"_index":611,"title":{},"body":{"classes/VerifyError.html":{}}}],["librari",{"_index":726,"title":{},"body":{"index.html":{}}}],["link",{"_index":522,"title":{},"body":{"classes/Setup.html":{}}}],["liter",{"_index":858,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["log",{"_index":577,"title":{},"body":{"classes/Tracker.html":{}}}],["logic",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["loos",{"_index":256,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["loosestrategi",{"_index":265,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["magic",{"_index":743,"title":{},"body":{"index.html":{}}}],["make",{"_index":666,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["match",{"_index":11,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matched(left",{"_index":22,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher",{"_index":33,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.t",{"_index":7,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["matcher.ts:12",{"_index":377,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:15",{"_index":214,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:24",{"_index":215,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:4",{"_index":16,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matcher.ts:5",{"_index":88,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matcher.ts:6",{"_index":376,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:7",{"_index":231,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matcher.ts:9",{"_index":24,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/argu",{"_index":6,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"coverage.html":{}}}],["matchers/const",{"_index":87,"title":{},"body":{"classes/ConstantMatcher.html":{},"coverage.html":{}}}],["matchers/express",{"_index":61,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/factori",{"_index":63,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["matchers/factories.t",{"_index":684,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matchers/get.properti",{"_index":230,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/method",{"_index":374,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/named.method",{"_index":461,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/set.properti",{"_index":491,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["messag",{"_index":529,"title":{},"body":{"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["method",{"_index":9,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["method(1",{"_index":818,"title":{},"body":{"index.html":{}}}],["method(arg1",{"_index":821,"title":{},"body":{"index.html":{}}}],["method.property.integrationtests.t",{"_index":807,"title":{},"body":{"index.html":{}}}],["methodexpress",{"_index":179,"title":{"classes/MethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["methodexpression(arg",{"_index":332,"title":{},"body":{"classes/Interceptor.html":{}}}],["methodexpression:11",{"_index":182,"title":{},"body":{"classes/ExpectedMethodExpression.html":{}}}],["methodexpressionformatt",{"_index":193,"title":{"classes/MethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"coverage.html":{}}}],["methodexpressionmatch",{"_index":212,"title":{"classes/MethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"coverage.html":{}}}],["methodformatt",{"_index":192,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["methodformatterfactori",{"_index":692,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["methodmatcherfactori",{"_index":686,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["methodnam",{"_index":281,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["minimalist",{"_index":748,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":705,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["miss",{"_index":432,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["missed\"));access",{"_index":844,"title":{},"body":{"index.html":{}}}],["mock",{"_index":381,"title":{"classes/Mock.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mock(mocknam",{"_index":766,"title":{},"body":{"index.html":{}}}],["mock.object",{"_index":787,"title":{},"body":{"index.html":{}}}],["mock.setup(inst",{"_index":841,"title":{},"body":{"index.html":{}}}],["mock.verify(inst",{"_index":789,"title":{},"body":{"index.html":{}}}],["mockbehavior",{"_index":245,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"miscellaneous/enumerations.html":{}}}],["mockbehavior.loos",{"_index":276,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["mockbehavior.strict",{"_index":274,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["mockcor",{"_index":383,"title":{"classes/MockCore.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["mockcore:22",{"_index":387,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:29",{"_index":389,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:32",{"_index":388,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:37",{"_index":401,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:44",{"_index":405,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:51",{"_index":395,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:55",{"_index":396,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:65",{"_index":398,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:75",{"_index":392,"title":{},"body":{"classes/Mock.html":{}}}],["mockdescript",{"_index":135,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["mocknam",{"_index":125,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["modul",{"_index":852,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moq",{"_index":111,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["moq.t",{"_index":722,"title":{},"body":{"index.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named.method",{"_index":202,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["named.method.integrationtests.t",{"_index":820,"title":{},"body":{"index.html":{}}}],["namedmethodexpress",{"_index":180,"title":{"classes/NamedMethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["namedmethodexpression(nam",{"_index":325,"title":{},"body":{"classes/Interceptor.html":{}}}],["namedmethodexpression:2",{"_index":183,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpression:4",{"_index":184,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpressionformatt",{"_index":195,"title":{"classes/NamedMethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"coverage.html":{}}}],["namedmethodexpressionmatch",{"_index":213,"title":{"classes/NamedMethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["namedmethodformatt",{"_index":194,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["namedmethodformatterfactori",{"_index":693,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["namedmethodmatcherfactori",{"_index":687,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":665,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["never",{"_index":467,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["new",{"_index":69,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":480,"title":{},"body":{"classes/SequenceId.html":{}}}],["now",{"_index":659,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":653,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":307,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["number",{"_index":59,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["number)=>boolean",{"_index":562,"title":{},"body":{"classes/Times.html":{}}}],["number|ani",{"_index":793,"title":{},"body":{"index.html":{}}}],["object",{"_index":77,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["object.getprototypeof",{"_index":663,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["object.method",{"_index":788,"title":{},"body":{"index.html":{}}}],["object.method(1",{"_index":836,"title":{},"body":{"index.html":{}}}],["object.properti",{"_index":805,"title":{},"body":{"index.html":{}}}],["object.setprototypeof",{"_index":664,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["obsolet",{"_index":435,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["onc",{"_index":468,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["oper",{"_index":668,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["option",{"_index":21,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["order",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["origin",{"_index":740,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":510,"title":{},"body":{"classes/Setup.html":{}}}],["out",{"_index":756,"title":{},"body":{"index.html":{}}}],["overview",{"_index":853,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":436,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["paramet",{"_index":17,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":606,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["play",{"_index":475,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Setup.html":{},"changelog.html":{}}}],["play(pred",{"_index":508,"title":{},"body":{"classes/Setup.html":{}}}],["playabl",{"_index":498,"title":{},"body":{"classes/Setup.html":{}}}],["playpred",{"_index":497,"title":{},"body":{"classes/Setup.html":{}}}],["playtim",{"_index":463,"title":{"classes/PlayTimes.html":{}},"body":{"classes/PlayTimes.html":{},"classes/Setup.html":{},"coverage.html":{}}}],["pointer",{"_index":784,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":660,"title":{},"body":{"changelog.html":{}}}],["preced",{"_index":645,"title":{},"body":{"changelog.html":{}}}],["predic",{"_index":31,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"changelog.html":{}}}],["predicates.t",{"_index":285,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{}}}],["predicates.ts:11",{"_index":365,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:15",{"_index":366,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:19",{"_index":367,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:6",{"_index":363,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:7",{"_index":364,"title":{},"body":{"classes/It.html":{}}}],["pretti",{"_index":752,"title":{},"body":{"index.html":{}}}],["print",{"_index":649,"title":{},"body":{"changelog.html":{}}}],["privat",{"_index":94,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["product",{"_index":728,"title":{},"body":{"index.html":{}}}],["project",{"_index":733,"title":{},"body":{"index.html":{}}}],["properti",{"_index":93,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"index.html":{}}}],["property1",{"_index":761,"title":{},"body":{"index.html":{}}}],["property2",{"_index":762,"title":{},"body":{"index.html":{}}}],["property3",{"_index":763,"title":{},"body":{"index.html":{}}}],["property4",{"_index":764,"title":{},"body":{"index.html":{}}}],["property4nam",{"_index":765,"title":{},"body":{"index.html":{}}}],["prototyp",{"_index":259,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"index.html":{}}}],["prototype[methodnam",{"_index":360,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["prototypeof",{"_index":304,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"index.html":{}}}],["prototypeof(prototyp",{"_index":312,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["prototypeof(testobject.prototyp",{"_index":849,"title":{},"body":{"index.html":{}}}],["proxi",{"_index":170,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["proxy(funct",{"_index":169,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["proxy:ani",{"_index":158,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["public",{"_index":10,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["quick",{"_index":739,"title":{},"body":{"index.html":{}}}],["rang",{"_index":551,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["recommend",{"_index":730,"title":{},"body":{"index.html":{}}}],["record",{"_index":585,"title":{},"body":{"classes/Tracker.html":{}}}],["record.express",{"_index":422,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["refactor",{"_index":746,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":145,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflect(express",{"_index":148,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflectedinfo",{"_index":143,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflector",{"_index":406,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["reflector.t",{"_index":142,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reflector.ts:15",{"_index":146,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:17",{"_index":147,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:41",{"_index":150,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":575,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["result.substr(0",{"_index":574,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["return",{"_index":26,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["returns('cal",{"_index":810,"title":{},"body":{"index.html":{}}}],["returns(()=>{console.log('th",{"_index":786,"title":{},"body":{"index.html":{}}}],["returns(1",{"_index":769,"title":{},"body":{"index.html":{}}}],["returns(100",{"_index":771,"title":{},"body":{"index.html":{}}}],["returns(fals",{"_index":777,"title":{},"body":{"index.html":{}}}],["returns(new",{"_index":826,"title":{},"body":{"index.html":{}}}],["returns(tru",{"_index":798,"title":{},"body":{"index.html":{}}}],["returns(valu",{"_index":513,"title":{},"body":{"classes/Setup.html":{}}}],["right",{"_index":23,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["right.length",{"_index":39,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["right[index",{"_index":44,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["rightexpress",{"_index":233,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.argu",{"_index":380,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["rightexpression.nam",{"_index":235,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.valu",{"_index":494,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["rvalu",{"_index":43,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["save",{"_index":737,"title":{},"body":{"index.html":{}}}],["separ",{"_index":731,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":393,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/PlayTimes.html":{},"classes/Tracker.html":{}}}],["sequence(sequ",{"_index":473,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequence.add(thi",{"_index":439,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["sequence[index",{"_index":476,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequenceid",{"_index":477,"title":{"classes/SequenceId.html":{}},"body":{"classes/SequenceId.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sequenceidfactori",{"_index":484,"title":{},"body":{"classes/SequenceId.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":164,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"index.html":{}}}],["set.properti",{"_index":201,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["set.property.integrationtests.t",{"_index":792,"title":{},"body":{"index.html":{}}}],["set/read",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["setbehaviorstrategi",{"_index":243,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setbehaviorstrategy(behavior",{"_index":244,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["setbehaviorstrategy(behaviorstrategi",{"_index":397,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setpropertyexpress",{"_index":178,"title":{"classes/SetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["setpropertyexpression(nam",{"_index":328,"title":{},"body":{"classes/Interceptor.html":{}}}],["setpropertyexpression:25",{"_index":185,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpression:26",{"_index":186,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpressionformatt",{"_index":191,"title":{"classes/SetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["setpropertyexpressionmatch",{"_index":211,"title":{"classes/SetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["setpropertyformatt",{"_index":190,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["setpropertyformatterfactori",{"_index":694,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setpropertymatcherfactori",{"_index":688,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setprototypeof",{"_index":334,"title":{},"body":{"classes/Interceptor.html":{}}}],["setup",{"_index":95,"title":{"classes/Setup.html":{}},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["setup%3f",{"_index":434,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setup(express",{"_index":400,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setup(inst",{"_index":767,"title":{},"body":{"index.html":{}}}],["setup(mock",{"_index":443,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setup.invok",{"_index":351,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke((expression).argu",{"_index":349,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke([(expression).valu",{"_index":350,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup?\"](https://github.com/dvabuzyarov/moq.ts/wiki/how",{"_index":433,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setupfactori",{"_index":413,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setups.t",{"_index":92,"title":{},"body":{"classes/DefinedSetups.html":{},"coverage.html":{}}}],["setups.ts:13",{"_index":103,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:17",{"_index":107,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:26",{"_index":109,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:7",{"_index":98,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["signatur",{"_index":237,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["simpl",{"_index":741,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["spi",{"_index":846,"title":{},"body":{"index.html":{}}}],["start",{"_index":625,"title":{"changelog.html":{},"index.html":{}},"body":{"index.html":{}}}],["statement",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":286,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["still",{"_index":749,"title":{},"body":{"index.html":{}}}],["strict",{"_index":255,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["strictstrategi",{"_index":263,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["string",{"_index":78,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["string.t",{"_index":690,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["strongli",{"_index":742,"title":{},"body":{"index.html":{}}}],["super",{"_index":441,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["super(messag",{"_index":602,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["support",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":58,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["tabl",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":159,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["templat",{"_index":721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test",{"_index":361,"title":{},"body":{"classes/It.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"index.html":{}}}],["test(callcount",{"_index":558,"title":{},"body":{"classes/Times.html":{}}}],["test(expect",{"_index":594,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["test(inst",{"_index":290,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["testobject",{"_index":848,"title":{},"body":{"index.html":{}}}],["tests.integr",{"_index":757,"title":{},"body":{"index.html":{}}}],["texcept",{"_index":516,"title":{},"body":{"classes/Setup.html":{}}}],["therefor",{"_index":744,"title":{},"body":{"index.html":{}}}],["this._prototyp",{"_index":316,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._proxi",{"_index":317,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values.hasownproperty(nam",{"_index":322,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values[nam",{"_index":323,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.act",{"_index":519,"title":{},"body":{"classes/Setup.html":{}}}],["this.action(arg",{"_index":518,"title":{},"body":{"classes/Setup.html":{}}}],["this.activestrategi",{"_index":270,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.hasnamedmethod(methodnam",{"_index":273,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.intercepted(express",{"_index":272,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.invoke(express",{"_index":271,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.argu",{"_index":225,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["this.argumentsmatcher.matched(left.argu",{"_index":379,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["this.callcounter.count(express",{"_index":605,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.constantformatter.format(express",{"_index":208,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.argu",{"_index":373,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.valu",{"_index":489,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["this.constantmatcher.matched(left.valu",{"_index":493,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["this.constantmatcher.matched(lvalu",{"_index":45,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["this.createobject",{"_index":318,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.definedsetups.add(expectedexpress",{"_index":419,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.definedsetups.get(express",{"_index":348,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.definedsetups.get(getpropertyexpress",{"_index":353,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["this.definedsetups.hasnamedmethod(methodnam",{"_index":359,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.evaluator(callcount",{"_index":566,"title":{},"body":{"classes/Times.html":{}}}],["this.expectedexpressionformatter.format(expect",{"_index":618,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.expressionformatter.format(expect",{"_index":134,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["this.expressionformatter.format(expression)}\\n",{"_index":573,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["this.expressionmatcher.matched(express",{"_index":65,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["this.expressionproxi",{"_index":171,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.expressionreflector.reflect(express",{"_index":418,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.getpropertyexpressionmatcher.matched(left",{"_index":216,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.getpropertyformatter.format(express",{"_index":204,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.interceptedcallbacks.setbehaviorstrategy(behaviorstrategi",{"_index":437,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor",{"_index":415,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor.object",{"_index":425,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor.prototypeof(prototyp",{"_index":426,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptorcallbacks.hasnamedmethod(nam",{"_index":321,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(express",{"_index":329,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(getpropertyexpress",{"_index":320,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(namedmethodexpress",{"_index":326,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.invoke(express",{"_index":331,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.invoke(getpropertyexpress",{"_index":324,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.invoke(namedmethodexpress",{"_index":327,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.log",{"_index":588,"title":{},"body":{"classes/Tracker.html":{}}}],["this.log.push(record",{"_index":587,"title":{},"body":{"classes/Tracker.html":{}}}],["this.loosestrategi",{"_index":277,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.methodexpressionmatcher.matched(left",{"_index":218,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.methodformatter.format(express",{"_index":206,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.mock",{"_index":520,"title":{},"body":{"classes/Setup.html":{}}}],["this.nam",{"_index":424,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.namedmethodexpressionmatcher.matched(left",{"_index":219,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.namedmethodformatter.format(express",{"_index":207,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.playpred",{"_index":523,"title":{},"body":{"classes/Setup.html":{}}}],["this.predicate(inst",{"_index":292,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["this.reflectedinfo",{"_index":160,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.reflector.reflect(expect",{"_index":604,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.sequenceid.next",{"_index":586,"title":{},"body":{"classes/Tracker.html":{}}}],["this.setpropertyexpressionmatcher.matched(left",{"_index":217,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.setpropertyformatter.format(express",{"_index":205,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.setup",{"_index":113,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.setupfactory(thi",{"_index":417,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.setups.unshift([key",{"_index":112,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.strictstrategi",{"_index":275,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.trackedexpressionsformatter.format(trackedexpress",{"_index":620,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.tracker.add(express",{"_index":347,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.tracker.get().map(record",{"_index":421,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.valu",{"_index":483,"title":{},"body":{"classes/SequenceId.html":{}}}],["this.verifier.test(express",{"_index":423,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.verifyformatter.format(express",{"_index":608,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["thisarg",{"_index":167,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["throw",{"_index":430,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["throws(except",{"_index":515,"title":{},"body":{"classes/Setup.html":{}}}],["throws(new",{"_index":780,"title":{},"body":{"index.html":{}}}],["time",{"_index":404,"title":{"classes/Times.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"index.html":{}}}],["time(",{"_index":139,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Times.html":{}}}],["times(expect",{"_index":538,"title":{},"body":{"classes/Times.html":{}}}],["times._atleastonc",{"_index":563,"title":{},"body":{"classes/Times.html":{}}}],["times._nev",{"_index":564,"title":{},"body":{"classes/Times.html":{}}}],["times._onc",{"_index":565,"title":{},"body":{"classes/Times.html":{}}}],["times.exactly(1",{"_index":819,"title":{},"body":{"index.html":{}}}],["times.messag",{"_index":609,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.never());mock",{"_index":790,"title":{},"body":{"index.html":{}}}],["times.onc",{"_index":420,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"index.html":{}}}],["times.once());mock",{"_index":806,"title":{},"body":{"index.html":{}}}],["times.t",{"_index":465,"title":{},"body":{"classes/PlayTimes.html":{},"coverage.html":{}}}],["times.test(callcount",{"_index":607,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.ts:12",{"_index":471,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:16",{"_index":472,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:25",{"_index":474,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:3",{"_index":470,"title":{},"body":{"classes/PlayTimes.html":{}}}],["timesmessag",{"_index":123,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["timesmessage.tolowercas",{"_index":137,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["track",{"_index":615,"title":{},"body":{"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["trackedact",{"_index":580,"title":{},"body":{"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["trackedexpress",{"_index":570,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatt",{"_index":567,"title":{"classes/TrackedExpressionsFormatter.html":{}},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["trackedexpressionsformatter(expressionformatterfactori",{"_index":572,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["trackedexpressionsformatterfactori",{"_index":571,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["trackedexpressionsmessag",{"_index":619,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["tracker",{"_index":248,"title":{"classes/Tracker.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tracker(sequenceidfactori",{"_index":589,"title":{},"body":{"classes/Tracker.html":{}}}],["trackerfactori",{"_index":408,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tresult",{"_index":507,"title":{},"body":{"classes/Setup.html":{}}}],["tri",{"_index":291,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["true",{"_index":37,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"index.html":{}}}],["truesponsor",{"_index":850,"title":{},"body":{"index.html":{}}}],["tvalu",{"_index":504,"title":{},"body":{"classes/Setup.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealias",{"_index":855,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":82,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["typescript",{"_index":723,"title":{},"body":{"index.html":{}}}],["unam",{"_index":236,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["undefin",{"_index":115,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"miscellaneous/functions.html":{}}}],["unset",{"_index":845,"title":{},"body":{"index.html":{}}}],["updat",{"_index":629,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":297,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"changelog.html":{},"index.html":{}}}],["usag",{"_index":753,"title":{},"body":{"index.html":{}}}],["v2.1.0",{"_index":669,"title":{},"body":{"changelog.html":{}}}],["v2.3.0",{"_index":658,"title":{},"body":{"changelog.html":{}}}],["v2.3.1",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["v2.4.0",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["v2.5.0",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["v2.5.1",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["v2.6.0",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["v2.6.1",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["v2.6.2",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["v2.7.0",{"_index":627,"title":{},"body":{"changelog.html":{}}}],["valu",{"_index":100,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value.play",{"_index":114,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["values[0",{"_index":825,"title":{},"body":{"index.html":{}}}],["values[1",{"_index":829,"title":{},"body":{"index.html":{}}}],["values[2",{"_index":834,"title":{},"body":{"index.html":{}}}],["var",{"_index":157,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["variabl",{"_index":683,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["verifi",{"_index":385,"title":{"classes/Verifier.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["verifier(new",{"_index":603,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifierfactori",{"_index":409,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["verify(express",{"_index":403,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["verifyerror",{"_index":599,"title":{"classes/VerifyError.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["verifyerror(messag",{"_index":610,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyformatt",{"_index":592,"title":{"classes/VerifyFormatter.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["verifyformatter(expectedexpressionformatterfactori",{"_index":616,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["verifyformatterfactori",{"_index":597,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":105,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["without",{"_index":839,"title":{},"body":{"index.html":{}}}],["work",{"_index":667,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["write",{"_index":774,"title":{},"body":{"index.html":{}}}],["written",{"_index":804,"title":{},"body":{"index.html":{}}}],["ye",{"_index":127,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ArgumentsMatcher.html":{"url":"classes/ArgumentsMatcher.html","title":"class - ArgumentsMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArgumentsMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/arguments-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/arguments-matcher.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any[], right: (any | It)[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/arguments-matcher.ts:9\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    (any | It)[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: any[], right: (any|It)[]): boolean{\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        let matched = true;\n        left.forEach((lvalue, index) =>{\n            const rvalue = right[index];\n            matched = this.constantMatcher.matched(lvalue, rvalue) === true ? matched : false;\n        });\n\n        return matched;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallCounter.html":{"url":"classes/CallCounter.html","title":"class - CallCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CallCounter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/call-counter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                count\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/call-counter.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        count(expected: ExpectedExpressions, expressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/call-counter.ts:12\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from './expected-expressions/expected-expressions';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\n\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count(expected: ExpectedExpressions, expressions: Expressions[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true)\n                count += 1;\n        }\n\n        return count;\n    }\n}\n\nexport function callCounterFactory(): CallCounter {\n    return new CallCounter(expressionMatcherFactory());\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantFormatter.html":{"url":"classes/ConstantFormatter.html","title":"class - ConstantFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/constant-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(object: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/constant-formatter.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantFormatter {\n\n    public format(object: any|It): string {\n        if (object instanceof It) return `It.Is(${(object as It).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const index in object)\n                description.push(new ConstantFormatter().format(object[index]));\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantMatcher.html":{"url":"classes/ConstantMatcher.html","title":"class - ConstantMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/constant-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any, right: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/constant-matcher.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantMatcher {\n\n    public matched(left: any, right: any|It): boolean {\n        if (right instanceof It)\n            return (right as It).test(left);\n        return left === right;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefinedSetups.html":{"url":"classes/DefinedSetups.html","title":"class - DefinedSetups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefinedSetups\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/defined-setups.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                setups\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/defined-setups.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            setups\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setups:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/defined-setups.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(key: ExpectedExpressions, setup: ISetupInvoke)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        setup\n                                                        \n                                                                    ISetupInvoke\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetupInvoke\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExpectedExpressions, ExpectedNamedMethodExpression } from \"./expected-expressions/expected-expressions\";\nimport { ExpressionMatcher } from \"./expression-matchers/expression-matcher\";\nimport { Expressions } from \"./expressions\";\nimport { ISetupInvoke } from \"./moq\";\n\nexport class DefinedSetups {\n    private setups: [ExpectedExpressions, ISetupInvoke][] = [];\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public add(key: ExpectedExpressions, setup: ISetupInvoke): void {\n        this.setups.unshift([key, setup]);\n    }\n\n    public get(expression: Expressions): ISetupInvoke {\n        for (const [key, value] of this.setups) {\n            if (this.expressionMatcher.matched(expression, key) === true && value.playable())\n                return value;\n        }\n\n        return undefined;\n    }\n\n    public hasNamedMethod(name: string): boolean {\n        for (const [key] of this.setups) {\n            if (key instanceof ExpectedNamedMethodExpression && (key as ExpectedNamedMethodExpression).name === name)\n                return true;\n        }\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionFormatter.html":{"url":"classes/ExpectedExpressionFormatter.html","title":"class - ExpectedExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expected-expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expected-expression-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expected-expression-formatter.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\n\nexport function expectedExpressionFormatterFactory (): ExpectedExpressionFormatter {\n    return new ExpectedExpressionFormatter(expressionFormatterFactory());\n}\n\nexport class ExpectedExpressionFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\n        const expressionDescription = this.expressionFormatter.format(expected);\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : '';\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionReflector.html":{"url":"classes/ExpectedExpressionReflector.html","title":"class - ExpectedExpressionReflector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionReflector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                reflectedInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                expressionProxy\n                            \n                            \n                                    Public\n                                reflect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reflectedInfo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reflectedInfo:     \n\n                    \n                \n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            expressionProxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        expressionProxy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reflect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reflect(expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:41\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ExpectedExpressions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedGetPropertyExpression.html":{"url":"classes/ExpectedGetPropertyExpression.html","title":"class - ExpectedGetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedGetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     GetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in GetPropertyExpression:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMethodExpression.html":{"url":"classes/ExpectedMethodExpression.html","title":"class - ExpectedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in MethodExpression:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNamedMethodExpression.html":{"url":"classes/ExpectedNamedMethodExpression.html","title":"class - ExpectedNamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNamedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NamedMethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedSetPropertyExpression.html":{"url":"classes/ExpectedSetPropertyExpression.html","title":"class - ExpectedSetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedSetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionFormatter.html":{"url":"classes/ExpressionFormatter.html","title":"class - ExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyFormatter: GetPropertyExpressionFormatter, setPropertyFormatter: SetPropertyExpressionFormatter, methodFormatter: MethodExpressionFormatter, namedMethodFormatter: NamedMethodExpressionFormatter, constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expression-formatter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getPropertyFormatter\n                                                  \n                                                        \n                                                                    GetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setPropertyFormatter\n                                                  \n                                                        \n                                                                    SetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        methodFormatter\n                                                  \n                                                        \n                                                                    MethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namedMethodFormatter\n                                                  \n                                                        \n                                                                    NamedMethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: Expressions | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expression-formatter.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, SetPropertyExpression, NamedMethodExpression,\n    MethodExpression\n} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {GetPropertyExpressionFormatter} from './get.property-formatter';\nimport {SetPropertyExpressionFormatter} from './set.property-formatter';\nimport {MethodExpressionFormatter} from './method-formatter';\nimport {NamedMethodExpressionFormatter} from './named.method-formatter';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: Expressions|It): string {\n        if (expression instanceof GetPropertyExpression) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyExpression) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof MethodExpression) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodExpression) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionMatcher.html":{"url":"classes/ExpressionMatcher.html","title":"class - ExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/expression-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyExpressionMatcher: GetPropertyExpressionMatcher, setPropertyExpressionMatcher: SetPropertyExpressionMatcher, methodExpressionMatcher: MethodExpressionMatcher, namedMethodExpressionMatcher: NamedMethodExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/expression-matcher.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    GetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    SetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        methodExpressionMatcher\n                                                  \n                                                        \n                                                                    MethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namedMethodExpressionMatcher\n                                                  \n                                                        \n                                                                    NamedMethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: Expressions, right: ExpectedExpressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/expression-matcher.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpressionMatcher} from './get.property-matcher';\nimport {SetPropertyExpressionMatcher} from './set.property-matcher';\nimport {MethodExpressionMatcher} from './method-matcher';\nimport {NamedMethodExpressionMatcher} from './named.method-matcher';\nimport {\n    Expressions, GetPropertyExpression, SetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from '../expressions';\nimport {\n    ExpectedExpressions, ExpectedGetPropertyExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression\n} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher) {\n\n    }\n\n    public matched(left: Expressions, right: ExpectedExpressions): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyExpression && (right instanceof ExpectedGetPropertyExpression || right instanceof It))\n            return this.getPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof SetPropertyExpression && (right instanceof ExpectedSetPropertyExpression || right instanceof It))\n            return this.setPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof MethodExpression && (right instanceof ExpectedMethodExpression || right instanceof It))\n            return this.methodExpressionMatcher.matched(left, >right);\n        if (left instanceof NamedMethodExpression && (right instanceof ExpectedNamedMethodExpression || right instanceof It))\n            return this.namedMethodExpressionMatcher.matched(left, >right);\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpression.html":{"url":"classes/GetPropertyExpression.html","title":"class - GetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionFormatter.html":{"url":"classes/GetPropertyExpressionFormatter.html","title":"class - GetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/get.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: GetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/get.property-formatter.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\n\nexport class GetPropertyExpressionFormatter{\n\n    public format(expression: GetPropertyExpression): string{\n        return `Getter of \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionMatcher.html":{"url":"classes/GetPropertyExpressionMatcher.html","title":"class - GetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/get.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/get.property-matcher.ts:7\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedGetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ExpectedGetPropertyExpression} from '../expected-expressions/expected-expressions';\n\nexport class GetPropertyExpressionMatcher{\n\n    public matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpectedExpression.html":{"url":"interfaces/IExpectedExpression.html","title":"interface - IExpectedExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpectedExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void | any | It\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacks.html":{"url":"interfaces/IInterceptorCallbacks.html","title":"interface - IInterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n            \n                Extends\n            \n            \n                    IInterceptorCallbacksStrategy\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setBehaviorStrategy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport { Expressions } from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { InterceptorCallbacksLooseStrategy } from \"./interceptor-callbacks.loose.strategy\";\nimport { InterceptorCallbacksStrictStrategy } from \"./interceptor-callbacks.strict.strategy\";\n\nexport enum MockBehavior {\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): void;\n\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n\n    invoke(expression: Expressions): any;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public invoke(expression: Expressions): any {\n        return this.activeStrategy.invoke(expression);\n    }\n\n    public intercepted(expression: Expressions): void {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacksStrategy.html":{"url":"interfaces/IInterceptorCallbacksStrategy.html","title":"interface - IInterceptorCallbacksStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacksStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasNamedMethod\n                                \n                                \n                                    intercepted\n                                \n                                \n                                    invoke\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \ninvoke(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport { Expressions } from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { InterceptorCallbacksLooseStrategy } from \"./interceptor-callbacks.loose.strategy\";\nimport { InterceptorCallbacksStrictStrategy } from \"./interceptor-callbacks.strict.strategy\";\n\nexport enum MockBehavior {\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): void;\n\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n\n    invoke(expression: Expressions): any;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public invoke(expression: Expressions): any {\n        return this.activeStrategy.invoke(expression);\n    }\n\n    public intercepted(expression: Expressions): void {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPredicate.html":{"url":"interfaces/IPredicate.html","title":"interface - IPredicate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPredicate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     boolean\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptor.html":{"url":"classes/Interceptor.html","title":"class - Interceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor.ts\n        \n\n            \n                Description\n            \n            \n                This class is not intended to be used directly\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _prototype\n                            \n                            \n                                    Private\n                                _proxy\n                            \n                            \n                                    Private\n                                _values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createObject\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(interceptorCallbacks: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        interceptorCallbacks\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _prototype\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _prototype:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _proxy:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _values:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createObject\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createObject()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetPropertyExpression, MethodExpression, NamedMethodExpression, SetPropertyExpression } from \"./expressions\";\nimport { IInterceptorCallbacksStrategy } from \"./interceptor-callbacks/interceptor-callbacks\";\n\ndeclare var Proxy: any;\n\n/**\n * This class is not intended to be used directly\n * @private\n * @internal\n */\nexport class Interceptor {\n\n    private _proxy: T;\n    private _prototype: any = null;\n    private _values = {};\n\n    constructor(private interceptorCallbacks: IInterceptorCallbacksStrategy) {\n        this._prototype = Function;\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    public prototypeof(prototype?: any): any {\n        if (prototype !== undefined)\n            this._prototype = prototype;\n\n        return this._prototype;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => {\n                const getPropertyExpression = new GetPropertyExpression(name);\n                this.interceptorCallbacks.intercepted(getPropertyExpression);\n\n                if (this.interceptorCallbacks.hasNamedMethod(name, this._prototype) === false) {\n\n                    if (this._values.hasOwnProperty(name) === true)\n                        return this._values[name];\n\n                    return this.interceptorCallbacks.invoke(getPropertyExpression);\n                }\n\n                return (...args) => {\n                    const namedMethodExpression = new NamedMethodExpression(name, args);\n                    this.interceptorCallbacks.intercepted(namedMethodExpression);\n                    return this.interceptorCallbacks.invoke(namedMethodExpression);\n                }\n            },\n\n            set: (target, name, value) => {\n                const expression = new SetPropertyExpression(name, value);\n                this.interceptorCallbacks.intercepted(expression);\n                const accepted = this.interceptorCallbacks.invoke(expression);\n                if (accepted === true || accepted === undefined) {\n                    this._values[name] = value;\n                }\n\n                return accepted === undefined ? true : accepted;\n            },\n\n            apply: (target, thisArg, args) => {\n                const expression = new MethodExpression(args);\n                this.interceptorCallbacks.intercepted(expression);\n                return this.interceptorCallbacks.invoke(expression);\n            },\n\n            getPrototypeOf: (target) => this._prototype,\n            setPrototypeOf: (target, prototype) => {\n                if (prototype !== undefined) {\n                    this._prototype = prototype;\n                    return true;\n                }\n                return false;\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacks.html":{"url":"classes/InterceptorCallbacks.html","title":"class - InterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacks\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeStrategy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                invoke\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(strictStrategy: IInterceptorCallbacksStrategy, looseStrategy: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        strictStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        looseStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeStrategy:     IInterceptorCallbacksStrategy\n\n                    \n                \n                    \n                        \n                            Type :     IInterceptorCallbacksStrategy\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:32\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport { Expressions } from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { InterceptorCallbacksLooseStrategy } from \"./interceptor-callbacks.loose.strategy\";\nimport { InterceptorCallbacksStrictStrategy } from \"./interceptor-callbacks.strict.strategy\";\n\nexport enum MockBehavior {\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): void;\n\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n\n    invoke(expression: Expressions): any;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public invoke(expression: Expressions): any {\n        return this.activeStrategy.invoke(expression);\n    }\n\n    public intercepted(expression: Expressions): void {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksLooseStrategy.html":{"url":"classes/InterceptorCallbacksLooseStrategy.html","title":"class - InterceptorCallbacksLooseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksLooseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                invoke\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport {\n    Expressions,\n    GetPropertyExpression,\n    MethodExpression,\n    NamedMethodExpression,\n    SetPropertyExpression\n} from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { IInterceptorCallbacksStrategy } from \"./interceptor-callbacks\";\n\nexport class InterceptorCallbacksLooseStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): void {\n        this.tracker.add(expression);\n    }\n\n    public invoke(expression: Expressions): any {\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const getPropertyExpression = new GetPropertyExpression(methodName);\n        const setup = this.definedSetups.get(getPropertyExpression);\n        return setup !== undefined ? false : true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksStrictStrategy.html":{"url":"classes/InterceptorCallbacksStrictStrategy.html","title":"class - InterceptorCallbacksStrictStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksStrictStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                invoke\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport { Expressions, MethodExpression, NamedMethodExpression, SetPropertyExpression } from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { IInterceptorCallbacksStrategy } from \"./interceptor-callbacks\";\n\nexport class InterceptorCallbacksStrictStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): void {\n        this.tracker.add(expression);\n    }\n\n    public invoke(expression: Expressions): any {\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const hasNamedMethod = this.definedSetups.hasNamedMethod(methodName);\n        if (hasNamedMethod === true) return true;\n\n        if (prototype !== null && prototype[methodName] instanceof Function)\n            return true;\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/It.html":{"url":"classes/It.html","title":"class - It","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  It\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                predicate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Is\n                            \n                            \n                                    Static\n                                IsAny\n                            \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(predicate: IPredicate)\n                    \n                \n                        \n                            \n                                Defined in lib/expected-expressions/expression-predicates.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                  \n                                                        \n                                                                    IPredicate\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            predicate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        predicate:     IPredicate\n\n                    \n                \n                    \n                        \n                            Type :     IPredicate\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Is\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Is(predicate: IPredicate)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:11\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                        \n                                                                    IPredicate\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     It | any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            IsAny\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        IsAny()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:15\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     It | any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(instance: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        instance\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpression.html":{"url":"classes/MethodExpression.html","title":"class - MethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionFormatter.html":{"url":"classes/MethodExpressionFormatter.html","title":"class - MethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: MethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/method-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {MethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class MethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: MethodExpression): string{\n        const value = this.constantFormatter.format(expression.arguments);\n        return `(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionMatcher.html":{"url":"classes/MethodExpressionMatcher.html","title":"class - MethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: MethodExpression, right: ExpectedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/method-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {MethodExpression} from '../expressions';\nimport {ExpectedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class MethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: MethodExpression, right: ExpectedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mock.html":{"url":"classes/Mock.html","title":"class - Mock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MockCore\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                interceptor\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                tracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                insequence\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                            \n                                    Public\n                                setup\n                            \n                            \n                                    Public\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/mock.ts:81\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interceptor:     Interceptor\n\n                    \n                \n                    \n                        \n                            Type :     Interceptor\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tracker\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tracker:     Tracker\n\n                    \n                \n                    \n                        \n                            Type :     Tracker\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            insequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        insequence(sequence: ISequenceVerifier, expression: IExpectedExpression)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:75\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    ISequenceVerifier\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behaviorStrategy: MockBehavior)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behaviorStrategy\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setup(expression: IExpectedExpression)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            verify\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        verify(expression: IExpectedExpression, times?: Times)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"./defined-setups\";\nimport { ExpectedExpressionReflector, IExpectedExpression } from \"./expected-expressions/expected-expression-reflector\";\nimport { expressionMatcherFactory } from \"./expression-matchers/factories\";\nimport { Interceptor } from \"./interceptor\";\nimport {\n    IInterceptorCallbacks,\n    interceptorCallbacksFactory,\n    MockBehavior\n} from \"./interceptor-callbacks/interceptor-callbacks\";\nimport { IMock, ISequenceVerifier, ISetup, ISetupInvoke } from \"./moq\";\nimport { Setup } from \"./setup\";\nimport { Times } from \"./times\";\nimport { Tracker, trackerFactory } from \"./tracker\";\nimport { Verifier, verifierFactory } from \"./verifier\";\n\n/**\n * @internal\n * @hidden\n * @private\n */\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n\n    constructor(\n        private expressionReflector: ExpectedExpressionReflector,\n        private interceptorFactory: (callbacks: IInterceptorCallbacks) => Interceptor,\n        private setupFactory: (mock: IMock) => ISetupInvoke,\n        private definedSetups: DefinedSetups,\n        public tracker: Tracker,\n        private verifier: Verifier,\n        private interceptedCallbacks: IInterceptorCallbacks,\n        public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): IMock {\n        times = times === undefined ? Times.Once() : times;\n        const expressions = this.tracker.get().map(record => record.expression);\n        this.verifier.test(expression, times, expressions, this.name);\n        return this;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    /**\n     * @deprecated use custom setup as described [\"How to throw an exception on missed setup?\"](https://github.com/dvabuzyarov/moq.ts/wiki/How-to-throw-an-exception-on-missed-setup%3F).\n     * @obsolete\n     * @param behaviorStrategy\n     */\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n\n    /**\n     * @experimental\n     * @param sequence\n     * @param expression\n     */\n    public insequence(sequence: ISequenceVerifier, expression: IExpectedExpression): IMock{\n        sequence.add(this, expression);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = trackerFactory();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockCore.html":{"url":"classes/MockCore.html","title":"class - MockCore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockCore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IMock\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                interceptor\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                tracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                insequence\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                            \n                                    Public\n                                setup\n                            \n                            \n                                    Public\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionReflector: ExpectedExpressionReflector, interceptorFactory: (callbacks: IInterceptorCallbacks) => void, setupFactory: (mock: IMock) => void, definedSetups: DefinedSetups, tracker: Tracker, verifier: Verifier, interceptedCallbacks: IInterceptorCallbacks, name?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/mock.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionReflector\n                                                  \n                                                        \n                                                                    ExpectedExpressionReflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interceptorFactory\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setupFactory\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        verifier\n                                                  \n                                                        \n                                                                    Verifier\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interceptedCallbacks\n                                                  \n                                                        \n                                                                    IInterceptorCallbacks\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interceptor:     Interceptor\n\n                    \n                \n                    \n                        \n                            Type :     Interceptor\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tracker\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tracker:     Tracker\n\n                    \n                \n                    \n                        \n                            Type :     Tracker\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            insequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        insequence(sequence: ISequenceVerifier, expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:75\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    ISequenceVerifier\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behaviorStrategy: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behaviorStrategy\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setup(expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            verify\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        verify(expression: IExpectedExpression, times?: Times)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"./defined-setups\";\nimport { ExpectedExpressionReflector, IExpectedExpression } from \"./expected-expressions/expected-expression-reflector\";\nimport { expressionMatcherFactory } from \"./expression-matchers/factories\";\nimport { Interceptor } from \"./interceptor\";\nimport {\n    IInterceptorCallbacks,\n    interceptorCallbacksFactory,\n    MockBehavior\n} from \"./interceptor-callbacks/interceptor-callbacks\";\nimport { IMock, ISequenceVerifier, ISetup, ISetupInvoke } from \"./moq\";\nimport { Setup } from \"./setup\";\nimport { Times } from \"./times\";\nimport { Tracker, trackerFactory } from \"./tracker\";\nimport { Verifier, verifierFactory } from \"./verifier\";\n\n/**\n * @internal\n * @hidden\n * @private\n */\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n\n    constructor(\n        private expressionReflector: ExpectedExpressionReflector,\n        private interceptorFactory: (callbacks: IInterceptorCallbacks) => Interceptor,\n        private setupFactory: (mock: IMock) => ISetupInvoke,\n        private definedSetups: DefinedSetups,\n        public tracker: Tracker,\n        private verifier: Verifier,\n        private interceptedCallbacks: IInterceptorCallbacks,\n        public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): IMock {\n        times = times === undefined ? Times.Once() : times;\n        const expressions = this.tracker.get().map(record => record.expression);\n        this.verifier.test(expression, times, expressions, this.name);\n        return this;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    /**\n     * @deprecated use custom setup as described [\"How to throw an exception on missed setup?\"](https://github.com/dvabuzyarov/moq.ts/wiki/How-to-throw-an-exception-on-missed-setup%3F).\n     * @obsolete\n     * @param behaviorStrategy\n     */\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n\n    /**\n     * @experimental\n     * @param sequence\n     * @param expression\n     */\n    public insequence(sequence: ISequenceVerifier, expression: IExpectedExpression): IMock{\n        sequence.add(this, expression);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = trackerFactory();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpression.html":{"url":"classes/NamedMethodExpression.html","title":"class - NamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionFormatter.html":{"url":"classes/NamedMethodExpressionFormatter.html","title":"class - NamedMethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/named.method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/named.method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: NamedMethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/named.method-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {NamedMethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class NamedMethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: NamedMethodExpression): string{\n        const formatted: string[] = [];\n\n        expression.arguments.forEach(arg=>{\n            formatted.push(this.constantFormatter.format(arg));\n        });\n\n        const value = formatted.join(', ');\n        return `${expression.name}(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionMatcher.html":{"url":"classes/NamedMethodExpressionMatcher.html","title":"class - NamedMethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/named.method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/named.method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/named.method-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedNamedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {NamedMethodExpression} from '../expressions';\nimport {ExpectedNamedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class NamedMethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name)\n            return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlayTimes.html":{"url":"classes/PlayTimes.html","title":"class - PlayTimes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlayTimes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/play-times.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Exactly\n                            \n                            \n                                    Static\n                                Never\n                            \n                            \n                                    Static\n                                Once\n                            \n                            \n                                    Static\n                                Sequence\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Exactly\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Exactly(count: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:3\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Never()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Once()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Sequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Sequence(sequence: boolean[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    boolean[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PlayTimes {\n\n    public static Exactly(count: number): () => boolean {\n        let invoked = 0;\n        return () => {\n            if (invoked >= count) return false;\n            invoked++;\n            return true;\n        };\n    }\n\n    public static Never(): () => boolean {\n        return () => false;\n    }\n\n    public static Once(): () => boolean {\n        let played = false;\n        return () => {\n            if (played) return false;\n            played = true;\n            return true;\n        };\n    }\n\n    public static Sequence(sequence: boolean[]): () => boolean {\n        let index = 0;\n        return () => {\n            const value = sequence[index];\n            index++;\n            return value;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequenceId.html":{"url":"classes/SequenceId.html","title":"class - SequenceId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequenceId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sequence-id.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/sequence-id.ts:2\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            next\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        next()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/sequence-id.ts:4\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class SequenceId {\n    private value: number = 0;\n\n    public next(): number {\n        return this.value++;\n    }\n}\n\nconst instance = new SequenceId();\n\nexport function sequenceIdFactory(): SequenceId {\n    return instance;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpression.html":{"url":"classes/SetPropertyExpression.html","title":"class - SetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionFormatter.html":{"url":"classes/SetPropertyExpressionFormatter.html","title":"class - SetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/set.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/set.property-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/set.property-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {SetPropertyExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class SetPropertyExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: SetPropertyExpression): string{\n        const value = this.constantFormatter.format(expression.value);\n        return `Assignment of ${value} to property \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionMatcher.html":{"url":"classes/SetPropertyExpressionMatcher.html","title":"class - SetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/set.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/set.property-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/set.property-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedSetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedSetPropertyExpression} from '../expected-expressions/expected-expressions';\nimport {SetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class SetPropertyExpressionMatcher{\n\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Setup.html":{"url":"classes/Setup.html","title":"class - Setup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Setup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/setup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ISetupInvoke\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                action\n                            \n                            \n                                    Private\n                                playPredicate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                callback\n                            \n                            \n                                    Public\n                                invoke\n                            \n                            \n                                    Public\n                                play\n                            \n                            \n                                    Public\n                                playable\n                            \n                            \n                                    Public\n                                returns\n                            \n                            \n                                    Public\n                                throws\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mock: IMock)\n                    \n                \n                        \n                            \n                                Defined in lib/setup.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mock\n                                                  \n                                                        \n                                                                    IMock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            action\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        action:     Function\n\n                    \n                \n                    \n                        \n                            Type :     Function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/setup.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            playPredicate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        playPredicate:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/setup.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            callback\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        callback(callback: (args: any[]) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:28\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TValue\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(args?: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:12\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TResult\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            play\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        play(predicate: () => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:39\n                            \n                        \n\n\n                \n                    \n                            Plays the setup when predicate returns true otherwise the setup will be ignored.\nAs predicate PlayTimes could be used.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            playable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        playable()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            returns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        returns(value: TValue)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:16\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TValue\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    TValue\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            throws\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        throws(exception: TException)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:21\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TException\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exception\n                                                        \n                                                                    TException\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { IMock, ISetup, ISetupInvoke } from \"./moq\";\n\nexport class Setup implements ISetupInvoke {\n\n    private action: Function;\n    private playPredicate: () => boolean;\n\n    constructor(private mock: IMock) {\n\n    }\n\n    public invoke(args?: any[]): TResult {\n        return this.action(args);\n    }\n\n    public returns(value: TValue): IMock {\n        this.action = () => value;\n        return this.mock;\n    }\n\n    public throws(exception: TException): IMock {\n        this.action = () => {\n            throw exception;\n        };\n        return this.mock;\n    }\n\n    public callback(callback: (args: any[]) => TValue): IMock {\n        this.action = (args?: any[]) => callback.apply(undefined, args);\n        return this.mock;\n    }\n\n    /**\n     * Plays the setup when predicate returns true otherwise the setup will be ignored.\n     * As predicate {@link PlayTimes} could be used.\n     * @param {() => boolean} predicate\n     * @returns {ISetup}\n     */\n    public play(predicate: () => boolean): ISetup {\n        this.playPredicate = predicate;\n        return this;\n    }\n\n    public playable(): boolean {\n        if (this.playPredicate === undefined) return true;\n        return this.playPredicate();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Times.html":{"url":"classes/Times.html","title":"class - Times","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Times\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/times.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _atLeastOnce\n                            \n                            \n                                    Private\n                                    Static\n                                _atMostOnce\n                            \n                            \n                                    Private\n                                    Static\n                                _never\n                            \n                            \n                                    Private\n                                    Static\n                                _once\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                AtLeast\n                            \n                            \n                                    Static\n                                AtLeastOnce\n                            \n                            \n                                    Static\n                                AtMost\n                            \n                            \n                                    Static\n                                AtMostOnce\n                            \n                            \n                                    Static\n                                Between\n                            \n                            \n                                    Static\n                                Exactly\n                            \n                            \n                                    Static\n                                Never\n                            \n                            \n                                    Static\n                                Once\n                            \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(evaluator: (callCount: number) => void, message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/times.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        evaluator\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _atLeastOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _atLeastOnce:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected >= 1, `Should be called at least once`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _atMostOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _atMostOnce:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected \n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _never:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected === 0, `Should be called never`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _once:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected === 1, `Should be called once`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        message:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtLeast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtLeast(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtLeastOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtLeastOnce()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtMost\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtMost(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtMostOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtMostOnce()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Between\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Between(callCountFrom: number, callCountTo: number, range: Range)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCountFrom\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callCountTo\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        range\n                                                        \n                                                                    Range\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Exactly\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Exactly(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Never()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Once()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export enum Range{\n    Exclusive,\n    Inclusive\n}\n\nexport class Times {\n    private static _once: Times =  new Times(expected => expected === 1, `Should be called once`);\n    private static _never: Times =  new Times(expected => expected === 0, `Should be called never`);\n    private static _atMostOnce: Times =  new Times(expected => expected  expected >= 1, `Should be called at least once`);\n\n    constructor(private evaluator: (callCount: number)=>boolean,\n                public message: string) {\n\n    }\n\n    public static AtLeast(callCount: number): Times {\n        return new Times(expected => expected >= callCount, `Should be called at least ${callCount} time(s)`);\n    }\n\n    public static AtLeastOnce(): Times {\n        return Times._atLeastOnce;\n    }\n\n    public static AtMost(callCount: number): Times {\n        return new Times(expected => expected  expected > callCountFrom && expected  expected >= callCountFrom && expected  expected === callCount, `Should be called exactly ${callCount} time(s)`);\n    }\n\n    public static Never(): Times {\n        return Times._never;\n    }\n\n    public static Once(): Times {\n        return Times._once;\n    }\n\n    public test(callCount: number): boolean {\n        return this.evaluator(callCount);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackedExpressionsFormatter.html":{"url":"classes/TrackedExpressionsFormatter.html","title":"class - TrackedExpressionsFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackedExpressionsFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/tracked-expressions-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/tracked-expressions-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(trackedExpressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/tracked-expressions-formatter.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\nimport {Expressions} from '../expressions';\n\nexport function trackedExpressionsFormatterFactory (): TrackedExpressionsFormatter {\n    return new TrackedExpressionsFormatter(expressionFormatterFactory());\n}\n\nexport class TrackedExpressionsFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expressions[]): string {\n        let result: string = '';\n        for (const expression of trackedExpressions) {\n            result += `${this.expressionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tracker.html":{"url":"classes/Tracker.html","title":"class - Tracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/tracker.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sequenceId: SequenceId)\n                    \n                \n                        \n                            \n                                Defined in lib/tracker.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequenceId\n                                                  \n                                                        \n                                                                    SequenceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            log\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        log:     TrackedAction[]\n\n                    \n                \n                    \n                        \n                            Type :     TrackedAction[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/tracker.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                        \n                                                                    MethodExpression | GetPropertyExpression | SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     TrackedAction[]\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetPropertyExpression, MethodExpression, SetPropertyExpression } from \"./expressions\";\nimport { SequenceId, sequenceIdFactory } from \"./sequence-id\";\n\nexport type TrackedAction = { id: number, expression: MethodExpression | GetPropertyExpression | SetPropertyExpression };\n\nexport class Tracker {\n    private log: TrackedAction[] = [];\n\n    constructor(private sequenceId: SequenceId) {\n\n    }\n\n    public add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression): void {\n        const record = {id: this.sequenceId.next(), expression: action};\n        this.log.push(record);\n    }\n\n    public get(): TrackedAction[] {\n        return this.log;\n    }\n}\n\nexport function trackerFactory(): Tracker {\n    return new Tracker(sequenceIdFactory());\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Verifier.html":{"url":"classes/Verifier.html","title":"class - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Verifier\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: ExpectedExpressionReflector, callCounter: CallCounter, verifyFormatter: VerifyFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    ExpectedExpressionReflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        callCounter\n                                                  \n                                                        \n                                                                    CallCounter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        verifyFormatter\n                                                  \n                                                        \n                                                                    VerifyFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/verifier.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyError.html":{"url":"classes/VerifyError.html","title":"class - VerifyError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyFormatter.html":{"url":"classes/VerifyFormatter.html","title":"class - VerifyFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/verify-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expectedExpressionFormatter: ExpectedExpressionFormatter, trackedExpressionsFormatter: TrackedExpressionsFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/verify-formatter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expectedExpressionFormatter\n                                                  \n                                                        \n                                                                    ExpectedExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        trackedExpressionsFormatter\n                                                  \n                                                        \n                                                                    TrackedExpressionsFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/verify-formatter.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {Expressions} from '../expressions';\nimport {ExpectedExpressionFormatter, expectedExpressionFormatterFactory} from './expected-expression-formatter';\nimport {TrackedExpressionsFormatter, trackedExpressionsFormatterFactory} from './tracked-expressions-formatter';\n\nexport function verifyFormatterFactory(): VerifyFormatter {\n    return new VerifyFormatter(expectedExpressionFormatterFactory(), trackedExpressionsFormatterFactory());\n}\n\nexport class VerifyFormatter {\n\n    constructor(\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string): string {\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\n        const delimiter = '-------------------------------------';\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nv2.7.0\n\nThe internal logic of interceptor has been updated in order to fix the issue (#6)\n\nv2.6.2\n\nDump function that dumps into console.log all interactions with the mocked object has been added\n\nv2.6.1\n\nThe verify methods can be used in fluent call\n\nv2.6.0\n\nThe play setup has been introduced\n\nv2.5.1\n\nThe latest setup has precedence\n\nv2.5.0\n\nIn case of false assertion the dump of the tracked expressions is printed.\n\nv2.4.0\n\nIt.IsAny predicate has been introduced.\n\nv2.3.1\n\nThe NPM package is compiled as es5 code.\n\nv2.3.0\n\nMock prototype has been introduced. Now it is possible to set/read prototype of mock with prototypeof function.\nAlso mock object supports Object.getPrototypeOf and Object.setPrototypeOf functions. You may need it to make work\ninstanceof operator.\n\nv2.1.0\n\nMock behaviours (strict and loose) have been introduced.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/call-counter.ts\n            \n            \n                class\n            \n            \n                CallCounter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/call-counter.ts\n            \n            \n                function\n            \n            \n                callCounterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/defined-setups.ts\n            \n            \n                class\n            \n            \n                DefinedSetups\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                lib/dump.ts\n            \n            \n                function\n            \n            \n                dump\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                class\n            \n            \n                ExpectedExpressionReflector\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                interface\n            \n            \n                IExpectedExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                variable\n            \n            \n                Proxy\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedGetPropertyExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedMethodExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedNamedMethodExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedSetPropertyExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expression-predicates.ts\n            \n            \n                class\n            \n            \n                It\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expression-predicates.ts\n            \n            \n                interface\n            \n            \n                IPredicate\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/arguments-matcher.ts\n            \n            \n                class\n            \n            \n                ArgumentsMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/constant-matcher.ts\n            \n            \n                class\n            \n            \n                ConstantMatcher\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/expression-matcher.ts\n            \n            \n                class\n            \n            \n                ExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                argumentsMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                expressionMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                methodMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                namedMethodMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                setPropertyMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/get.property-matcher.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpressionMatcher\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/method-matcher.ts\n            \n            \n                class\n            \n            \n                MethodExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/named.method-matcher.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/set.property-matcher.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                MethodExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpression\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpression\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/format-string.ts\n            \n            \n                function\n            \n            \n                format\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/constant-formatter.ts\n            \n            \n                class\n            \n            \n                ConstantFormatter\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/formatters/expected-expression-formatter.ts\n            \n            \n                class\n            \n            \n                ExpectedExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/expected-expression-formatter.ts\n            \n            \n                function\n            \n            \n                expectedExpressionFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/expression-formatter.ts\n            \n            \n                class\n            \n            \n                ExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                expressionFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                methodFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                namedMethodFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                setPropertyFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/get.property-formatter.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpressionFormatter\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/formatters/method-formatter.ts\n            \n            \n                class\n            \n            \n                MethodExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/named.method-formatter.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/set.property-formatter.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/tracked-expressions-formatter.ts\n            \n            \n                class\n            \n            \n                TrackedExpressionsFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/tracked-expressions-formatter.ts\n            \n            \n                function\n            \n            \n                trackedExpressionsFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/verify-formatter.ts\n            \n            \n                class\n            \n            \n                VerifyFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/verify-formatter.ts\n            \n            \n                function\n            \n            \n                verifyFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacksLooseStrategy\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacksStrictStrategy\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacks\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                interface\n            \n            \n                IInterceptorCallbacks\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                interface\n            \n            \n                IInterceptorCallbacksStrategy\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                function\n            \n            \n                interceptorCallbacksFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/interceptor.ts\n            \n            \n                class\n            \n            \n                Interceptor\n            \n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                lib/interceptor.ts\n            \n            \n                variable\n            \n            \n                Proxy\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/mock.ts\n            \n            \n                class\n            \n            \n                Mock\n            \n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                lib/mock.ts\n            \n            \n                class\n            \n            \n                MockCore\n            \n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                lib/play-times.ts\n            \n            \n                class\n            \n            \n                PlayTimes\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                class\n            \n            \n                SequenceId\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                function\n            \n            \n                sequenceIdFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                variable\n            \n            \n                instance\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/setup.ts\n            \n            \n                class\n            \n            \n                Setup\n            \n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                lib/times.ts\n            \n            \n                class\n            \n            \n                Times\n            \n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                lib/tracker.ts\n            \n            \n                class\n            \n            \n                Tracker\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/tracker.ts\n            \n            \n                function\n            \n            \n                trackerFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                class\n            \n            \n                Verifier\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                class\n            \n            \n                VerifyError\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                function\n            \n            \n                verifierFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockBehavior   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            Range   (lib/.../times.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n        \n            \n                \n                    \n                        \n                        MockBehavior\n                    \n                \n                        \n                            \n                                 Strict\n                            \n                        \n                        \n                            \n                                 Loose\n                            \n                        \n            \n        \n\n    lib/times.ts\n    \n        \n            \n                \n                    \n                        \n                        Range\n                    \n                \n                        \n                            \n                                 Exclusive\n                            \n                        \n                        \n                            \n                                 Inclusive\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            argumentsMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            callCounterFactory   (lib/.../call-counter.ts)\n                        \n                        \n                            dump   (lib/.../dump.ts)\n                        \n                        \n                            expectedExpressionFormatterFactory   (lib/.../expected-expression-formatter.ts)\n                        \n                        \n                            expressionFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            expressionMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            format   (lib/.../format-string.ts)\n                        \n                        \n                            interceptorCallbacksFactory   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            methodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            methodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            sequenceIdFactory   (lib/.../sequence-id.ts)\n                        \n                        \n                            setPropertyFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            setPropertyMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            trackedExpressionsFormatterFactory   (lib/.../tracked-expressions-formatter.ts)\n                        \n                        \n                            trackerFactory   (lib/.../tracker.ts)\n                        \n                        \n                            verifierFactory   (lib/.../verifier.ts)\n                        \n                        \n                            verifyFormatterFactory   (lib/.../verify-formatter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expression-matchers/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            argumentsMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nargumentsMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expressionMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/call-counter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            callCounterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ncallCounterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/dump.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dump\n                            \n                            \n                        \n                    \n                \n                \n                    \ndump(mock)\n                    \n                \n\n\n\n\n                \n                    \n                            This function dumps into console.log all interactions with the mocked object\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mock\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/formatters/expected-expression-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expectedExpressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpectedExpressionFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/format-string.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \nformat(template, ...args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        template\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            interceptorCallbacksFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ninterceptorCallbacksFactory(definedSetups, tracker)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        tracker\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/sequence-id.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sequenceIdFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsequenceIdFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/tracked-expressions-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackedExpressionsFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackedExpressionsFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/tracker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackerFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackerFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/verifier.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifierFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifierFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/verify-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifyFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nmoq.ts | Documentation\nMoq for Typescript. Inspired by c# Moq library.\nImportant\nThis implementation depends on Proxy object.\nSo if your production code is not compatible with this I would recommend you separate you production code and testing code into dedicated projects.\nIf you need help with this then ask me.\nInstall\nnpm install moq.ts --save-dev\nQuick start\nmoq.ts as the original Moq library is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).\nYou can find a pretty full set of usages in the integration tests. Check out tests.integration folder.\n\n\nMocking property of objects\nMocking property setting\nMocking functions\nMocking functions of objects\nMock behavior\nMock prototype\n\n\n\nMocking property of objects\n-\nmock-get.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedGetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property1: number;\n    property2: number;\n    property3: number;\n    property4: number;\n    method(): void;\n}\n\nconst property4Name = 'property4';\nconst mockName = 'mock name is optional';\nconst mock = new Mock(mockName)\n    .setup(instance => instance.property1)\n    .returns(1)\n\n    .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property2'))\n    .returns(100)\n\n    //let's deny any write operation on the property for all values\n    .setup(instance => {instance.property2 = It.Is(() => true)})\n    .returns(false)\n\n    .setup(instance => instance.property3)\n    .callback(()=> 10 + 10)\n\n    .setup(instance => instance[property4Name])\n    .throws(new Error('property4 access'))\n\n    //since a method is a property that holds a pointer to a function\n    .setup(instance => instance.method)\n    .returns(()=>{console.log('The method was called')});\n\nconst object = mock.object();\nobject.method();\n\nmock.verify(instance=> instance.property1, Times.Never());Mocking property setting\n-\nThe documentation on returned value from 'set hook' on Proxy object\nmock-set.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedSetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property: number|any;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => {instance.property = 1})\n    //true - allows the write operation\n    .returns(true)\n\n    .setup(instance => It.Is((expression: ExpectedSetPropertyExpression) => expression.name === 'property' && expression.value === 2))\n    //false - denies the write operation\n    .returns(false)\n\n    .setup(instance => {instance.property = It.Is(value => value === 3)})\n    // allows the write operation\n    .callback(()=> true)\n\n    .setup(instance => {instance.property = value})\n    .throws(new Error('an object has been written into property'));\n\n\nconst object = mock.object();\nobject.property = 1;\n\nmock.verify(instance=> {instance.property = 1}, Times.Once());Mocking functions\n-\nmock-method.property.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestFunction {\n    (arg: number|any): string;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => instance(1))\n    .returns('called with 1')\n\n    .setup(instance => instance(2))\n    .callback((argument)=> argument === 2 ? 'called with 2' : `called with ${argument}`)\n\n    .setup(instance => instance(value))\n    .throws(new Error('Argument is object with date'))\n\n    .setup(instance => instance(It.Is(value => value === 4)))\n    .returns('called with 4');\n\nconst method = mock.object();\nconst actual = method(1);\n\nmock.verify(instance => instance(1), Times.Once());\nmock.verify(instance => instance(It.Is(value=> value === 1)), Times.Exactly(1));\n\n Mocking functions of objects\n -\nmock-named.method.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestObject {\n    method(arg1: number, arg2: string): Date;\n}\n\nconst values = ['a', 'b', 'c'];\n\nconst mock = new Mock()\n    .setup(instance => instance.method(1, values[0]))\n    .returns(new Date(2016))\n\n    .setup(instance => instance.method(It.Is(value => value === 2), values[1]))\n    .callback((arg1, arg2)=> new Date(2017 + arg1))\n\n    .setup(instance => instance.method(3, It.Is(value => value === values[2])))\n    .throws(new Error('Invoking method with 3 and c'));\n\nconst object = mock.object();\nconst actual = object.method(1, 'a');\n\nmock.verify(instance => instance.method(2, 'a'), Times.Never());Mock behavior\nYou can control mock behavior when accessing to a property without a corresponding setup. \n    mock = new Mock();\n    mock.setup(instance => It.Is(expression => true))\n      .throws(new Error(\"setup is missed\"));Accessing to an unset property or a method will return a pointer to a spy function;\nYou can call this function and it will be tracked.\nMock prototype\nIf you need to make work instanceof operator or you need to deal with prototype of the mock object you can \nuse prototypeof function of Mock class. Or you can use Object.getPrototypeOf or Object.setPrototypeOf functions\non mock object.\nclass TestObject implements ITestObject {\n\n}\n\nconst mock = new Mock()\n                .prototypeof(TestObject.prototype)\n                .object();\n\nmock.object() instanceof TestObject;// trueSponsored by 2BIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    41 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpectedExpressions   (lib/.../expected-expressions.ts)\n                        \n                        \n                            Expressions   (lib/.../expressions.ts)\n                        \n                        \n                            TrackedAction   (lib/.../tracker.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expected-expressions/expected-expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        ExpectedExpressions\n                    \n                \n                \n                    \n                        ExpectedExpressions:     ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It\n\n                    \n                \n            \n        \n\n    lib/expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        Expressions\n                    \n                \n                \n                    \n                        Expressions:     MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression\n\n                    \n                \n            \n        \n\n    lib/tracker.ts\n    \n        \n            \n                \n                    \n                        \n                        TrackedAction\n                    \n                \n                \n                    \n                        TrackedAction:     literal type\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            instance   (lib/.../sequence-id.ts)\n                        \n                        \n                            Proxy   (lib/.../interceptor.ts)\n                        \n                        \n                            Proxy   (lib/.../expected-expression-reflector.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/sequence-id.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            instance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        instance:     \n\n                    \n                \n                    \n                        \n                            Default value : new SequenceId()\n                        \n                    \n\n\n            \n        \n\n    lib/interceptor.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    lib/expected-expressions/expected-expression-reflector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
