var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.1.6","fields":["title","body"],"fieldVectors":[["title/classes/ArgumentsMatcher.html",[0,0.326,1,2.437]],["body/classes/ArgumentsMatcher.html",[0,0.454,1,3.395,2,0.2,3,0.2,4,0.2,5,2.823,6,5.619,7,1.971,8,0.137,9,0.628,10,0.307,11,0.02,12,0.686,13,3.125,14,4.442,15,0.236,16,3.661,17,0.458,18,0.021,19,0.271,20,0.236,21,0.38,22,2.668,23,3.242,24,3.661,25,2.668,26,0.657,27,1.547,28,0.499,29,1.081,30,1.522,31,1.023,32,2.121,33,1.971,34,0.2,35,0.968,36,2.771,37,1.855,38,3.661,39,3.661,40,1.547,41,3.661,42,0.569,43,4.957,44,3.661,45,3.661,46,0.015]],["title/classes/CallCounter.html",[0,0.326,47,2.437]],["body/classes/CallCounter.html",[0,0.449,2,0.197,3,0.197,4,0.197,8,0.1,9,0.622,10,0.305,11,0.014,12,0.677,15,0.234,17,0.454,18,0.021,19,0.268,20,0.234,21,0.377,26,0.609,28,0.603,29,1.648,33,1.944,34,0.268,35,0.954,37,1.192,42,0.561,46,0.014,47,3.821,48,4.762,49,3.082,50,5.345,51,3.082,52,4.424,53,3.611,54,4.91,55,2.346,56,0.488,57,3.611,58,3.08,59,0.954,60,2.733,61,3.082,62,3.611,63,3.082,64,3.082,65,2.733,66,1.192,67,2.473,68,1.127,69,3.611]],["title/classes/ConstantFormatter.html",[0,0.326,70,2.062]],["body/classes/ConstantFormatter.html",[0,0.483,2,0.22,3,0.22,4,0.22,8,0.146,9,0.669,10,0.322,11,0.016,15,0.192,17,0.372,18,0.021,19,0.22,20,0.192,21,0.309,26,0.708,28,0.405,29,1.189,30,1.674,31,1.125,34,0.22,36,3.047,42,0.821,46,0.016,70,3.059,71,5.28,72,1.779,73,2.333,74,5.28,75,3.436,76,4.719,77,1.172,78,1.945,79,4.026,80,4.026,81,4.026,82,4.026,83,5.28,84,4.026,85,4.026]],["title/classes/ConstantMatcher.html",[0,0.326,14,2.437]],["body/classes/ConstantMatcher.html",[0,0.507,2,0.237,3,0.237,4,0.237,5,2.786,7,2.337,8,0.12,9,0.703,10,0.334,11,0.019,14,3.797,15,0.207,17,0.401,18,0.021,19,0.237,20,0.207,21,0.333,22,2.985,23,3.661,25,2.985,26,0.666,27,1.731,28,0.437,29,1.282,30,1.805,31,1.213,34,0.237,36,3.286,46,0.016,78,1.433,86,5.544,87,4.341,88,2.723]],["title/classes/DefinedSetups.html",[0,0.326,89,1.788]],["body/classes/DefinedSetups.html",[0,0.372,2,0.151,3,0.151,4,0.151,8,0.076,9,0.515,10,0.35,11,0.012,12,0.518,15,0.27,17,0.491,18,0.022,19,0.324,20,0.27,21,0.408,26,0.668,27,1.269,28,0.535,29,0.817,33,1.489,34,0.151,35,0.731,37,1.342,40,0.864,42,0.632,46,0.012,51,2.361,52,4.055,55,2.219,56,0.434,59,0.731,60,2.094,64,2.361,77,0.903,78,0.913,89,2.043,90,5.92,91,2.766,92,1.136,93,1.592,94,3.155,95,3.47,96,2.55,97,4.066,98,1.894,99,1.592,100,4.066,101,6.12,102,2.766,103,5.92,104,1.796,105,4.066,106,2.766,107,4.066,108,2.766,109,1.69,110,2.361,111,2.766,112,4.066,113,2.766,114,1.023,115,2.766]],["title/classes/ExpectedExpressionFormatter.html",[0,0.326,116,2.694]],["body/classes/ExpectedExpressionFormatter.html",[0,0.433,2,0.187,3,0.187,4,0.187,8,0.095,9,0.6,10,0.297,11,0.014,12,0.641,15,0.226,17,0.438,18,0.021,19,0.259,20,0.226,21,0.363,26,0.592,28,0.546,29,1.398,34,0.259,35,0.905,42,0.736,46,0.014,55,2.294,56,0.425,58,3.404,59,0.905,66,1.13,68,1.069,72,1.512,73,2.092,77,1.244,114,1.266,116,4.107,117,4.631,118,2.921,119,4.353,120,2.921,121,4.04,122,4.631,123,4.996,124,3.855,125,2.921,126,2.344,127,1.611,128,2.591,129,2.921,130,2.591,131,3.423,132,3.423,133,3.423,134,3.423,135,3.423,136,3.423,137,2.147,138,3.423]],["title/classes/ExpectedExpressionReflector.html",[0,0.326,139,2.232]],["body/classes/ExpectedExpressionReflector.html",[0,0.389,2,0.16,3,0.16,4,0.16,8,0.081,9,0.538,10,0.273,11,0.012,15,0.238,17,0.271,18,0.022,19,0.273,20,0.14,21,0.383,26,0.659,28,0.427,29,0.867,31,1.527,34,0.232,37,0.969,42,0.775,46,0.012,55,1.955,56,0.431,59,1.445,68,1.811,78,0.969,92,1.186,93,1.996,99,1.402,104,1.297,109,1.221,114,1.086,139,2.664,140,2.415,141,2.222,142,4.665,143,4.665,144,4.246,145,2.936,146,2.936,147,3.624,148,3.429,149,2.936,150,1.221,151,1.221,152,1.297,153,1.086,154,2.011,155,1.842,156,2.222,157,2.222,158,2.506,159,3.776,160,5.159,161,2.506,162,2.347,163,2.506,164,2.011,165,2.506,166,2.222,167,2.222,168,2.506,169,2.222,170,1.842,171,2.506,172,2.506]],["title/classes/ExpectedGetPropertyExpression.html",[0,0.326,150,1.479]],["body/classes/ExpectedGetPropertyExpression.html",[0,0.596,2,0.222,3,0.222,4,0.222,8,0.112,10,0.29,11,0.016,15,0.193,18,0.021,19,0.323,20,0.253,28,0.534,31,1.133,34,0.356,46,0.016,55,1.59,56,0.367,59,1.072,77,0.994,92,1.483,109,2.206,140,1.792,150,2.459,151,2.206,152,2.345,173,2.545,174,3.063,175,1.853,176,2.778,177,4.057,178,1.483,179,1.483,180,1.483]],["title/classes/ExpectedMethodExpression.html",[0,0.326,152,1.572]],["body/classes/ExpectedMethodExpression.html",[0,0.597,2,0.223,3,0.223,4,0.223,8,0.113,10,0.291,11,0.016,15,0.195,18,0.021,20,0.254,28,0.537,31,1.142,34,0.357,46,0.016,55,1.602,56,0.369,59,1.08,92,1.49,109,2.217,140,1.806,150,2.217,151,2.217,152,2.623,173,2.565,174,3.071,175,1.575,176,2.8,178,1.49,179,1.758,180,1.49,181,2.793,182,4.088]],["title/classes/ExpectedNamedMethodExpression.html",[0,0.326,109,1.479]],["body/classes/ExpectedNamedMethodExpression.html",[0,0.588,2,0.213,3,0.213,4,0.213,8,0.108,10,0.337,11,0.015,15,0.246,18,0.021,19,0.317,20,0.276,28,0.52,31,1.087,34,0.351,46,0.015,55,1.525,56,0.357,59,1.029,77,0.967,92,1.443,109,2.409,140,1.72,150,2.147,151,2.147,152,2.281,173,2.441,174,3.022,175,1.525,176,3.536,178,1.443,179,1.443,180,1.794,181,2.727,183,3.892,184,3.892]],["title/classes/ExpectedSetPropertyExpression.html",[0,0.326,151,1.479]],["body/classes/ExpectedSetPropertyExpression.html",[0,0.588,2,0.213,3,0.213,4,0.213,8,0.108,10,0.337,11,0.015,15,0.246,18,0.021,19,0.317,20,0.276,28,0.52,31,1.087,34,0.351,46,0.015,55,1.525,56,0.357,59,1.029,77,0.967,92,1.443,99,1.913,109,2.147,140,1.72,150,2.147,151,2.409,152,2.281,173,2.441,174,3.022,175,1.525,176,3.536,178,1.794,179,1.443,180,1.443,185,3.892,186,3.892]],["title/classes/ExpressionFormatter.html",[0,0.326,119,2.437]],["body/classes/ExpressionFormatter.html",[0,0.411,2,0.174,3,0.174,4,0.174,8,0.088,9,0.66,10,0.285,11,0.013,12,0.595,15,0.214,17,0.415,18,0.021,19,0.245,20,0.214,21,0.345,26,0.696,28,0.642,29,0.938,30,1.32,31,0.887,32,1.84,34,0.174,35,0.839,46,0.013,56,0.465,70,3.696,72,1.403,73,1.984,77,0.841,78,1.973,93,1.87,114,1.174,119,3.076,127,2.813,175,1.326,178,1.255,179,1.255,180,1.255,187,5.211,188,3.175,189,4.288,190,5.211,191,4.288,192,5.211,193,4.288,194,5.211,195,4.288,196,3.175,197,4.491,198,2.817,199,3.175,200,2.71,201,2.71,202,2.71,203,3.175,204,3.175,205,3.175,206,3.175,207,3.175,208,3.175]],["title/classes/ExpressionMatcher.html",[0,0.326,52,2.437]],["body/classes/ExpressionMatcher.html",[0,0.375,2,0.153,3,0.153,4,0.153,5,2.437,7,1.505,8,0.077,9,0.615,10,0.265,11,0.016,12,0.524,15,0.195,17,0.379,18,0.021,19,0.224,20,0.195,21,0.314,22,2.206,23,3.745,25,3.199,26,0.687,27,1.279,28,0.618,29,1.21,30,1.162,31,0.781,33,2.876,34,0.153,35,0.739,37,1.353,40,0.873,46,0.012,52,2.806,55,2.093,56,0.411,59,0.739,60,3.672,78,2.211,93,1.601,109,1.703,114,1.034,150,1.703,151,1.703,152,1.81,175,1.21,178,1.145,179,1.145,180,1.145,200,2.386,201,2.386,202,2.386,209,2.795,210,4.498,211,4.648,212,4.648,213,4.648,214,2.795,215,2.795,216,2.795,217,2.795,218,2.795,219,2.795]],["title/classes/GetPropertyExpression.html",[0,0.326,175,1.051]],["body/classes/GetPropertyExpression.html",[0,0.582,2,0.207,3,0.207,4,0.207,8,0.104,10,0.348,11,0.015,12,0.708,15,0.241,17,0.349,18,0.022,19,0.371,20,0.272,21,0.29,34,0.348,46,0.015,56,0.261,77,1.253,92,1.415,99,1.248,162,2.687,175,1.687,178,1.415,179,1.415,180,1.415,181,2.383,220,2.371,221,2.861,222,3.78,223,3.78,224,3.309,225,3.468,226,2.589]],["title/classes/GetPropertyExpressionFormatter.html",[0,0.326,189,2.694]],["body/classes/GetPropertyExpressionFormatter.html",[0,0.527,2,0.252,3,0.252,4,0.252,8,0.127,9,0.73,10,0.343,11,0.017,15,0.22,17,0.426,18,0.02,19,0.252,20,0.22,21,0.354,26,0.628,28,0.464,34,0.252,46,0.017,56,0.398,72,2.036,73,2.544,75,3.933,77,1.079,175,1.942,189,4.358,198,3.611,227,5.757,228,4.608,229,3.488]],["title/classes/GetPropertyExpressionMatcher.html",[0,0.326,210,2.694]],["body/classes/GetPropertyExpressionMatcher.html",[0,0.483,2,0.22,3,0.22,4,0.22,5,2.653,7,2.167,8,0.111,9,0.669,10,0.322,11,0.018,15,0.192,17,0.372,18,0.021,19,0.22,20,0.192,21,0.309,22,2.843,23,3.588,25,2.167,26,0.682,27,1.648,28,0.593,29,1.559,30,1.674,31,1.125,34,0.22,37,1.329,40,1.257,42,0.626,46,0.016,56,0.365,59,1.064,78,1.329,88,2.525,150,2.6,175,1.847,210,3.997,230,5.28,231,4.026,232,4.026,233,2.757,234,3.047,235,3.047]],["title/interfaces/IExpectedExpression.html",[148,2.232,153,1.316]],["body/interfaces/IExpectedExpression.html",[0,0.292,2,0.175,3,0.175,4,0.175,8,0.088,10,0.175,11,0.013,15,0.152,18,0.022,19,0.246,21,0.346,26,0.653,28,0.454,29,0.943,31,1.587,34,0.246,37,1.055,42,0.813,46,0.013,55,1.767,56,0.393,59,1.192,68,1.87,78,1.055,92,1.461,93,1.489,99,1.489,104,1.993,109,1.328,114,1.181,139,2.004,140,1.993,141,2.418,142,2.726,143,2.726,147,2.726,148,3.28,150,1.328,151,1.328,152,1.411,153,1.668,154,3.089,155,2.829,156,2.418,157,2.418,158,2.726,159,3.958,160,5.307,161,2.726,162,2.46,163,2.726,164,2.188,165,2.726,166,2.418,167,2.418,168,2.726,169,2.418,170,2.004,171,2.726,172,2.726,236,2.726,237,2.726,238,3.194]],["title/interfaces/IInterceptorCallbacks.html",[153,1.316,239,2.437]],["body/interfaces/IInterceptorCallbacks.html",[0,0.282,2,0.168,3,0.168,4,0.168,8,0.085,9,0.557,10,0.28,11,0.013,15,0.21,17,0.285,18,0.021,19,0.168,20,0.147,21,0.236,26,0.61,27,1.373,28,0.595,34,0.323,35,0.815,42,0.683,46,0.013,56,0.387,66,1.017,68,1.6,77,0.824,89,2.209,93,1.452,94,1.549,104,2.265,153,1.896,174,2.069,239,3.511,240,2.367,241,2.209,242,1.933,243,3.308,244,3.753,245,3.88,246,4.048,247,3.082,248,3.511,249,1.933,250,2.367,251,2.333,252,3.088,253,1.933,254,2.333,255,2.333,256,1.786,257,1.933,258,2.758,259,2.758,260,2.576,261,2.111,262,2.758,263,3.88,264,2.333,265,3.88,266,2.333,267,2.333,268,1.786,269,2.333,270,3.88,271,2.333,272,2.333,273,2.111,274,2.333,275,2.333,276,2.333]],["title/interfaces/IInterceptorCallbacksStrategy.html",[153,1.316,243,1.916]],["body/interfaces/IInterceptorCallbacksStrategy.html",[0,0.269,2,0.16,3,0.16,4,0.16,8,0.081,9,0.538,10,0.273,11,0.012,15,0.238,17,0.393,18,0.021,19,0.232,20,0.202,21,0.326,26,0.633,27,1.557,28,0.584,34,0.317,35,0.776,42,0.66,46,0.012,56,0.431,66,0.969,68,1.557,77,1.024,89,2.134,93,1.402,94,1.475,96,2.664,104,1.876,153,1.845,174,1.381,239,2.908,240,2.686,241,2.507,242,1.842,243,3.255,245,3.214,246,3.417,248,2.908,249,1.842,250,2.286,251,2.222,252,3.037,253,1.842,254,2.222,255,2.222,256,1.701,257,1.842,258,3.129,259,3.129,260,2.914,261,2.011,262,2.664,263,3.776,264,2.222,265,3.776,266,2.222,267,2.222,268,1.701,269,2.222,270,3.776,271,2.222,272,2.222,273,2.011,274,2.222,275,2.222,276,2.222,277,2.908,278,2.936,279,2.011,280,2.936]],["title/interfaces/IPredicate.html",[153,1.316,281,2.694]],["body/interfaces/IPredicate.html",[0,0.354,2,0.211,3,0.211,4,0.211,8,0.107,10,0.316,11,0.015,15,0.184,18,0.022,26,0.699,27,1.803,30,2.136,31,1.079,34,0.281,37,1.696,40,1.206,42,0.6,46,0.019,68,1.604,92,1.613,114,1.428,140,2.27,153,1.9,154,3.519,155,3.622,224,2.238,236,3.297,237,3.297,281,4.658,282,3.297,283,3.863,284,3.889,285,3.297,286,3.297,287,3.297,288,3.297,289,3.297,290,3.297,291,3.297,292,3.297]],["title/classes/Interceptor.html",[0,0.326,250,1.916]],["body/classes/Interceptor.html",[0,0.314,2,0.121,3,0.121,4,0.121,8,0.061,9,0.435,10,0.297,11,0.01,12,0.415,15,0.27,17,0.318,18,0.022,19,0.259,20,0.245,21,0.364,26,0.718,28,0.346,34,0.121,35,0.585,37,1.566,40,0.691,42,0.882,46,0.01,56,0.291,66,0.731,68,1.604,76,3.723,92,0.96,93,2.101,98,1.516,99,1.566,114,1.899,126,1.516,155,3.558,156,1.675,157,1.675,159,3.888,162,1.981,164,1.516,166,1.675,167,1.675,169,1.675,170,1.388,175,1.014,178,0.618,179,0.618,180,0.96,241,1.112,243,2.554,250,2.266,260,2.731,262,2.155,293,1.889,294,4.745,295,4.745,296,4.745,297,4.745,298,2.6,299,2.213,300,3.435,301,2.213,302,2.213,303,2.213,304,2.213,305,3.435,306,2.213,307,1.516,308,5.436,309,4.21,310,2.213,311,2.213,312,3.435,313,2.213,314,2.213,315,3.435,316,2.213,317,2.213,318,2.213,319,2.213,320,5.137,321,3.435,322,2.213,323,2.213,324,2.932,325,2.213,326,2.213]],["title/classes/InterceptorCallbacks.html",[0,0.326,262,2.232]],["body/classes/InterceptorCallbacks.html",[0,0.347,2,0.138,3,0.138,4,0.138,8,0.07,9,0.481,10,0.342,11,0.011,12,0.472,15,0.273,17,0.469,18,0.021,19,0.277,20,0.259,21,0.39,26,0.624,27,1.425,28,0.548,34,0.298,35,0.666,42,0.59,46,0.011,56,0.411,66,0.832,68,1.425,77,0.951,89,1.906,92,1.06,93,1.676,94,1.267,96,2.38,104,2.016,153,1.403,174,1.186,239,3.125,240,3.08,241,2.875,242,1.581,243,3.482,244,3.238,245,3.454,246,3.729,248,3.125,249,1.581,250,2.043,251,1.908,252,2.875,253,1.581,254,1.908,255,1.908,256,1.46,257,1.581,258,2.862,259,2.862,260,2.736,261,1.726,262,2.862,263,3.843,264,1.908,265,4.122,266,1.908,267,1.908,268,2.198,269,3.843,270,3.454,271,1.908,272,1.908,273,1.726,274,1.908,275,1.908,276,1.908,277,2.599,279,1.726,327,2.521,328,3.794,329,2.521,330,2.521,331,2.521]],["title/classes/InterceptorCallbacksLooseStrategy.html",[0,0.326,253,2.232]],["body/classes/InterceptorCallbacksLooseStrategy.html",[0,0.396,2,0.165,3,0.165,4,0.165,8,0.083,9,0.548,10,0.333,11,0.013,12,0.564,15,0.264,17,0.468,18,0.021,19,0.277,20,0.241,21,0.388,26,0.701,27,1.35,28,0.557,34,0.165,35,0.796,37,0.994,40,0.94,42,0.787,46,0.013,56,0.453,68,0.94,77,0.948,78,1.671,89,3.064,93,0.994,94,2.943,96,2.713,114,1.871,175,1.277,178,1.208,179,1.208,180,1.208,240,2.978,241,2.779,243,2.724,250,1.621,252,3.229,253,2.713,258,2.713,259,2.713,260,2.543,268,2.506,277,2.962,279,2.062,307,2.062,332,3.011,333,2.57,334,3.011,335,3.011,336,3.011,337,2.57,338,2.57,339,3.691,340,2.57,341,2.57,342,3.011,343,3.011]],["title/classes/InterceptorCallbacksStrictStrategy.html",[0,0.326,249,2.232]],["body/classes/InterceptorCallbacksStrictStrategy.html",[0,0.396,2,0.165,3,0.165,4,0.165,8,0.083,9,0.548,10,0.333,11,0.013,12,0.564,15,0.264,17,0.468,18,0.021,19,0.277,20,0.241,21,0.388,26,0.725,27,1.35,28,0.557,34,0.165,35,0.796,37,1.671,40,0.94,42,0.672,46,0.013,56,0.453,66,0.994,77,0.948,78,1.826,89,3.064,93,0.994,94,2.543,96,3.47,114,1.599,178,1.208,179,1.208,180,1.208,240,2.978,241,2.779,243,2.724,249,2.713,250,1.621,252,3.229,258,2.713,259,2.713,260,2.779,268,2.506,277,2.962,279,2.062,307,2.062,324,2.57,333,2.57,337,2.57,338,2.57,339,3.691,340,2.57,341,2.57,344,3.011,345,3.011,346,3.011,347,3.011,348,3.011,349,3.011]],["title/classes/It.html",[0,0.406]],["body/classes/It.html",[0,0.406,2,0.17,3,0.17,4,0.17,8,0.086,9,0.562,10,0.347,11,0.013,12,0.584,15,0.283,17,0.477,18,0.022,19,0.282,20,0.268,21,0.396,26,0.692,27,1.611,30,2.565,31,1.724,34,0.242,37,1.464,40,0.974,42,0.485,46,0.017,68,1.384,92,1.239,114,1.153,140,2.726,153,1.153,154,3.037,155,3.525,224,1.807,281,4.996,282,2.662,284,4.67,285,3.784,286,2.662,287,4.796,288,3.784,289,2.662,290,2.662,291,2.662,292,2.662,350,3.357,351,3.119,352,3.119,353,3.119,354,3.119,355,3.119,356,3.119]],["title/classes/MethodExpression.html",[0,0.326,179,0.994]],["body/classes/MethodExpression.html",[0,0.585,2,0.21,3,0.21,4,0.21,8,0.106,10,0.349,11,0.015,12,0.718,15,0.244,17,0.355,18,0.022,19,0.335,20,0.274,21,0.294,34,0.349,46,0.015,56,0.265,77,1.078,92,1.429,99,1.266,162,2.887,175,1.51,178,1.429,179,1.607,180,1.429,181,3.008,220,2.406,224,3.333,225,3.502,226,3.502,357,5.113]],["title/classes/MethodExpressionFormatter.html",[0,0.326,193,2.694]],["body/classes/MethodExpressionFormatter.html",[0,0.494,2,0.228,3,0.228,4,0.228,8,0.115,9,0.685,10,0.327,11,0.016,12,0.781,15,0.257,17,0.499,18,0.021,19,0.295,20,0.257,21,0.414,26,0.589,28,0.544,32,2.416,34,0.228,35,1.102,42,0.648,46,0.016,56,0.374,70,3.898,72,1.842,73,2.387,77,1.012,99,1.783,127,1.962,179,1.771,193,4.089,198,3.389,358,5.993,359,3.156,360,3.156,361,2.855,362,4.169]],["title/classes/MethodExpressionMatcher.html",[0,0.326,212,2.694]],["body/classes/MethodExpressionMatcher.html",[0,0.462,1,4.479,2,0.206,3,0.206,4,0.206,5,2.864,7,2.028,8,0.104,9,0.64,10,0.312,11,0.018,12,0.706,15,0.241,17,0.467,18,0.021,19,0.276,20,0.241,21,0.388,22,2.72,23,3.521,25,2.028,26,0.622,27,1.577,28,0.613,29,1.492,30,1.566,31,1.052,33,2.028,34,0.206,35,0.995,42,0.585,46,0.015,56,0.349,59,0.995,78,1.243,88,2.363,152,2.692,179,1.702,181,1.772,212,3.824,233,2.579,363,5.7,364,3.214,365,2.851,366,2.851,367,3.766,368,3.214,369,3.214]],["title/classes/NamedMethodExpression.html",[0,0.326,180,0.994]],["body/classes/NamedMethodExpression.html",[0,0.574,2,0.199,3,0.199,4,0.199,8,0.1,10,0.362,11,0.015,12,0.681,15,0.267,17,0.336,18,0.022,19,0.368,20,0.286,21,0.279,34,0.343,46,0.015,56,0.252,77,1.24,92,1.378,99,1.2,162,2.954,175,1.457,178,1.378,179,1.378,180,1.564,181,2.954,220,2.281,221,2.752,224,3.244,225,3.379,226,2.49,370,4.933,371,3.636]],["title/classes/NamedMethodExpressionFormatter.html",[0,0.326,195,2.694]],["body/classes/NamedMethodExpressionFormatter.html",[0,0.483,2,0.22,3,0.22,4,0.22,8,0.111,9,0.669,10,0.322,11,0.016,12,0.754,15,0.252,17,0.488,18,0.021,19,0.289,20,0.252,21,0.405,26,0.576,28,0.531,32,2.333,34,0.22,35,1.064,42,0.821,46,0.016,56,0.365,70,3.861,72,1.779,73,2.603,77,1.104,99,1.329,127,1.894,180,1.747,195,3.997,198,3.312,359,3.047,360,3.047,361,2.757,372,5.892,373,4.026,374,4.026,375,4.026,376,4.026]],["title/classes/NamedMethodExpressionMatcher.html",[0,0.326,213,2.694]],["body/classes/NamedMethodExpressionMatcher.html",[0,0.457,1,4.456,2,0.202,3,0.202,4,0.202,5,2.839,7,1.992,8,0.102,9,0.633,10,0.309,11,0.018,12,0.693,15,0.238,17,0.461,18,0.021,19,0.273,20,0.238,21,0.383,22,2.687,23,3.503,25,1.992,26,0.66,27,1.558,28,0.609,29,1.474,30,1.538,31,1.034,33,1.992,34,0.202,35,0.978,40,1.155,42,0.575,46,0.015,56,0.345,59,0.978,78,1.221,88,2.321,109,2.514,180,1.69,181,1.741,213,3.779,233,2.534,234,2.801,235,2.801,364,3.158,365,2.801,366,2.801,368,3.158,369,3.158,377,5.649,378,3.7]],["title/classes/PlayTimes.html",[0,0.326,379,3.037]],["body/classes/PlayTimes.html",[0,0.4,2,0.167,3,0.167,4,0.167,8,0.141,9,0.554,10,0.304,11,0.013,15,0.265,17,0.404,18,0.022,19,0.239,20,0.208,21,0.335,26,0.75,27,2.105,34,0.167,37,1.684,40,1.738,42,0.475,46,0.013,50,3.729,58,3.2,63,3.729,99,1.443,284,5.157,379,3.729,380,5.89,381,3.055,382,4.37,383,5.568,384,5.568,385,5.101,386,4.37,387,3.055,388,3.055,389,3.055,390,4.37,391,3.055,392,5.101,393,4.354,394,3.055]],["title/classes/SetPropertyExpression.html",[0,0.326,178,0.994]],["body/classes/SetPropertyExpression.html",[0,0.574,2,0.199,3,0.199,4,0.199,8,0.1,10,0.362,11,0.015,12,0.681,15,0.267,17,0.336,18,0.022,19,0.368,20,0.286,21,0.279,34,0.343,46,0.015,56,0.252,77,1.24,92,1.378,99,2.137,162,2.635,175,1.457,178,1.564,179,1.378,180,1.378,181,2.321,220,2.281,221,2.752,224,3.244,225,3.379,226,2.49,395,3.636,396,3.636,397,3.636]],["title/classes/SetPropertyExpressionFormatter.html",[0,0.326,191,2.694]],["body/classes/SetPropertyExpressionFormatter.html",[0,0.491,2,0.225,3,0.225,4,0.225,8,0.114,9,0.679,10,0.326,11,0.016,12,0.772,15,0.255,17,0.496,18,0.021,19,0.293,20,0.255,21,0.411,26,0.585,28,0.54,32,2.387,34,0.225,35,1.089,42,0.64,46,0.016,56,0.371,70,3.886,72,1.821,73,2.369,77,1.004,92,1.151,99,1.77,127,1.939,178,1.763,191,4.058,198,3.363,229,3.119,359,3.119,360,3.119,361,2.822,398,5.959,399,4.12,400,4.12]],["title/classes/SetPropertyExpressionMatcher.html",[0,0.326,211,2.694]],["body/classes/SetPropertyExpressionMatcher.html",[0,0.455,2,0.201,3,0.201,4,0.201,5,2.828,7,1.978,8,0.102,9,0.63,10,0.308,11,0.018,12,0.688,13,3.136,14,4.447,15,0.237,17,0.459,18,0.021,19,0.272,20,0.237,21,0.381,22,2.675,23,3.496,25,1.978,26,0.658,27,1.551,28,0.607,29,1.467,30,1.528,31,1.027,32,2.129,33,1.978,34,0.201,35,0.971,37,1.213,40,1.147,42,0.571,46,0.015,56,0.344,59,0.971,78,1.213,88,2.305,151,2.507,178,1.685,211,3.761,233,2.516,234,2.781,235,2.781,365,2.781,366,2.781,401,5.629,402,3.674,403,3.674,404,3.674]],["title/classes/TrackedExpressionsFormatter.html",[0,0.326,405,2.694]],["body/classes/TrackedExpressionsFormatter.html",[0,0.46,2,0.204,3,0.204,4,0.204,8,0.103,9,0.637,10,0.31,11,0.015,12,0.701,15,0.24,17,0.465,18,0.021,19,0.275,20,0.24,21,0.386,26,0.62,28,0.572,34,0.275,35,0.988,42,0.581,46,0.018,56,0.48,65,2.831,66,1.235,68,1.167,72,1.652,73,2.221,77,1.064,118,3.192,119,4.47,120,3.192,125,3.192,127,1.76,128,2.831,129,3.192,405,4.3,406,4.848,407,5.028,408,4.291,409,2.831,410,3.739,411,3.739,412,3.739,413,3.739]],["title/classes/Tracker.html",[0,0.326,252,1.788]],["body/classes/Tracker.html",[0,0.466,2,0.208,3,0.208,4,0.208,8,0.105,9,0.645,10,0.359,11,0.015,15,0.273,17,0.352,18,0.022,19,0.208,20,0.242,21,0.292,26,0.625,28,0.383,34,0.208,46,0.015,56,0.454,92,1.422,93,1.892,95,4.343,98,2.607,99,1.257,104,2.248,175,1.807,178,1.709,179,1.709,180,1.064,252,2.557,414,3.807,415,6.118,416,3.807,417,5.088,418,3.807,419,3.807,420,3.807,421,3.807,422,3.807]],["title/classes/Verifier.html",[0,0.326,423,2.232]],["body/classes/Verifier.html",[0,0.466,2,0.166,3,0.166,4,0.166,8,0.084,9,0.553,10,0.278,11,0.013,12,0.817,15,0.208,17,0.403,18,0.021,19,0.238,20,0.208,21,0.335,26,0.476,28,0.592,29,1.288,34,0.278,40,0.951,42,0.864,46,0.013,47,4.495,56,0.471,59,0.805,66,1.006,67,2.987,68,1.361,77,1.042,93,1.681,104,1.927,124,3.488,126,2.086,127,1.433,137,1.911,139,3.691,148,3.488,174,1.433,350,3.301,423,3.195,424,2.306,425,3.046,426,4.317,427,3.046,428,4.347,429,3.722,430,4.88,431,3.046,432,2.6,433,2.987,434,2.6,435,2.306,436,2.6,437,2.6,438,2.6,439,2.306,440,2.6,441,2.6,442,2.6,443,3.722,444,2.6,445,2.6,446,2.6,447,2.6,448,2.306,449,2.6]],["title/classes/VerifyError.html",[0,0.326,435,2.694]],["body/classes/VerifyError.html",[0,0.498,2,0.188,3,0.188,4,0.188,10,0.188,11,0.014,12,0.891,15,0.164,17,0.319,18,0.021,19,0.188,20,0.164,21,0.264,26,0.376,28,0.62,29,1.018,34,0.298,40,1.076,42,0.913,46,0.014,47,4.219,56,0.46,59,0.911,66,1.137,67,3.257,68,1.485,77,1.1,93,1.797,104,1.522,124,2.983,127,1.621,137,2.161,139,3.416,148,2.983,174,2.237,423,2.983,424,2.608,426,3.729,428,4.058,429,2.941,430,4.444,432,2.941,433,3.257,434,2.941,435,3.599,436,4.058,437,4.058,438,2.941,439,2.608,440,2.941,441,2.941,442,2.941,443,4.058,444,2.941,445,4.058,446,2.941,447,2.941,448,2.608,449,2.941,450,3.445]],["title/classes/VerifyFormatter.html",[0,0.326,426,2.437]],["body/classes/VerifyFormatter.html",[0,0.417,2,0.177,3,0.177,4,0.177,8,0.09,9,0.578,10,0.288,11,0.013,12,0.854,15,0.217,17,0.421,18,0.021,19,0.249,20,0.217,21,0.35,26,0.575,28,0.576,29,1.557,34,0.249,42,0.819,46,0.013,55,2.241,56,0.453,58,3.307,59,0.857,66,1.071,68,1.013,72,1.433,73,2.014,77,1.228,93,1.505,116,4.73,121,3.891,122,4.881,123,4.881,124,3.588,126,2.221,127,2.145,130,2.455,361,2.221,405,4.859,408,4.499,409,3.451,426,3.611,433,2.221,451,4.499,452,3.244,453,3.244,454,2.455,455,3.244,456,3.244,457,3.244,458,3.244,459,3.244,460,3.244,461,3.244,462,3.244]],["title/changelog.html",[463,2.534,464,2.248,465,2.969]],["body/changelog.html",[9,0.546,11,0.016,18,0.016,31,1.203,40,1.344,46,0.016,56,0.298,66,1.821,76,2.949,78,1.422,94,2.771,137,2.701,256,2.495,257,2.701,260,2.771,298,3.259,393,3.675,423,2.701,454,3.259,466,4.306,467,5.476,468,4.306,469,6.417,470,4.306,471,4.306,472,4.306,473,4.306,474,4.306,475,3.675,476,3.675,477,3.675,478,3.675,479,3.675,480,3.675,481,4.306,482,3.675,483,4.306,484,3.675,485,4.306,486,3.675,487,4.306,488,4.306,489,4.306,490,4.306,491,4.306,492,4.306,493,4.306,494,4.306,495,4.306,496,4.306,497,4.306,498,4.306,499,3.675,500,4.306]],["title/miscellaneous/enumerations.html",[501,1.492,502,3.654]],["body/miscellaneous/enumerations.html",[8,0.144,11,0.018,18,0.018,46,0.018,240,2.799,241,2.613,242,3.888,246,4.245,256,3.013,257,3.262,501,2.613,502,4.438,503,4.438,504,6.198,505,5.2,506,5.2,507,5.2,508,5.2]],["title/miscellaneous/functions.html",[66,1.413,501,1.492]],["body/miscellaneous/functions.html",[5,1.784,8,0.098,11,0.014,17,0.449,18,0.017,19,0.265,21,0.372,46,0.014,48,3.03,49,4.142,56,0.411,61,4.72,66,1.172,67,3.788,72,2.84,73,2.145,89,1.784,114,2.198,117,3.03,128,4.186,130,4.186,162,2.284,240,1.911,241,1.784,242,3.045,252,2.439,261,2.431,406,3.03,409,4.186,424,2.687,433,3.788,439,4.186,451,3.03,501,1.784,503,3.03,509,5.531,510,6.794,511,3.55,512,2.687,513,3.55,514,4.854,515,4.854,516,5.531,517,5.531,518,5.531,519,5.531,520,5.531,521,5.531,522,3.55,523,3.55,524,3.55,525,3.55,526,3.55,527,3.55,528,3.55,529,3.55]],["title/index.html",[8,0.082,463,2.534,464,2.248]],["body/index.html",[0,0.229,9,0.666,11,0.007,15,0.071,18,0.021,19,0.082,20,0.119,21,0.115,26,0.352,28,0.423,37,1.066,40,0.467,42,0.959,46,0.007,58,2.635,65,3.18,66,1.67,68,1.695,76,3.987,77,0.605,78,0.826,92,1.517,94,1.258,98,1.714,99,1.884,104,0.661,110,2.755,114,0.553,124,0.938,137,2.368,150,1.041,151,1.041,153,1.396,162,0.704,164,2.211,170,1.57,181,1.178,229,1.895,248,2.211,256,0.867,260,1.258,268,1.45,273,1.024,298,1.132,307,1.714,350,1.895,423,0.938,430,2.857,448,1.132,454,1.895,464,1.132,467,5.754,475,1.276,476,1.276,477,2.755,478,1.276,479,1.276,480,3.586,482,1.276,484,1.276,486,2.755,499,2.755,530,4.825,531,1.496,532,1.496,533,3.228,534,2.503,535,2.503,536,1.496,537,1.496,538,2.503,539,1.496,540,1.496,541,1.496,542,1.496,543,1.496,544,1.496,545,1.496,546,2.503,547,1.496,548,1.496,549,1.496,550,1.496,551,1.496,552,1.496,553,1.496,554,1.496,555,1.496,556,2.503,557,1.496,558,1.496,559,1.496,560,1.496,561,1.496,562,1.496,563,1.496,564,1.496,565,1.496,566,1.496,567,1.496,568,1.496,569,1.496,570,1.496,571,3.774,572,1.496,573,2.503,574,1.496,575,2.503,576,1.496,577,1.496,578,6.239,579,2.503,580,1.496,581,2.503,582,1.496,583,1.496,584,2.503,585,3.774,586,1.496,587,1.496,588,2.503,589,1.496,590,2.503,591,1.496,592,3.774,593,1.496,594,4.201,595,1.496,596,2.503,597,1.496,598,1.496,599,4.201,600,1.496,601,4.201,602,2.503,603,1.496,604,1.496,605,2.503,606,2.503,607,3.774,608,3.774,609,2.503,610,1.496,611,1.496,612,3.774,613,2.503,614,2.503,615,1.496,616,1.496,617,1.496,618,1.496,619,1.496,620,1.496,621,2.503,622,2.503,623,1.496,624,1.496,625,1.496,626,1.496,627,2.503,628,2.136,629,2.503,630,1.496,631,1.496,632,1.496,633,1.496,634,1.496,635,2.503,636,1.496,637,1.496,638,1.496,639,1.496,640,1.496,641,1.496,642,1.496,643,1.496,644,1.496,645,1.496,646,1.496,647,1.496,648,1.496,649,1.496,650,1.496,651,1.496,652,1.496,653,1.496,654,1.496,655,1.496,656,3.228,657,1.496,658,1.496,659,1.496,660,1.496,661,1.496,662,1.496,663,1.496,664,1.496,665,1.496,666,1.496,667,2.503,668,1.496,669,1.496,670,1.496]],["title/modules.html",[671,4.149]],["body/modules.html",[11,0.019,18,0.019,46,0.019,671,4.845]],["title/overview.html",[672,4.149]],["body/overview.html",[0,0.509,11,0.019,18,0.019,46,0.019,153,2.055,628,4.743,672,4.743,673,5.557]],["title/miscellaneous/typealiases.html",[501,1.492,674,4.281]],["body/miscellaneous/typealiases.html",[8,0.134,11,0.018,18,0.021,20,0.232,46,0.018,55,2.521,56,0.445,59,1.285,109,2.022,140,2.149,150,2.022,151,2.022,152,2.149,173,3.734,175,1.436,178,1.359,179,1.359,180,1.359,220,3.051,501,2.444,512,3.681,675,4.863,676,4.863]],["title/miscellaneous/variables.html",[501,1.492,677,3.654]],["body/miscellaneous/variables.html",[8,0.141,11,0.018,18,0.02,20,0.292,46,0.018,56,0.424,59,1.348,140,2.253,141,4.637,170,4.439,293,4.352,501,2.562,512,3.86,677,4.352,678,5.099]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":63,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{}}}],["1",{"_index":65,"title":{},"body":{"classes/CallCounter.html":{},"classes/TrackedExpressionsFormatter.html":{},"index.html":{}}}],["10",{"_index":590,"title":{},"body":{"index.html":{}}}],["2",{"_index":612,"title":{},"body":{"index.html":{}}}],["2bit",{"_index":670,"title":{},"body":{"index.html":{}}}],["3",{"_index":614,"title":{},"body":{"index.html":{}}}],["4",{"_index":628,"title":{},"body":{"index.html":{},"overview.html":{}}}],["40",{"_index":673,"title":{},"body":{"overview.html":{}}}],["_prototyp",{"_index":294,"title":{},"body":{"classes/Interceptor.html":{}}}],["_proxi",{"_index":295,"title":{},"body":{"classes/Interceptor.html":{}}}],["_valu",{"_index":296,"title":{},"body":{"classes/Interceptor.html":{}}}],["accept",{"_index":320,"title":{},"body":{"classes/Interceptor.html":{}}}],["access",{"_index":594,"title":{},"body":{"index.html":{}}}],["action",{"_index":419,"title":{},"body":{"classes/Tracker.html":{}}}],["activestrategi",{"_index":269,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["actual",{"_index":629,"title":{},"body":{"index.html":{}}}],["add",{"_index":95,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Tracker.html":{}}}],["add(act",{"_index":417,"title":{},"body":{"classes/Tracker.html":{}}}],["add(key",{"_index":100,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["alias",{"_index":675,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":609,"title":{},"body":{"index.html":{}}}],["any|it",{"_index":36,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{}}}],["appli",{"_index":166,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["arg",{"_index":162,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["arg1",{"_index":645,"title":{},"body":{"index.html":{}}}],["arg2",{"_index":635,"title":{},"body":{"index.html":{}}}],["argument",{"_index":181,"title":{},"body":{"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"index.html":{}}}],["argumentsmatch",{"_index":1,"title":{"classes/ArgumentsMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["argumentsmatcherfactori",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["array",{"_index":82,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["ask",{"_index":545,"title":{},"body":{"index.html":{}}}],["assert",{"_index":491,"title":{},"body":{"changelog.html":{}}}],["assign",{"_index":400,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["b",{"_index":636,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":248,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"index.html":{}}}],["behaviour",{"_index":468,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["c",{"_index":533,"title":{},"body":{"index.html":{}}}],["call",{"_index":137,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["callback",{"_index":307,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"index.html":{}}}],["callback((arg1",{"_index":643,"title":{},"body":{"index.html":{}}}],["callback((argu",{"_index":624,"title":{},"body":{"index.html":{}}}],["callbacks.loose.strategi",{"_index":254,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.loose.strategy.t",{"_index":332,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:16",{"_index":336,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:32",{"_index":335,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:9",{"_index":334,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.strict.strategi",{"_index":251,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.strict.strategy.t",{"_index":344,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:13",{"_index":347,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:29",{"_index":346,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:6",{"_index":345,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.t",{"_index":242,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callbacks.ts:13",{"_index":280,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:14",{"_index":278,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:18",{"_index":247,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["callbacks.ts:29",{"_index":328,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:37",{"_index":330,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:41",{"_index":329,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:45",{"_index":331,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks/interceptor",{"_index":241,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callcount",{"_index":47,"title":{"classes/CallCounter.html":{}},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["callcounter(expressionmatcherfactori",{"_index":69,"title":{},"body":{"classes/CallCounter.html":{}}}],["callcounterfactori",{"_index":67,"title":{},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"miscellaneous/functions.html":{}}}],["calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n",{"_index":462,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["case",{"_index":490,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":291,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["changelog",{"_index":465,"title":{"changelog.html":{}},"body":{}}],["check",{"_index":566,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{},"overview.html":{}}}],["code",{"_index":486,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compat",{"_index":539,"title":{},"body":{"index.html":{}}}],["compil",{"_index":484,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["const",{"_index":42,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["constant",{"_index":32,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constantformatt",{"_index":70,"title":{"classes/ConstantFormatter.html":{}},"body":{"classes/ConstantFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constantformatter().format(object[index",{"_index":85,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["constantmatch",{"_index":14,"title":{"classes/ConstantMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["constructor(arg",{"_index":226,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(argumentsmatch",{"_index":364,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["constructor(constantformatt",{"_index":359,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constructor(constantmatch",{"_index":13,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor(definedsetup",{"_index":333,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["constructor(expectedexpressionformatt",{"_index":452,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["constructor(expressionformatt",{"_index":118,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["constructor(expressionmatch",{"_index":51,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["constructor(getpropertyexpressionmatch",{"_index":209,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["constructor(getpropertyformatt",{"_index":188,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["constructor(interceptorcallback",{"_index":299,"title":{},"body":{"classes/Interceptor.html":{}}}],["constructor(messag",{"_index":437,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["constructor(nam",{"_index":221,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(pred",{"_index":351,"title":{},"body":{"classes/It.html":{}}}],["constructor(priv",{"_index":35,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["constructor(publ",{"_index":224,"title":{},"body":{"classes/GetPropertyExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(reflector",{"_index":425,"title":{},"body":{"classes/Verifier.html":{}}}],["constructor(strictstrategi",{"_index":327,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["control",{"_index":651,"title":{},"body":{"index.html":{}}}],["correspond",{"_index":653,"title":{},"body":{"index.html":{}}}],["count",{"_index":50,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{}}}],["count(expect",{"_index":54,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter",{"_index":432,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["counter.t",{"_index":49,"title":{},"body":{"classes/CallCounter.html":{},"miscellaneous/functions.html":{}}}],["counter.ts:12",{"_index":57,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:6",{"_index":53,"title":{},"body":{"classes/CallCounter.html":{}}}],["createobject",{"_index":297,"title":{},"body":{"classes/Interceptor.html":{}}}],["date",{"_index":607,"title":{},"body":{"index.html":{}}}],["date(2016",{"_index":640,"title":{},"body":{"index.html":{}}}],["date(2017",{"_index":644,"title":{},"body":{"index.html":{}}}],["deal",{"_index":666,"title":{},"body":{"index.html":{}}}],["declar",{"_index":156,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["dedic",{"_index":542,"title":{},"body":{"index.html":{}}}],["default",{"_index":98,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Interceptor.html":{},"classes/Tracker.html":{},"index.html":{}}}],["defin",{"_index":15,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["definedsetup",{"_index":89,"title":{"classes/DefinedSetups.html":{}},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"miscellaneous/functions.html":{}}}],["delimit",{"_index":460,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["deni",{"_index":584,"title":{},"body":{"index.html":{}}}],["depend",{"_index":537,"title":{},"body":{"index.html":{}}}],["descript",{"_index":83,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["description.push(new",{"_index":84,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["dev",{"_index":548,"title":{},"body":{"index.html":{}}}],["document",{"_index":535,"title":{},"body":{"index.html":{}}}],["dump",{"_index":492,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":292,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["enum",{"_index":255,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["enumer",{"_index":502,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":436,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["error('an",{"_index":615,"title":{},"body":{"index.html":{}}}],["error('argu",{"_index":626,"title":{},"body":{"index.html":{}}}],["error('invok",{"_index":648,"title":{},"body":{"index.html":{}}}],["error('property4",{"_index":593,"title":{},"body":{"index.html":{}}}],["es5",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["exactli",{"_index":382,"title":{},"body":{"classes/PlayTimes.html":{}}}],["exactly(count",{"_index":386,"title":{},"body":{"classes/PlayTimes.html":{}}}],["except",{"_index":658,"title":{},"body":{"index.html":{}}}],["exclus",{"_index":507,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["expect",{"_index":29,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpress",{"_index":55,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/typealiases.html":{}}}],["expectedexpressionformatt",{"_index":116,"title":{"classes/ExpectedExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpressionformatter(expressionformatterfactori",{"_index":131,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expectedexpressionformatterfactori",{"_index":130,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["expectedexpressionmessag",{"_index":456,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessage}\\n${delimiter}\\ntrack",{"_index":461,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionreflector",{"_index":139,"title":{"classes/ExpectedExpressionReflector.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["expectedgetpropertyexpress",{"_index":150,"title":{"classes/ExpectedGetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedgetpropertyexpression(nam",{"_index":161,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpression|it",{"_index":232,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["expectedmethodexpress",{"_index":152,"title":{"classes/ExpectedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmethodexpression(arg",{"_index":168,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedmethodexpression|it",{"_index":367,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["expectednamedmethodexpress",{"_index":109,"title":{"classes/ExpectedNamedMethodExpression.html":{}},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"miscellaneous/typealiases.html":{}}}],["expectednamedmethodexpression(nam",{"_index":163,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectednamedmethodexpression).nam",{"_index":115,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["expectednamedmethodexpression|it",{"_index":378,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["expectedsetpropertyexpress",{"_index":151,"title":{"classes/ExpectedSetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/SetPropertyExpressionMatcher.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedsetpropertyexpression(nam",{"_index":165,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedsetpropertyexpression|it",{"_index":402,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["export",{"_index":34,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["express",{"_index":56,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expression(proxi",{"_index":172,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expression.arguments.foreach(arg",{"_index":373,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.nam",{"_index":229,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"index.html":{}}}],["expression.name}(${valu",{"_index":376,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.valu",{"_index":611,"title":{},"body":{"index.html":{}}}],["expressiondescript",{"_index":132,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressiondescription}${mockdescript",{"_index":135,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressionformatt",{"_index":119,"title":{"classes/ExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["expressionformatterfactori",{"_index":128,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"miscellaneous/functions.html":{}}}],["expressionmatch",{"_index":52,"title":{"classes/ExpressionMatcher.html":{}},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{}}}],["expressionmatcherfactori",{"_index":61,"title":{},"body":{"classes/CallCounter.html":{},"miscellaneous/functions.html":{}}}],["expressionproxi",{"_index":143,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expressions.t",{"_index":173,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/expect",{"_index":59,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expressions/express",{"_index":30,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["expressions|it",{"_index":203,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["extend",{"_index":174,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["factori",{"_index":129,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["fals",{"_index":40,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["field",{"_index":606,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["find",{"_index":562,"title":{},"body":{"index.html":{}}}],["fluent",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":569,"title":{},"body":{"index.html":{}}}],["format",{"_index":73,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["format(expect",{"_index":121,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(express",{"_index":198,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["format(object",{"_index":74,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["format(templ",{"_index":528,"title":{},"body":{"miscellaneous/functions.html":{}}}],["format(trackedexpress",{"_index":407,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["formatt",{"_index":127,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["formatted.join",{"_index":375,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatted.push(this.constantformatter.format(arg",{"_index":374,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatter.t",{"_index":72,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["formatter.ts:10",{"_index":361,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:12",{"_index":196,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:15",{"_index":125,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatter.ts:18",{"_index":453,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["formatter.ts:22",{"_index":199,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:4",{"_index":360,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["formatter.ts:5",{"_index":75,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["formatter.ts:9",{"_index":120,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatters/verifi",{"_index":434,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["friendli",{"_index":558,"title":{},"body":{"index.html":{}}}],["full",{"_index":556,"title":{},"body":{"index.html":{}}}],["fulli",{"_index":561,"title":{},"body":{"index.html":{}}}],["function",{"_index":66,"title":{"miscellaneous/functions.html":{}},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get",{"_index":463,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["get(express",{"_index":105,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["get.properti",{"_index":200,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["get.property.integrationtests.t",{"_index":570,"title":{},"body":{"index.html":{}}}],["getpropertyexpress",{"_index":175,"title":{"classes/GetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["getpropertyexpression(methodnam",{"_index":342,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["getpropertyexpression(nam",{"_index":311,"title":{},"body":{"classes/Interceptor.html":{}}}],["getpropertyexpression:19",{"_index":177,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{}}}],["getpropertyexpressionformatt",{"_index":189,"title":{"classes/GetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["getpropertyexpressionmatch",{"_index":210,"title":{"classes/GetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{}}}],["getpropertyformatt",{"_index":197,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["getpropertyresult",{"_index":312,"title":{},"body":{"classes/Interceptor.html":{}}}],["getprototypeof",{"_index":323,"title":{},"body":{"classes/Interceptor.html":{}}}],["getter",{"_index":228,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["hasnamedmethod",{"_index":96,"title":{},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(methodnam",{"_index":259,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(nam",{"_index":107,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["havebeencalledtim",{"_index":123,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["help",{"_index":544,"title":{},"body":{"index.html":{}}}],["hold",{"_index":595,"title":{},"body":{"index.html":{}}}],["hook",{"_index":603,"title":{},"body":{"index.html":{}}}],["https://dvabuzyarov.github.io/moq.t",{"_index":536,"title":{},"body":{"index.html":{}}}],["iexpectedexpress",{"_index":148,"title":{"interfaces/IExpectedExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["iinterceptorcallback",{"_index":239,"title":{"interfaces/IInterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["iinterceptorcallbacksstrategi",{"_index":243,"title":{"interfaces/IInterceptorCallbacksStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["implement",{"_index":268,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"index.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["inclus",{"_index":508,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["inherit",{"_index":176,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{}}}],["inspir",{"_index":532,"title":{},"body":{"index.html":{}}}],["instal",{"_index":546,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":154,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["instance(1",{"_index":621,"title":{},"body":{"index.html":{}}}],["instance(2",{"_index":623,"title":{},"body":{"index.html":{}}}],["instance(it.is(valu",{"_index":627,"title":{},"body":{"index.html":{}}}],["instance(valu",{"_index":625,"title":{},"body":{"index.html":{}}}],["instance.method",{"_index":597,"title":{},"body":{"index.html":{}}}],["instance.method(1",{"_index":637,"title":{},"body":{"index.html":{}}}],["instance.method(2",{"_index":650,"title":{},"body":{"index.html":{}}}],["instance.method(3",{"_index":646,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(()=>tru",{"_index":662,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(valu",{"_index":641,"title":{},"body":{"index.html":{}}}],["instance.properti",{"_index":608,"title":{},"body":{"index.html":{}}}],["instance.property1",{"_index":579,"title":{},"body":{"index.html":{}}}],["instance.property2",{"_index":586,"title":{},"body":{"index.html":{}}}],["instance.property3",{"_index":589,"title":{},"body":{"index.html":{}}}],["instance[property4nam",{"_index":591,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":78,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"changelog.html":{},"index.html":{}}}],["integr",{"_index":565,"title":{},"body":{"index.html":{}}}],["intend",{"_index":551,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":277,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["intercepted(express",{"_index":258,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptor",{"_index":250,"title":{"classes/Interceptor.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptorcallback",{"_index":262,"title":{"classes/InterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacks(strictstrategi",{"_index":267,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksfactori",{"_index":515,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interceptorcallbacksfactory(definedsetup",{"_index":261,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"miscellaneous/functions.html":{}}}],["interceptorcallbacksloosestrategi",{"_index":253,"title":{"classes/InterceptorCallbacksLooseStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["interceptorcallbacksloosestrategy(definedsetup",{"_index":266,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksstrictstrategi",{"_index":249,"title":{"classes/InterceptorCallbacksStrictStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptorcallbacksstrictstrategy(definedsetup",{"_index":264,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interfac",{"_index":153,"title":{"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"index.html":{},"overview.html":{}}}],["introduc",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["invok",{"_index":392,"title":{},"body":{"classes/PlayTimes.html":{}}}],["ipred",{"_index":281,"title":{"interfaces/IPredicate.html":{}},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["is(pred",{"_index":285,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isani",{"_index":287,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isetupinvok",{"_index":101,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["it(pred",{"_index":286,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["it).pred",{"_index":80,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it).test(left",{"_index":88,"title":{},"body":{"classes/ConstantMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["it.i",{"_index":587,"title":{},"body":{"index.html":{}}}],["it.is(${(object",{"_index":79,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it.is(()=>tru",{"_index":663,"title":{},"body":{"index.html":{}}}],["it.is((express",{"_index":581,"title":{},"body":{"index.html":{}}}],["it.is(valu",{"_index":613,"title":{},"body":{"index.html":{}}}],["it.isani",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["itestfunct",{"_index":620,"title":{},"body":{"index.html":{}}}],["itestobject",{"_index":571,"title":{},"body":{"index.html":{}}}],["key",{"_index":103,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["latest",{"_index":495,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":25,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["left.foreach((lvalu",{"_index":41,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.length",{"_index":38,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.nam",{"_index":234,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["let'",{"_index":583,"title":{},"body":{"index.html":{}}}],["lib/.../cal",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../expect",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/.../expressions.t",{"_index":676,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../factories.t",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../format",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../interceptor",{"_index":503,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/.../interceptor.t",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../times.t",{"_index":505,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../track",{"_index":522,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../verifi",{"_index":524,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../verifier.t",{"_index":523,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/cal",{"_index":48,"title":{},"body":{"classes/CallCounter.html":{},"miscellaneous/functions.html":{}}}],["lib/defin",{"_index":90,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["lib/expect",{"_index":140,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/express",{"_index":5,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"miscellaneous/functions.html":{}}}],["lib/expressions.t",{"_index":220,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["lib/expressions.ts:11",{"_index":357,"title":{},"body":{"classes/MethodExpression.html":{}}}],["lib/expressions.ts:18",{"_index":222,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:19",{"_index":223,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:2",{"_index":370,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/expressions.ts:24",{"_index":395,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:25",{"_index":396,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:26",{"_index":397,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:4",{"_index":371,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/format",{"_index":527,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/formatters/const",{"_index":71,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["lib/formatters/expect",{"_index":117,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/express",{"_index":187,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["lib/formatters/factories.t",{"_index":526,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/formatters/get.properti",{"_index":227,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["lib/formatters/method",{"_index":358,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["lib/formatters/named.method",{"_index":372,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["lib/formatters/set.properti",{"_index":398,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["lib/formatters/track",{"_index":406,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/verifi",{"_index":451,"title":{},"body":{"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor",{"_index":240,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor.t",{"_index":293,"title":{},"body":{"classes/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["lib/interceptor.ts:12",{"_index":302,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:13",{"_index":301,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:14",{"_index":300,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:20",{"_index":304,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:28",{"_index":306,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:35",{"_index":303,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/play",{"_index":380,"title":{},"body":{"classes/PlayTimes.html":{}}}],["lib/times.t",{"_index":506,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/tracker.t",{"_index":414,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:13",{"_index":420,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:7",{"_index":416,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:9",{"_index":418,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/verifier.t",{"_index":424,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"miscellaneous/functions.html":{}}}],["lib/verifier.ts:17",{"_index":427,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:26",{"_index":431,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:7",{"_index":450,"title":{},"body":{"classes/VerifyError.html":{}}}],["librari",{"_index":534,"title":{},"body":{"index.html":{}}}],["log",{"_index":415,"title":{},"body":{"classes/Tracker.html":{}}}],["loos",{"_index":257,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["loosestrategi",{"_index":265,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["magic",{"_index":554,"title":{},"body":{"index.html":{}}}],["make",{"_index":478,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["match",{"_index":11,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matched(left",{"_index":22,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher",{"_index":33,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.t",{"_index":7,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:12",{"_index":366,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:15",{"_index":214,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:24",{"_index":215,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:4",{"_index":16,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matcher.ts:5",{"_index":87,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matcher.ts:6",{"_index":365,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:7",{"_index":231,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matcher.ts:9",{"_index":24,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/argu",{"_index":6,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/const",{"_index":86,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matchers/express",{"_index":60,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{}}}],["matchers/factori",{"_index":62,"title":{},"body":{"classes/CallCounter.html":{}}}],["matchers/factories.t",{"_index":525,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matchers/get.properti",{"_index":230,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matchers/method",{"_index":363,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["matchers/named.method",{"_index":377,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["matchers/set.properti",{"_index":401,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["matter",{"_index":659,"title":{},"body":{"index.html":{}}}],["messag",{"_index":445,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["method",{"_index":9,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["method(1",{"_index":630,"title":{},"body":{"index.html":{}}}],["method(arg1",{"_index":634,"title":{},"body":{"index.html":{}}}],["method.property.integrationtests.t",{"_index":619,"title":{},"body":{"index.html":{}}}],["methodexpress",{"_index":179,"title":{"classes/MethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["methodexpression(arg",{"_index":322,"title":{},"body":{"classes/Interceptor.html":{}}}],["methodexpression:11",{"_index":182,"title":{},"body":{"classes/ExpectedMethodExpression.html":{}}}],["methodexpressionformatt",{"_index":193,"title":{"classes/MethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{}}}],["methodexpressionmatch",{"_index":212,"title":{"classes/MethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{}}}],["methodformatt",{"_index":192,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["methodformatterfactori",{"_index":516,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methodmatcherfactori",{"_index":517,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methodnam",{"_index":279,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["minimalist",{"_index":559,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":501,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":467,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mock(mocknam",{"_index":577,"title":{},"body":{"index.html":{}}}],["mock.object",{"_index":599,"title":{},"body":{"index.html":{}}}],["mock.verify(inst",{"_index":601,"title":{},"body":{"index.html":{}}}],["mockbehavior",{"_index":246,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"miscellaneous/enumerations.html":{}}}],["mockbehavior.loos",{"_index":275,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["mockbehavior.strict",{"_index":273,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"index.html":{}}}],["mockdescript",{"_index":134,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["mocknam",{"_index":124,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["modul",{"_index":671,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moq",{"_index":110,"title":{},"body":{"classes/DefinedSetups.html":{},"index.html":{}}}],["moq.t",{"_index":530,"title":{},"body":{"index.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named.method",{"_index":202,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["named.method.integrationtests.t",{"_index":633,"title":{},"body":{"index.html":{}}}],["namedmethodexpress",{"_index":180,"title":{"classes/NamedMethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["namedmethodexpression(nam",{"_index":317,"title":{},"body":{"classes/Interceptor.html":{}}}],["namedmethodexpression:2",{"_index":183,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpression:4",{"_index":184,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpressionformatt",{"_index":195,"title":{"classes/NamedMethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{}}}],["namedmethodexpressionmatch",{"_index":213,"title":{"classes/NamedMethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["namedmethodformatt",{"_index":194,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["namedmethodformatterfactori",{"_index":518,"title":{},"body":{"miscellaneous/functions.html":{}}}],["namedmethodmatcherfactori",{"_index":519,"title":{},"body":{"miscellaneous/functions.html":{}}}],["need",{"_index":477,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["never",{"_index":383,"title":{},"body":{"classes/PlayTimes.html":{}}}],["new",{"_index":68,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/It.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["now",{"_index":471,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":482,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":324,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["number",{"_index":58,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["number|ani",{"_index":605,"title":{},"body":{"index.html":{}}}],["object",{"_index":76,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/Interceptor.html":{},"changelog.html":{},"index.html":{}}}],["object.getprototypeof",{"_index":475,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["object.method",{"_index":600,"title":{},"body":{"index.html":{}}}],["object.method(1",{"_index":649,"title":{},"body":{"index.html":{}}}],["object.properti",{"_index":617,"title":{},"body":{"index.html":{}}}],["object.setprototypeof",{"_index":476,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onc",{"_index":384,"title":{},"body":{"classes/PlayTimes.html":{}}}],["oper",{"_index":480,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["option",{"_index":21,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["origin",{"_index":550,"title":{},"body":{"index.html":{}}}],["out",{"_index":567,"title":{},"body":{"index.html":{}}}],["overview",{"_index":672,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["paramet",{"_index":17,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":660,"title":{},"body":{"index.html":{}}}],["pass",{"_index":443,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["play",{"_index":393,"title":{},"body":{"classes/PlayTimes.html":{},"changelog.html":{}}}],["playtim",{"_index":379,"title":{"classes/PlayTimes.html":{}},"body":{"classes/PlayTimes.html":{}}}],["pointer",{"_index":596,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["preced",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["predic",{"_index":31,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"changelog.html":{}}}],["predicates.t",{"_index":282,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["predicates.ts:1",{"_index":283,"title":{},"body":{"interfaces/IPredicate.html":{}}}],["predicates.ts:11",{"_index":354,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:15",{"_index":355,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:19",{"_index":356,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:6",{"_index":352,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:7",{"_index":353,"title":{},"body":{"classes/It.html":{}}}],["pretti",{"_index":563,"title":{},"body":{"index.html":{}}}],["print",{"_index":493,"title":{},"body":{"changelog.html":{}}}],["privat",{"_index":93,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["product",{"_index":538,"title":{},"body":{"index.html":{}}}],["project",{"_index":543,"title":{},"body":{"index.html":{}}}],["properti",{"_index":92,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Tracker.html":{},"index.html":{}}}],["property1",{"_index":572,"title":{},"body":{"index.html":{}}}],["property2",{"_index":573,"title":{},"body":{"index.html":{}}}],["property3",{"_index":574,"title":{},"body":{"index.html":{}}}],["property4",{"_index":575,"title":{},"body":{"index.html":{}}}],["property4nam",{"_index":576,"title":{},"body":{"index.html":{}}}],["prototyp",{"_index":260,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"changelog.html":{},"index.html":{}}}],["prototype[methodnam",{"_index":349,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["prototypeof",{"_index":298,"title":{},"body":{"classes/Interceptor.html":{},"changelog.html":{},"index.html":{}}}],["prototypeof(prototyp",{"_index":305,"title":{},"body":{"classes/Interceptor.html":{}}}],["prototypeof(testobject",{"_index":668,"title":{},"body":{"index.html":{}}}],["proxi",{"_index":170,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["proxy(funct",{"_index":169,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["proxy:ani",{"_index":158,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["public",{"_index":10,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["quick",{"_index":549,"title":{},"body":{"index.html":{}}}],["rang",{"_index":504,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["recommend",{"_index":540,"title":{},"body":{"index.html":{}}}],["refactor",{"_index":557,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":144,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflect(express",{"_index":147,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflectedinfo",{"_index":142,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflector",{"_index":428,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["reflector.t",{"_index":141,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/variables.html":{}}}],["reflector.ts:15",{"_index":145,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:17",{"_index":146,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:41",{"_index":149,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:7",{"_index":238,"title":{},"body":{"interfaces/IExpectedExpression.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":413,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["result.substr(0",{"_index":412,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["return",{"_index":26,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["returns('cal",{"_index":622,"title":{},"body":{"index.html":{}}}],["returns(()=>{console.log('th",{"_index":598,"title":{},"body":{"index.html":{}}}],["returns(1",{"_index":580,"title":{},"body":{"index.html":{}}}],["returns(100",{"_index":582,"title":{},"body":{"index.html":{}}}],["returns(fals",{"_index":588,"title":{},"body":{"index.html":{}}}],["returns(new",{"_index":639,"title":{},"body":{"index.html":{}}}],["returns(tru",{"_index":610,"title":{},"body":{"index.html":{}}}],["returns(undefined);mockbehavior.loos",{"_index":664,"title":{},"body":{"index.html":{}}}],["right",{"_index":23,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["right.length",{"_index":39,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["right[index",{"_index":44,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["rightexpress",{"_index":233,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.argu",{"_index":369,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["rightexpression.nam",{"_index":235,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.valu",{"_index":404,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["rvalu",{"_index":43,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["save",{"_index":547,"title":{},"body":{"index.html":{}}}],["separ",{"_index":541,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":385,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequence(sequ",{"_index":390,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequence[index",{"_index":394,"title":{},"body":{"classes/PlayTimes.html":{}}}],["set",{"_index":164,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"index.html":{}}}],["set.properti",{"_index":201,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["set.property.integrationtests.t",{"_index":604,"title":{},"body":{"index.html":{}}}],["set/read",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["setbehaviorstrategi",{"_index":244,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"classes/InterceptorCallbacks.html":{}}}],["setbehaviorstrategy(behavior",{"_index":245,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["setbehaviorstrategy(mockbehavior.loos",{"_index":654,"title":{},"body":{"index.html":{}}}],["setbehaviorstrategy(mockbehavior.strict);th",{"_index":655,"title":{},"body":{"index.html":{}}}],["setpropertyexpress",{"_index":178,"title":{"classes/SetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["setpropertyexpression(nam",{"_index":319,"title":{},"body":{"classes/Interceptor.html":{}}}],["setpropertyexpression:25",{"_index":185,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpression:26",{"_index":186,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpressionformatt",{"_index":191,"title":{"classes/SetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["setpropertyexpressionmatch",{"_index":211,"title":{"classes/SetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["setpropertyformatt",{"_index":190,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["setpropertyformatterfactori",{"_index":520,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setpropertymatcherfactori",{"_index":521,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setprototypeof",{"_index":326,"title":{},"body":{"classes/Interceptor.html":{}}}],["setup",{"_index":94,"title":{},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"changelog.html":{},"index.html":{}}}],["setup(inst",{"_index":578,"title":{},"body":{"index.html":{}}}],["setup.invok",{"_index":341,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke((expression).argu",{"_index":339,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke([(expression).valu",{"_index":340,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setups.t",{"_index":91,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:13",{"_index":102,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:17",{"_index":106,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:26",{"_index":108,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:7",{"_index":97,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["signatur",{"_index":237,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["simpl",{"_index":552,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["spi",{"_index":665,"title":{},"body":{"index.html":{}}}],["start",{"_index":464,"title":{"changelog.html":{},"index.html":{}},"body":{"index.html":{}}}],["static",{"_index":284,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/PlayTimes.html":{}}}],["still",{"_index":560,"title":{},"body":{"index.html":{}}}],["strict",{"_index":256,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["strictstrategi",{"_index":263,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["string",{"_index":77,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["string.t",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strongli",{"_index":553,"title":{},"body":{"index.html":{}}}],["super(messag",{"_index":438,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["support",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":155,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/It.html":{}}}],["target",{"_index":159,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["templat",{"_index":529,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test",{"_index":350,"title":{},"body":{"classes/It.html":{},"classes/Verifier.html":{},"index.html":{}}}],["test(expect",{"_index":429,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["test(inst",{"_index":288,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["testobject",{"_index":667,"title":{},"body":{"index.html":{}}}],["tests.integr",{"_index":568,"title":{},"body":{"index.html":{}}}],["therefor",{"_index":555,"title":{},"body":{"index.html":{}}}],["this._prototyp",{"_index":308,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._prototype.prototyp",{"_index":325,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._proxi",{"_index":309,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values.hasownproperty(nam",{"_index":314,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values[nam",{"_index":315,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.activestrategi",{"_index":270,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.hasnamedmethod(methodnam",{"_index":272,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.intercepted(express",{"_index":271,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.argu",{"_index":225,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["this.argumentsmatcher.matched(left.argu",{"_index":368,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["this.callcounter.count(express",{"_index":442,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.constantformatter.format(express",{"_index":208,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.argu",{"_index":362,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.valu",{"_index":399,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["this.constantmatcher.matched(left.valu",{"_index":403,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["this.constantmatcher.matched(lvalu",{"_index":45,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["this.createobject",{"_index":310,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.definedsetups.get(express",{"_index":338,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.definedsetups.get(getpropertyexpress",{"_index":343,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["this.definedsetups.hasnamedmethod(methodnam",{"_index":348,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.expectedexpressionformatter.format(expect",{"_index":457,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.expressionformatter.format(expect",{"_index":133,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["this.expressionformatter.format(expression)}\\n",{"_index":411,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["this.expressionmatcher.matched(express",{"_index":64,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["this.expressionproxi",{"_index":171,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.getpropertyexpressionmatcher.matched(left",{"_index":216,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.getpropertyformatter.format(express",{"_index":204,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.interceptorcallbacks.hasnamedmethod(nam",{"_index":316,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(express",{"_index":321,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(getpropertyexpress",{"_index":313,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(namedmethodexpress",{"_index":318,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.log",{"_index":422,"title":{},"body":{"classes/Tracker.html":{}}}],["this.log.push(act",{"_index":421,"title":{},"body":{"classes/Tracker.html":{}}}],["this.loosestrategi",{"_index":276,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.methodexpressionmatcher.matched(left",{"_index":218,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.methodformatter.format(express",{"_index":206,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.namedmethodexpressionmatcher.matched(left",{"_index":219,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.namedmethodformatter.format(express",{"_index":207,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.predicate(inst",{"_index":290,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["this.reflectedinfo",{"_index":160,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.reflector.reflect(expect",{"_index":441,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.setpropertyexpressionmatcher.matched(left",{"_index":217,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.setpropertyformatter.format(express",{"_index":205,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.setup",{"_index":112,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.setups.unshift([key",{"_index":111,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.strictstrategi",{"_index":274,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.trackedexpressionsformatter.format(trackedexpress",{"_index":459,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.tracker.add(express",{"_index":337,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.verifyformatter.format(express",{"_index":446,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["thisarg",{"_index":167,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["throw",{"_index":448,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["throws(new",{"_index":592,"title":{},"body":{"index.html":{}}}],["time",{"_index":430,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["time(",{"_index":138,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["times.exactly(1",{"_index":632,"title":{},"body":{"index.html":{}}}],["times.messag",{"_index":447,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.never());mock",{"_index":602,"title":{},"body":{"index.html":{}}}],["times.onc",{"_index":631,"title":{},"body":{"index.html":{}}}],["times.once());mock",{"_index":618,"title":{},"body":{"index.html":{}}}],["times.t",{"_index":381,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.test(callcount",{"_index":444,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.ts:12",{"_index":388,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:16",{"_index":389,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:25",{"_index":391,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:3",{"_index":387,"title":{},"body":{"classes/PlayTimes.html":{}}}],["timesmessag",{"_index":122,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["timesmessage.tolowercas",{"_index":136,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["track",{"_index":454,"title":{},"body":{"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["trackedexpress",{"_index":408,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatt",{"_index":405,"title":{"classes/TrackedExpressionsFormatter.html":{}},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatter(expressionformatterfactori",{"_index":410,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["trackedexpressionsformatterfactori",{"_index":409,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["trackedexpressionsmessag",{"_index":458,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["tracker",{"_index":252,"title":{"classes/Tracker.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Tracker.html":{},"miscellaneous/functions.html":{}}}],["tri",{"_index":289,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["true",{"_index":37,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"index.html":{}}}],["truesponsor",{"_index":669,"title":{},"body":{"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealias",{"_index":674,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror",{"_index":657,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":81,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["typescript",{"_index":531,"title":{},"body":{"index.html":{}}}],["unam",{"_index":236,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["undefin",{"_index":114,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["unset",{"_index":656,"title":{},"body":{"index.html":{}}}],["us",{"_index":499,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["usag",{"_index":564,"title":{},"body":{"index.html":{}}}],["v2.1.0",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["v2.3.0",{"_index":470,"title":{},"body":{"changelog.html":{}}}],["v2.3.1",{"_index":481,"title":{},"body":{"changelog.html":{}}}],["v2.4.0",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["v2.5.0",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["v2.5.1",{"_index":494,"title":{},"body":{"changelog.html":{}}}],["v2.6.0",{"_index":497,"title":{},"body":{"changelog.html":{}}}],["v2.6.1",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["valu",{"_index":99,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Tracker.html":{},"index.html":{}}}],["value.play",{"_index":113,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["values[0",{"_index":638,"title":{},"body":{"index.html":{}}}],["values[1",{"_index":642,"title":{},"body":{"index.html":{}}}],["values[2",{"_index":647,"title":{},"body":{"index.html":{}}}],["var",{"_index":157,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["variabl",{"_index":677,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifi",{"_index":423,"title":{"classes/Verifier.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["verifier(new",{"_index":440,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifierfactori",{"_index":439,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"miscellaneous/functions.html":{}}}],["verifyerror",{"_index":435,"title":{"classes/VerifyError.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyerror(messag",{"_index":449,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyformatt",{"_index":426,"title":{"classes/VerifyFormatter.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["verifyformatter(expectedexpressionformatterfactori",{"_index":455,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["verifyformatterfactori",{"_index":433,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":104,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["want",{"_index":661,"title":{},"body":{"index.html":{}}}],["without",{"_index":652,"title":{},"body":{"index.html":{}}}],["work",{"_index":479,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["write",{"_index":585,"title":{},"body":{"index.html":{}}}],["written",{"_index":616,"title":{},"body":{"index.html":{}}}],["ye",{"_index":126,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Interceptor.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ArgumentsMatcher.html":{"url":"classes/ArgumentsMatcher.html","title":"class - ArgumentsMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArgumentsMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/arguments-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/arguments-matcher.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any[], right: (any | It)[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/arguments-matcher.ts:9\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    (any | It)[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: any[], right: (any|It)[]): boolean{\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        let matched = true;\n        left.forEach((lvalue, index) =>{\n            const rvalue = right[index];\n            matched = this.constantMatcher.matched(lvalue, rvalue) === true ? matched : false;\n        });\n\n        return matched;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallCounter.html":{"url":"classes/CallCounter.html","title":"class - CallCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CallCounter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/call-counter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                count\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/call-counter.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        count(expected: ExpectedExpressions, expressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/call-counter.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from './expected-expressions/expected-expressions';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\n\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count(expected: ExpectedExpressions, expressions: Expressions[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true)\n                count += 1;\n        }\n\n        return count;\n    }\n}\n\nexport function callCounterFactory(): CallCounter {\n    return new CallCounter(expressionMatcherFactory());\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantFormatter.html":{"url":"classes/ConstantFormatter.html","title":"class - ConstantFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/constant-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(object: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/constant-formatter.ts:5\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantFormatter {\n\n    public format(object: any|It): string {\n        if (object instanceof It) return `It.Is(${(object as It).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const index in object)\n                description.push(new ConstantFormatter().format(object[index]));\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantMatcher.html":{"url":"classes/ConstantMatcher.html","title":"class - ConstantMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/constant-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any, right: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/constant-matcher.ts:5\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantMatcher {\n\n    public matched(left: any, right: any|It): boolean {\n        if (right instanceof It)\n            return (right as It).test(left);\n        return left === right;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefinedSetups.html":{"url":"classes/DefinedSetups.html","title":"class - DefinedSetups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefinedSetups\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/defined-setups.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                setups\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/defined-setups.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            setups\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setups:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/defined-setups.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(key: ExpectedExpressions, setup: ISetupInvoke)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        setup\n                                                        \n                                                                    ISetupInvoke\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:17\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetupInvoke\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:26\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExpectedExpressions, ExpectedNamedMethodExpression } from \"./expected-expressions/expected-expressions\";\nimport { ExpressionMatcher } from \"./expression-matchers/expression-matcher\";\nimport { Expressions } from \"./expressions\";\nimport { ISetupInvoke } from \"./moq\";\n\nexport class DefinedSetups {\n    private setups: [ExpectedExpressions, ISetupInvoke][] = [];\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public add(key: ExpectedExpressions, setup: ISetupInvoke): void {\n        this.setups.unshift([key, setup]);\n    }\n\n    public get(expression: Expressions): ISetupInvoke {\n        for (const [key, value] of this.setups) {\n            if (this.expressionMatcher.matched(expression, key) === true && value.playable())\n                return value;\n        }\n\n        return undefined;\n    }\n\n    public hasNamedMethod(name: string): boolean {\n        for (const [key] of this.setups) {\n            if (key instanceof ExpectedNamedMethodExpression && (key as ExpectedNamedMethodExpression).name === name)\n                return true;\n        }\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionFormatter.html":{"url":"classes/ExpectedExpressionFormatter.html","title":"class - ExpectedExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expected-expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expected-expression-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expected-expression-formatter.ts:15\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\n\nexport function expectedExpressionFormatterFactory (): ExpectedExpressionFormatter {\n    return new ExpectedExpressionFormatter(expressionFormatterFactory());\n}\n\nexport class ExpectedExpressionFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\n        const expressionDescription = this.expressionFormatter.format(expected);\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : '';\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionReflector.html":{"url":"classes/ExpectedExpressionReflector.html","title":"class - ExpectedExpressionReflector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionReflector\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                reflectedInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                expressionProxy\n                            \n                            \n                                    Public\n                                reflect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reflectedInfo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reflectedInfo:     \n\n                    \n                \n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            expressionProxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        expressionProxy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:17\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reflect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reflect(expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:41\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ExpectedExpressions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedGetPropertyExpression.html":{"url":"classes/ExpectedGetPropertyExpression.html","title":"class - ExpectedGetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedGetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     GetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in GetPropertyExpression:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMethodExpression.html":{"url":"classes/ExpectedMethodExpression.html","title":"class - ExpectedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in MethodExpression:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNamedMethodExpression.html":{"url":"classes/ExpectedNamedMethodExpression.html","title":"class - ExpectedNamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NamedMethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedSetPropertyExpression.html":{"url":"classes/ExpectedSetPropertyExpression.html","title":"class - ExpectedSetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedSetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionFormatter.html":{"url":"classes/ExpressionFormatter.html","title":"class - ExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyFormatter: GetPropertyExpressionFormatter, setPropertyFormatter: SetPropertyExpressionFormatter, methodFormatter: MethodExpressionFormatter, namedMethodFormatter: NamedMethodExpressionFormatter, constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expression-formatter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    getPropertyFormatter\n                                                  \n                                                        \n                                                                    GetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    setPropertyFormatter\n                                                  \n                                                        \n                                                                    SetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    methodFormatter\n                                                  \n                                                        \n                                                                    MethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    namedMethodFormatter\n                                                  \n                                                        \n                                                                    NamedMethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: Expressions | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expression-formatter.ts:22\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, SetPropertyExpression, NamedMethodExpression,\n    MethodExpression\n} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {GetPropertyExpressionFormatter} from './get.property-formatter';\nimport {SetPropertyExpressionFormatter} from './set.property-formatter';\nimport {MethodExpressionFormatter} from './method-formatter';\nimport {NamedMethodExpressionFormatter} from './named.method-formatter';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: Expressions|It): string {\n        if (expression instanceof GetPropertyExpression) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyExpression) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof MethodExpression) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodExpression) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionMatcher.html":{"url":"classes/ExpressionMatcher.html","title":"class - ExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/expression-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyExpressionMatcher: GetPropertyExpressionMatcher, setPropertyExpressionMatcher: SetPropertyExpressionMatcher, methodExpressionMatcher: MethodExpressionMatcher, namedMethodExpressionMatcher: NamedMethodExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/expression-matcher.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    getPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    GetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    setPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    SetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    methodExpressionMatcher\n                                                  \n                                                        \n                                                                    MethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    namedMethodExpressionMatcher\n                                                  \n                                                        \n                                                                    NamedMethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: Expressions, right: ExpectedExpressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/expression-matcher.ts:24\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpressionMatcher} from './get.property-matcher';\nimport {SetPropertyExpressionMatcher} from './set.property-matcher';\nimport {MethodExpressionMatcher} from './method-matcher';\nimport {NamedMethodExpressionMatcher} from './named.method-matcher';\nimport {\n    Expressions, GetPropertyExpression, SetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from '../expressions';\nimport {\n    ExpectedExpressions, ExpectedGetPropertyExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression\n} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher) {\n\n    }\n\n    public matched(left: Expressions, right: ExpectedExpressions): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyExpression && (right instanceof ExpectedGetPropertyExpression || right instanceof It))\n            return this.getPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof SetPropertyExpression && (right instanceof ExpectedSetPropertyExpression || right instanceof It))\n            return this.setPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof MethodExpression && (right instanceof ExpectedMethodExpression || right instanceof It))\n            return this.methodExpressionMatcher.matched(left, >right);\n        if (left instanceof NamedMethodExpression && (right instanceof ExpectedNamedMethodExpression || right instanceof It))\n            return this.namedMethodExpressionMatcher.matched(left, >right);\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpression.html":{"url":"classes/GetPropertyExpression.html","title":"class - GetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionFormatter.html":{"url":"classes/GetPropertyExpressionFormatter.html","title":"class - GetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/get.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: GetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/get.property-formatter.ts:5\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\n\nexport class GetPropertyExpressionFormatter{\n\n    public format(expression: GetPropertyExpression): string{\n        return `Getter of \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionMatcher.html":{"url":"classes/GetPropertyExpressionMatcher.html","title":"class - GetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/get.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/get.property-matcher.ts:7\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedGetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ExpectedGetPropertyExpression} from '../expected-expressions/expected-expressions';\n\nexport class GetPropertyExpressionMatcher{\n\n    public matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpectedExpression.html":{"url":"interfaces/IExpectedExpression.html","title":"interface - IExpectedExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpectedExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void | any | It\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:7\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacks.html":{"url":"interfaces/IInterceptorCallbacks.html","title":"interface - IInterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacks\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n            \n                Extends\n            \n            \n                    IInterceptorCallbacksStrategy\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setBehaviorStrategy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:18\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacksStrategy.html":{"url":"interfaces/IInterceptorCallbacksStrategy.html","title":"interface - IInterceptorCallbacksStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacksStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasNamedMethod\n                                \n                                \n                                    intercepted\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:14\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPredicate.html":{"url":"interfaces/IPredicate.html","title":"interface - IPredicate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPredicate\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     boolean\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:1\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptor.html":{"url":"classes/Interceptor.html","title":"class - Interceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptor\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _prototype\n                            \n                            \n                                    Private\n                                _proxy\n                            \n                            \n                                    Private\n                                _values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createObject\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(interceptorCallbacks: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    interceptorCallbacks\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _prototype\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _prototype:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _proxy:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _values:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createObject\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createObject()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:35\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:20\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:28\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from './expressions';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks/interceptor-callbacks';\n\ndeclare var Proxy: any;\n\nexport class Interceptor {\n\n\n    private _proxy: T;\n    private _prototype: any;\n    private _values = {};\n\n    constructor(private interceptorCallbacks: IInterceptorCallbacksStrategy) {\n        this._prototype = Function;\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    public prototypeof(prototype?: any): any {\n        if (prototype !== undefined)\n            this._prototype = prototype;\n\n        return this._prototype;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => {\n                const getPropertyExpression = new GetPropertyExpression(name);\n                const getPropertyResult = this.interceptorCallbacks.intercepted(getPropertyExpression);\n\n                if (this._values.hasOwnProperty(name) === true)\n                    return this._values[name];\n\n                if (this.interceptorCallbacks.hasNamedMethod(name, this._prototype) === false)\n                    return getPropertyResult;\n\n                return (...args) => {\n                    const namedMethodExpression = new NamedMethodExpression(name, args);\n                    return this.interceptorCallbacks.intercepted(namedMethodExpression);\n                }\n            },\n\n            set: (target, name, value) => {\n                const expression = new SetPropertyExpression(name, value);\n                const accepted = this.interceptorCallbacks.intercepted(expression);\n                if (accepted === true || accepted === undefined) {\n                    this._values[name] = value;\n                }\n\n                return accepted === undefined ? true : accepted;\n            },\n\n            apply: (target, thisArg, args) => {\n                const expression = new MethodExpression(args);\n                return this.interceptorCallbacks.intercepted(expression);\n            },\n\n            getPrototypeOf: (target) => {\n                if (this._prototype === null)\n                    return null;\n                return this._prototype.prototype;\n            },\n            setPrototypeOf: (target, prototype) => {\n                if (prototype !== undefined)\n                    this._prototype = prototype;\n                return true;\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacks.html":{"url":"classes/InterceptorCallbacks.html","title":"class - InterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacks\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacks\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeStrategy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(strictStrategy: IInterceptorCallbacksStrategy, looseStrategy: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    strictStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    looseStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeStrategy:     IInterceptorCallbacksStrategy\n\n                    \n                \n                    \n                        \n                            Type :     IInterceptorCallbacksStrategy\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:41\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:37\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:45\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksLooseStrategy.html":{"url":"classes/InterceptorCallbacksLooseStrategy.html","title":"class - InterceptorCallbacksLooseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksLooseStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:32\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:16\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksLooseStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const getPropertyExpression = new GetPropertyExpression(methodName);\n        const setup = this.definedSetups.get(getPropertyExpression);\n        return setup !== undefined ? false : true;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksStrictStrategy.html":{"url":"classes/InterceptorCallbacksStrictStrategy.html","title":"class - InterceptorCallbacksStrictStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksStrictStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:29\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Expressions, MethodExpression, NamedMethodExpression, SetPropertyExpression} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksStrictStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const hasNamedMethod = this.definedSetups.hasNamedMethod(methodName);\n        if (hasNamedMethod === true) return true;\n\n        if (prototype !== null && prototype[methodName] instanceof Function)\n            return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/It.html":{"url":"classes/It.html","title":"class - It","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  It\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                predicate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Is\n                            \n                            \n                                    Static\n                                IsAny\n                            \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(predicate: IPredicate)\n                    \n                \n                        \n                            \n                                Defined in lib/expected-expressions/expression-predicates.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    predicate\n                                                  \n                                                        \n                                                                    IPredicate\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            predicate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        predicate:     IPredicate\n\n                    \n                \n                    \n                        \n                            Type :     IPredicate\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Is\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Is(predicate: IPredicate)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:11\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                        \n                                                                    IPredicate\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     It | any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            IsAny\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        IsAny()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:15\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     It | any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(instance: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:19\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        instance\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpression.html":{"url":"classes/MethodExpression.html","title":"class - MethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionFormatter.html":{"url":"classes/MethodExpressionFormatter.html","title":"class - MethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: MethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/method-formatter.ts:10\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {MethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class MethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: MethodExpression): string{\n        const value = this.constantFormatter.format(expression.arguments);\n        return `(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionMatcher.html":{"url":"classes/MethodExpressionMatcher.html","title":"class - MethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: MethodExpression, right: ExpectedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/method-matcher.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {MethodExpression} from '../expressions';\nimport {ExpectedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class MethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: MethodExpression, right: ExpectedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpression.html":{"url":"classes/NamedMethodExpression.html","title":"class - NamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionFormatter.html":{"url":"classes/NamedMethodExpressionFormatter.html","title":"class - NamedMethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/named.method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/named.method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: NamedMethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/named.method-formatter.ts:10\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {NamedMethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class NamedMethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: NamedMethodExpression): string{\n        const formatted: string[] = [];\n\n        expression.arguments.forEach(arg=>{\n            formatted.push(this.constantFormatter.format(arg));\n        });\n\n        const value = formatted.join(', ');\n        return `${expression.name}(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionMatcher.html":{"url":"classes/NamedMethodExpressionMatcher.html","title":"class - NamedMethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/named.method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/named.method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/named.method-matcher.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedNamedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {NamedMethodExpression} from '../expressions';\nimport {ExpectedNamedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class NamedMethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name)\n            return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlayTimes.html":{"url":"classes/PlayTimes.html","title":"class - PlayTimes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlayTimes\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/play-times.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Exactly\n                            \n                            \n                                    Static\n                                Never\n                            \n                            \n                                    Static\n                                Once\n                            \n                            \n                                    Static\n                                Sequence\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Exactly\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Exactly(count: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:3\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Never()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Once()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:16\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Sequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Sequence(sequence: boolean[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:25\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    boolean[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PlayTimes {\n\n    public static Exactly(count: number): () => boolean {\n        let invoked = 0;\n        return () => {\n            if (invoked >= count) return false;\n            invoked++;\n            return true;\n        };\n    }\n\n    public static Never(): () => boolean {\n        return () => false;\n    }\n\n    public static Once(): () => boolean {\n        let played = false;\n        return () => {\n            if (played) return false;\n            played = true;\n            return true;\n        };\n    }\n\n    public static Sequence(sequence: boolean[]): () => boolean {\n        let index = 0;\n        return () => {\n            const value = sequence[index];\n            index++;\n            return value;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpression.html":{"url":"classes/SetPropertyExpression.html","title":"class - SetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    value\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionFormatter.html":{"url":"classes/SetPropertyExpressionFormatter.html","title":"class - SetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/set.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/set.property-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/set.property-formatter.ts:10\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {SetPropertyExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class SetPropertyExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: SetPropertyExpression): string{\n        const value = this.constantFormatter.format(expression.value);\n        return `Assignment of ${value} to property \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionMatcher.html":{"url":"classes/SetPropertyExpressionMatcher.html","title":"class - SetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/set.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/set.property-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/set.property-matcher.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedSetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedSetPropertyExpression} from '../expected-expressions/expected-expressions';\nimport {SetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class SetPropertyExpressionMatcher{\n\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackedExpressionsFormatter.html":{"url":"classes/TrackedExpressionsFormatter.html","title":"class - TrackedExpressionsFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackedExpressionsFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/tracked-expressions-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/tracked-expressions-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(trackedExpressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/tracked-expressions-formatter.ts:15\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\nimport {Expressions} from '../expressions';\n\nexport function trackedExpressionsFormatterFactory (): TrackedExpressionsFormatter {\n    return new TrackedExpressionsFormatter(expressionFormatterFactory());\n}\n\nexport class TrackedExpressionsFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expressions[]): string {\n        let result: string = '';\n        for (const expression of trackedExpressions) {\n            result += `${this.expressionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tracker.html":{"url":"classes/Tracker.html","title":"class - Tracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tracker\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/tracker.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            log\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        log:     Expressions[]\n\n                    \n                \n                    \n                        \n                            Type :     Expressions[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/tracker.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:9\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                        \n                                                                    MethodExpression | GetPropertyExpression | SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     []\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, SetPropertyExpression, GetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from './expressions';\n\nexport class Tracker{\n    private log: Expressions[] = [];\n\n    public add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression): void{\n        this.log.push(action);\n    }\n\n    public get(): Expressions[]{\n        return this.log;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Verifier.html":{"url":"classes/Verifier.html","title":"class - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Verifier\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: ExpectedExpressionReflector, callCounter: CallCounter, verifyFormatter: VerifyFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    reflector\n                                                  \n                                                        \n                                                                    ExpectedExpressionReflector\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    callCounter\n                                                  \n                                                        \n                                                                    CallCounter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    verifyFormatter\n                                                  \n                                                        \n                                                                    VerifyFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/verifier.ts:26\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyError.html":{"url":"classes/VerifyError.html","title":"class - VerifyError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyError\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyFormatter.html":{"url":"classes/VerifyFormatter.html","title":"class - VerifyFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/verify-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expectedExpressionFormatter: ExpectedExpressionFormatter, trackedExpressionsFormatter: TrackedExpressionsFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/verify-formatter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expectedExpressionFormatter\n                                                  \n                                                        \n                                                                    ExpectedExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    trackedExpressionsFormatter\n                                                  \n                                                        \n                                                                    TrackedExpressionsFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/verify-formatter.ts:18\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {Expressions} from '../expressions';\nimport {ExpectedExpressionFormatter, expectedExpressionFormatterFactory} from './expected-expression-formatter';\nimport {TrackedExpressionsFormatter, trackedExpressionsFormatterFactory} from './tracked-expressions-formatter';\n\nexport function verifyFormatterFactory(): VerifyFormatter {\n    return new VerifyFormatter(expectedExpressionFormatterFactory(), trackedExpressionsFormatterFactory());\n}\n\nexport class VerifyFormatter {\n\n    constructor(\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string): string {\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\n        const delimiter = '-------------------------------------';\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nv2.1.0\n\nMock behaviours (strict and loose) have been introduced.\n\nv2.3.0\n\nMock prototype has been introduced. Now it is possible to set/read prototype of mock with prototypeof function.\nAlso mock object supports Object.getPrototypeOf and Object.setPrototypeOf functions. You may need it to make work \ninstanceof operator.\n\nv2.3.1\n\nThe NPM package is compiled as es5 code.\nv2.4.0\n\nIt.IsAny predicate has been introduced.\nv2.5.0\n\nIn case of false assertion the dump of the tracked expressions is printed.\nv2.5.1\n\nThe latest setup has precedence\nv2.6.0\n\nThe play setup has been introduced\n\nv2.6.1\n\nThe verify methods can be used in fluent call\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockBehavior   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            Range   (lib/.../times.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n        \n            \n                \n                    \n                        \n                        MockBehavior\n                    \n                \n                        \n                            \n                                 Strict\n                            \n                        \n                        \n                            \n                                 Loose\n                            \n                        \n            \n        \n\n    lib/times.ts\n    \n        \n            \n                \n                    \n                        \n                        Range\n                    \n                \n                        \n                            \n                                 Exclusive\n                            \n                        \n                        \n                            \n                                 Inclusive\n                            \n                        \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            argumentsMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            callCounterFactory   (lib/.../call-counter.ts)\n                        \n                        \n                            expectedExpressionFormatterFactory   (lib/.../expected-expression-formatter.ts)\n                        \n                        \n                            expressionFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            expressionMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            format   (lib/.../format-string.ts)\n                        \n                        \n                            interceptorCallbacksFactory   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            methodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            methodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            setPropertyFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            setPropertyMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            trackedExpressionsFormatterFactory   (lib/.../tracked-expressions-formatter.ts)\n                        \n                        \n                            verifierFactory   (lib/.../verifier.ts)\n                        \n                        \n                            verifyFormatterFactory   (lib/.../verify-formatter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expression-matchers/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            argumentsMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nargumentsMatcherFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expressionMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionMatcherFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodMatcherFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodMatcherFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyMatcherFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/call-counter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            callCounterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ncallCounterFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/formatters/expected-expression-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expectedExpressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpectedExpressionFormatterFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/formatters/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionFormatterFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodFormatterFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodFormatterFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyFormatterFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/format-string.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \nformat(template: undefined, ...args: undefined)\n                    \n                \n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        template\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            interceptorCallbacksFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ninterceptorCallbacksFactory(definedSetups: undefined, tracker: undefined)\n                    \n                \n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        tracker\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/formatters/tracked-expressions-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackedExpressionsFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackedExpressionsFormatterFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/verifier.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifierFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifierFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/formatters/verify-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifyFormatterFactory()\n                    \n                \n\n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nmoq.ts\nMoq for Typescript. Inspired by c# Moq library.\nDocumentation https://dvabuzyarov.github.io/moq.ts/\nImportant\nThis implementation depends on Proxy object.\nSo if your production code is not compatible with this I would recommend you separate you production code and testing code into dedicated projects.\nIf you need help with this then ask me.\nInstall\nnpm install moq.ts --save-dev\nQuick start\nmoq.ts as the original Moq library is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).\nYou can find a pretty full set of usages in the integration tests. Check out tests.integration folder.\nMocking property of objects\n-\nmock-get.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedGetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property1: number;\n    property2: number;\n    property3: number;\n    property4: number;\n    method(): void;\n}\n\nconst property4Name = 'property4';\nconst mockName = 'mock name is optional';\nconst mock = new Mock(mockName)\n    .setup(instance => instance.property1)\n    .returns(1)\n\n    .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property2'))\n    .returns(100)\n\n    //let's deny any write operation on the property for all values\n    .setup(instance => {instance.property2 = It.Is(() => true)})\n    .returns(false)\n\n    .setup(instance => instance.property3)\n    .callback(()=> 10 + 10)\n\n    .setup(instance => instance[property4Name])\n    .throws(new Error('property4 access'))\n\n    //since a method is a property that holds a pointer to a function\n    .setup(instance => instance.method)\n    .returns(()=>{console.log('The method was called')});\n\nconst object = mock.object();\nobject.method();\n\nmock.verify(instance=> instance.property1, Times.Never());Mocking property setting\n-\nThe documentation on returned value from 'set hook' on Proxy object\nmock-set.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedSetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property: number|any;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => {instance.property = 1})\n    //true - allows the write operation\n    .returns(true)\n\n    .setup(instance => It.Is((expression: ExpectedSetPropertyExpression) => expression.name === 'property' && expression.value === 2))\n    //false - denies the write operation\n    .returns(false)\n\n    .setup(instance => {instance.property = It.Is(value => value === 3)})\n    // allows the write operation\n    .callback(()=> true)\n\n    .setup(instance => {instance.property = value})\n    .throws(new Error('an object has been written into property'));\n\n\nconst object = mock.object();\nobject.property = 1;\n\nmock.verify(instance=> {instance.property = 1}, Times.Once());Mocking functions\n-\nmock-method.property.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestFunction {\n    (arg: number|any): string;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => instance(1))\n    .returns('called with 1')\n\n    .setup(instance => instance(2))\n    .callback((argument)=> argument === 2 ? 'called with 2' : `called with ${argument}`)\n\n    .setup(instance => instance(value))\n    .throws(new Error('Argument is object with date'))\n\n    .setup(instance => instance(It.Is(value => value === 4)))\n    .returns('called with 4');\n\nconst method = mock.object();\nconst actual = method(1);\n\nmock.verify(instance => instance(1), Times.Once());\nmock.verify(instance => instance(It.Is(value=> value === 1)), Times.Exactly(1));\n\n Mocking functions of objects\n -\nmock-named.method.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestObject {\n    method(arg1: number, arg2: string): Date;\n}\n\nconst values = ['a', 'b', 'c'];\n\nconst mock = new Mock()\n    .setup(instance => instance.method(1, values[0]))\n    .returns(new Date(2016))\n\n    .setup(instance => instance.method(It.Is(value => value === 2), values[1]))\n    .callback((arg1, arg2)=> new Date(2017 + arg1))\n\n    .setup(instance => instance.method(3, It.Is(value => value === values[2])))\n    .throws(new Error('Invoking method with 3 and c'));\n\nconst object = mock.object();\nconst actual = object.method(1, 'a');\n\nmock.verify(instance => instance.method(2, 'a'), Times.Never());Mock behavior\nYou can control mock behavior when accessing to a property without a corresponding setup. \n    mock = new Mock()\n    .setBehaviorStrategy(MockBehavior.Loose)\n    //or\n    .setBehaviorStrategy(MockBehavior.Strict);The default behavior is strict.\nMockBehavior.Strict\nAccessing to an unset property will return undefined value;\nAccessing to an unset method of an object will throw TypeError exception; It does not matter if a method is a part of mocked type.\nIf you want to track a method you can define a default setup:\nconst mock = new Mock()\n    .setup(instance => instance.method(It.Is(()=>true), It.Is(()=>true)))\n    .returns(undefined);MockBehavior.Loose\nAccessing to an unset property or a method will return a pointer to a spy function;\nYou can call this function and it will be tracked.\nMock prototype\nIf you need to make work instanceof operator or you need to deal with prototype of the mock object you can \nuse prototypeof function of Mock class. Or you can use Object.getPrototypeOf or Object.setPrototypeOf functions\non mock object.\nclass TestObject implements ITestObject {\n\n}\n\nconst mock = new Mock()\n                .prototypeof(TestObject)\n                .object();\n\nmock.object() instanceof TestObject;// trueSponsored by 2BIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        40 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpectedExpressions   (lib/.../expected-expressions.ts)\n                        \n                        \n                            Expressions   (lib/.../expressions.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expected-expressions/expected-expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        ExpectedExpressions\n                    \n                \n                \n                    \n                        ExpectedExpressions:     ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It\n\n                    \n                \n            \n        \n\n    lib/expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        Expressions\n                    \n                \n                \n                    \n                        Expressions:     MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Proxy   (lib/.../interceptor.ts)\n                        \n                        \n                            Proxy   (lib/.../expected-expression-reflector.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    lib/expected-expressions/expected-expression-reflector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
