var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/ArgumentsMatcher.html",[0,0.332,1,2.345]],["body/classes/ArgumentsMatcher.html",[0,0.49,1,3.457,2,0.216,3,0.216,4,0.191,5,2.949,6,5.19,7,2.128,8,0.158,9,0.616,10,0.318,11,0.018,12,0.672,13,3.522,14,4.385,15,0.352,16,4.104,17,0.497,18,0.019,19,0.318,20,0.22,21,0.423,22,2.991,23,3.556,24,4.104,25,2.991,26,0.637,27,1.636,28,0.575,29,1.125,30,1.688,31,1.182,32,2.433,33,2.27,34,0.216,35,1.018,36,3.139,37,2.022,38,4.104,39,4.104,40,1.808,41,4.104,42,0.599,43,5.408,44,4.104,45,4.104,46,0.014]],["title/classes/CallCounter.html",[0,0.332,47,2.175]],["body/classes/CallCounter.html",[0,0.482,2,0.211,3,0.211,4,0.187,8,0.117,9,0.606,10,0.315,11,0.013,12,0.656,15,0.347,17,0.549,18,0.019,19,0.313,20,0.243,21,0.416,26,0.592,28,0.677,29,1.638,33,2.217,34,0.28,35,0.995,37,1.34,42,0.585,46,0.013,47,3.544,48,4.571,49,3.065,50,5.689,51,3.44,52,4.356,53,4.008,54,5.324,55,2.357,56,0.576,57,4.008,58,2.078,59,2.76,60,0.995,61,2.786,62,2.562,63,3.065,64,2.562,65,3.44,66,2.786,67,1.045,68,2.562,69,0.946,70,4.008]],["title/classes/ConstantFormatter.html",[0,0.332,71,2.029]],["body/classes/ConstantFormatter.html",[0,0.516,2,0.234,3,0.234,4,0.207,8,0.167,9,0.649,10,0.331,11,0.014,15,0.29,17,0.409,18,0.019,19,0.262,20,0.181,21,0.348,26,0.679,28,0.473,29,1.22,30,1.831,31,1.281,34,0.234,36,3.404,42,0.833,46,0.014,71,3.153,72,4.892,73,1.934,74,2.477,75,5.7,76,3.82,77,3.994,78,1.21,79,2.211,80,4.451,81,4.451,82,4.451,83,4.451,84,4.892,85,4.451,86,4.451]],["title/classes/ConstantMatcher.html",[0,0.332,14,2.345]],["body/classes/ConstantMatcher.html",[0,0.537,2,0.25,3,0.25,4,0.221,5,2.893,7,2.459,8,0.139,9,0.676,10,0.341,11,0.017,14,3.794,15,0.309,17,0.436,18,0.019,19,0.279,20,0.193,21,0.371,22,3.283,23,3.943,25,3.283,26,0.641,27,1.795,28,0.504,29,1.3,30,1.951,31,1.366,34,0.25,36,3.628,46,0.015,79,1.668,87,5.093,88,4.744,89,3.033]],["title/classes/DefinedSetups.html",[0,0.332,90,1.594]],["body/classes/DefinedSetups.html",[0,0.414,2,0.169,3,0.169,4,0.15,8,0.094,9,0.52,10,0.359,11,0.012,12,0.525,15,0.399,17,0.533,18,0.019,19,0.374,20,0.249,21,0.453,26,0.649,27,1.382,28,0.616,29,0.879,33,1.775,34,0.169,35,0.796,37,1.527,40,1.073,42,0.667,46,0.012,51,2.754,52,4.069,55,2.267,56,0.523,60,0.796,61,2.231,65,2.754,78,0.971,79,1.129,90,1.985,91,5.463,92,2.754,93,1.079,94,1.458,95,2.611,96,3.921,97,2.921,98,4.569,99,1.903,100,1.531,101,4.569,102,4.552,103,3.21,104,6.366,105,1.606,106,4.569,107,3.21,108,4.569,109,3.21,110,1.879,111,2.052,112,3.21,113,4.569,114,3.21,115,1.129,116,3.21]],["title/classes/ExpectedExpressionFormatter.html",[0,0.332,117,2.549]],["body/classes/ExpectedExpressionFormatter.html",[0,0.471,2,0.204,3,0.204,4,0.18,8,0.113,9,0.592,10,0.309,11,0.013,12,0.634,15,0.339,17,0.478,18,0.019,19,0.306,20,0.212,21,0.407,26,0.582,28,0.625,29,1.425,34,0.274,35,0.961,42,0.76,46,0.013,55,2.325,56,0.512,59,3.046,60,0.961,67,1.01,69,0.914,73,1.682,74,2.26,78,1.279,115,1.362,117,4.083,118,4.493,119,3.323,120,4.313,121,3.323,122,4.464,123,5.042,124,5.39,125,4.189,126,3.323,127,2.142,128,1.888,129,2.691,130,3.323,131,2.691,132,3.872,133,3.872,134,3.872,135,3.872,136,3.872,137,3.872,138,2.296,139,3.323]],["title/classes/ExpectedExpressionReflector.html",[0,0.332,140,1.902]],["body/classes/ExpectedExpressionReflector.html",[0,0.426,2,0.176,3,0.176,4,0.156,8,0.098,9,0.536,10,0.287,11,0.012,15,0.355,17,0.433,18,0.02,19,0.32,20,0.192,21,0.426,26,0.639,28,0.501,29,0.918,31,1.701,34,0.248,37,1.12,42,0.796,46,0.012,55,2.016,56,0.519,58,2.442,60,1.466,69,1.47,79,1.178,93,1.112,94,1.769,100,1.356,105,1.178,110,1.378,115,1.178,140,2.442,141,2.567,142,2.329,143,5.07,144,5.07,145,4.71,146,3.351,147,3.351,148,4.042,149,3.063,150,3.351,151,1.378,152,1.378,153,1.456,154,1.24,155,1.854,156,2.563,157,2.563,158,2.876,159,4.165,160,5.54,161,2.876,162,2.504,163,2.876,164,2.329,165,2.876,166,2.563,167,2.563,168,2.876,169,2.563,170,1.987,171,2.876,172,2.876]],["title/classes/ExpectedGetPropertyExpression.html",[0,0.332,151,1.509]],["body/classes/ExpectedGetPropertyExpression.html",[0,0.622,2,0.236,3,0.236,4,0.209,8,0.131,10,0.301,11,0.015,15,0.292,18,0.019,19,0.371,20,0.233,28,0.609,31,1.29,34,0.362,46,0.015,55,1.658,56,0.448,60,1.112,78,1.045,93,1.351,110,2.355,141,1.947,151,2.595,152,2.355,153,2.487,173,2.656,174,2.984,175,2.011,176,2.864,177,4.48,178,1.648,179,1.648,180,1.732]],["title/classes/ExpectedMethodExpression.html",[0,0.332,153,1.594]],["body/classes/ExpectedMethodExpression.html",[0,0.623,2,0.237,3,0.237,4,0.21,8,0.132,10,0.303,11,0.015,15,0.294,18,0.019,20,0.234,28,0.611,31,1.298,34,0.362,46,0.015,55,1.669,56,0.449,60,1.119,93,1.357,110,2.364,141,1.959,151,2.364,152,2.364,153,2.749,173,2.674,174,2.99,175,1.739,176,2.883,178,1.655,179,1.918,180,1.739,181,3.085,182,4.51]],["title/classes/ExpectedNamedMethodExpression.html",[0,0.332,110,1.509]],["body/classes/ExpectedNamedMethodExpression.html",[0,0.615,2,0.228,3,0.228,4,0.202,8,0.127,10,0.345,11,0.014,15,0.364,18,0.019,19,0.365,20,0.252,28,0.595,31,1.245,34,0.358,46,0.014,55,1.601,56,0.438,60,1.073,78,1.021,93,1.321,110,2.552,141,1.879,151,2.302,152,2.302,153,2.431,173,2.564,174,2.952,175,1.693,176,3.577,178,1.611,179,1.611,180,2.055,181,3.024,183,4.325,184,4.325]],["title/classes/ExpectedSetPropertyExpression.html",[0,0.332,152,1.509]],["body/classes/ExpectedSetPropertyExpression.html",[0,0.615,2,0.228,3,0.228,4,0.202,8,0.127,10,0.345,11,0.014,15,0.364,18,0.019,19,0.365,20,0.252,28,0.595,31,1.245,34,0.358,46,0.014,55,1.601,56,0.438,60,1.073,78,1.021,93,1.321,100,1.786,110,2.302,141,1.879,151,2.302,152,2.552,153,2.431,173,2.564,174,2.952,175,1.693,176,3.577,178,1.956,179,1.611,180,1.693,185,4.325,186,4.325]],["title/classes/ExpressionFormatter.html",[0,0.332,120,2.345]],["body/classes/ExpressionFormatter.html",[0,0.45,2,0.191,3,0.191,4,0.169,8,0.106,9,0.647,10,0.299,11,0.013,12,0.594,15,0.324,17,0.457,18,0.019,19,0.293,20,0.203,21,0.389,26,0.671,28,0.721,29,0.994,30,1.492,31,1.044,32,2.15,34,0.191,35,0.9,46,0.013,56,0.554,71,3.749,73,1.575,74,2.162,78,0.908,79,2.252,94,1.675,115,1.275,120,3.181,128,3.123,175,1.505,178,1.432,179,1.432,180,1.505,187,4.874,188,3.626,189,4.248,190,5.68,191,4.248,192,5.68,193,4.248,194,5.68,195,4.248,196,3.626,197,4.975,198,3.181,199,3.626,200,3.112,201,3.112,202,3.112,203,3.626,204,3.626,205,3.626,206,3.626,207,3.626,208,3.626]],["title/classes/ExpressionMatcher.html",[0,0.332,52,2.345]],["body/classes/ExpressionMatcher.html",[0,0.416,2,0.171,3,0.171,4,0.151,5,2.607,7,1.68,8,0.095,9,0.609,10,0.282,11,0.015,12,0.53,15,0.3,17,0.423,18,0.019,19,0.271,20,0.187,21,0.36,22,2.544,23,4.04,25,3.532,26,0.665,27,1.391,28,0.698,29,1.26,30,1.333,31,0.933,33,3.22,34,0.171,35,0.804,37,1.537,40,1.083,46,0.012,52,2.94,55,2.154,56,0.499,60,0.804,61,3.716,79,2.487,94,1.465,110,1.892,115,1.139,151,1.892,152,1.892,153,1.998,175,1.391,178,1.324,179,1.324,180,1.391,200,2.781,201,2.781,202,2.781,209,3.24,210,4.438,211,4.564,212,4.564,213,4.564,214,3.24,215,3.24,216,3.24,217,3.24,218,3.24,219,3.24]],["title/classes/GetPropertyExpression.html",[0,0.332,175,1.11]],["body/classes/GetPropertyExpression.html",[0,0.61,2,0.222,3,0.222,4,0.197,8,0.123,10,0.355,11,0.014,12,0.69,15,0.359,17,0.388,18,0.019,19,0.42,20,0.249,21,0.33,34,0.355,46,0.014,56,0.33,78,1.285,93,1.3,100,1.214,162,2.818,175,1.854,178,1.585,179,1.585,180,1.665,181,2.684,220,2.501,221,2.696,222,4.218,223,4.218,224,3.634,225,3.826,226,2.931]],["title/classes/GetPropertyExpressionFormatter.html",[0,0.332,189,2.549]],["body/classes/GetPropertyExpressionFormatter.html",[0,0.554,2,0.262,3,0.262,4,0.232,8,0.146,9,0.697,10,0.349,11,0.016,15,0.325,17,0.458,18,0.018,19,0.293,20,0.203,21,0.39,26,0.606,28,0.53,34,0.262,46,0.016,56,0.479,73,2.166,74,2.659,76,4.279,78,1.117,175,2.089,189,4.254,198,3.913,227,5.253,228,4.986,229,3.813]],["title/classes/GetPropertyExpressionMatcher.html",[0,0.332,210,2.549]],["body/classes/GetPropertyExpressionMatcher.html",[0,0.516,2,0.234,3,0.234,4,0.207,5,2.779,7,2.308,8,0.13,9,0.649,10,0.331,11,0.017,15,0.29,17,0.409,18,0.019,19,0.262,20,0.181,21,0.348,22,3.153,23,3.879,25,2.462,26,0.657,27,1.724,28,0.669,29,1.562,30,1.831,31,1.281,34,0.234,37,1.488,40,1.488,42,0.65,46,0.014,56,0.446,60,1.105,79,1.565,89,2.845,151,2.727,175,2.006,210,3.962,230,4.892,231,4.451,232,4.451,233,3.093,234,3.404,235,3.404]],["title/interfaces/IExpectedExpression.html",[149,1.902,154,1.358]],["body/interfaces/IExpectedExpression.html",[0,0.334,2,0.194,3,0.194,4,0.172,8,0.108,10,0.194,11,0.013,18,0.02,19,0.296,21,0.394,26,0.638,28,0.536,29,1.012,31,1.774,34,0.265,37,1.235,42,0.838,46,0.013,55,1.865,56,0.448,58,2.613,60,0.917,69,1.522,79,1.299,93,1.354,94,1.381,100,1.451,105,1.772,110,1.52,115,1.299,140,1.915,141,1.605,142,2.568,143,3.171,144,3.171,148,3.171,149,2.973,151,1.52,152,1.52,153,1.605,154,1.865,155,2.788,156,2.825,157,2.825,158,3.171,159,4.386,160,5.711,161,3.171,162,2.637,163,3.171,164,2.568,165,3.171,166,2.825,167,2.825,168,3.171,169,2.825,170,2.19,171,3.171,172,3.171,236,3.171,237,3.171]],["title/interfaces/IInterceptorCallbacks.html",[154,1.358,238,2.029]],["body/interfaces/IInterceptorCallbacks.html",[0,0.303,2,0.176,3,0.176,4,0.156,8,0.098,9,0.535,10,0.311,11,0.012,15,0.306,17,0.307,18,0.019,19,0.197,20,0.136,21,0.261,26,0.616,27,1.422,28,0.661,34,0.327,35,0.83,42,0.687,46,0.012,56,0.504,67,0.872,69,1.284,78,0.858,90,2.043,94,1.288,95,1.304,105,2.187,154,2.013,174,2.043,238,3.009,239,2.438,240,2.043,241,1.982,242,3.344,243,3.268,244,4.16,245,3.687,246,3.343,247,3.78,248,2.803,249,1.982,250,2.043,251,2.556,252,1.982,253,2.556,254,2.323,255,2.137,256,2.137,257,3.006,258,3.006,259,2.501,260,3.006,261,1.982,262,2.788,263,4.16,264,2.556,265,4.16,266,2.556,267,2.556,268,1.63,269,2.556,270,4.16,271,2.556,272,2.556,273,2.556,274,2.556,275,2.556,276,2.556,277,2.556]],["title/interfaces/IInterceptorCallbacksStrategy.html",[154,1.358,242,1.902]],["body/interfaces/IInterceptorCallbacksStrategy.html",[0,0.279,2,0.162,3,0.162,4,0.144,8,0.09,9,0.505,10,0.299,11,0.011,15,0.37,17,0.478,18,0.019,19,0.306,20,0.212,21,0.406,26,0.641,27,1.573,28,0.641,34,0.317,35,0.764,42,0.648,46,0.011,56,0.548,67,0.803,69,1.227,78,1.038,90,1.927,94,1.215,95,1.201,97,2.836,105,2.119,154,1.924,174,1.338,238,2.454,239,2.948,240,2.471,241,1.826,242,3.255,244,3.392,245,3.082,247,3.083,248,2.728,249,1.826,250,1.927,251,2.355,252,1.826,253,2.355,254,2.14,255,1.969,256,1.969,257,3.323,258,3.323,259,2.771,260,3.323,261,1.826,262,2.63,263,3.976,264,2.355,265,3.976,266,2.355,267,2.355,268,1.501,269,2.355,270,3.976,271,2.355,272,2.355,273,2.355,274,2.355,275,2.355,276,2.355,277,2.355,278,3.083,279,2.63,280,3.08,281,2.14,282,3.08,283,3.08]],["title/interfaces/IPredicate.html",[154,1.358,284,2.549]],["body/interfaces/IPredicate.html",[0,0.394,2,0.229,3,0.229,4,0.203,8,0.127,10,0.328,11,0.014,18,0.019,26,0.674,27,1.882,30,1.79,31,1.253,34,0.296,37,1.878,40,1.455,42,0.636,46,0.017,58,3.226,69,1.326,93,1.469,115,1.53,141,1.891,154,2.08,155,3.108,224,2.58,236,3.735,237,3.735,284,4.57,285,3.328,286,3.905,287,3.735,288,3.735,289,3.735,290,3.735,291,3.735,292,3.735,293,3.735,294,3.735]],["title/classes/Interceptor.html",[0,0.332,250,1.594]],["body/classes/Interceptor.html",[0,0.466,2,0.132,3,0.132,4,0.117,8,0.074,9,0.435,10,0.307,11,0.01,12,0.412,15,0.395,17,0.351,18,0.02,19,0.303,20,0.225,21,0.403,26,0.68,28,0.406,34,0.132,35,0.624,37,1.722,40,1.276,42,0.852,46,0.01,56,0.361,58,3.142,67,0.656,69,1.308,77,3.226,84,2.158,93,0.901,94,1.863,99,2.263,100,1.595,115,1.948,127,1.391,156,1.923,157,1.923,159,4.237,162,2.122,164,1.747,166,1.923,167,1.923,169,1.923,170,1.491,175,1.155,178,0.724,179,0.724,180,1.155,240,1.092,242,2.671,250,2.005,259,2.681,262,2.263,295,1.923,296,3.276,297,2.653,298,3.817,299,2.158,300,5.153,301,5.153,302,5.153,303,5.153,304,2.44,305,2.514,306,3.817,307,3.276,308,2.514,309,2.514,310,2.514,311,2.514,312,2.919,313,2.514,314,1.391,315,1.747,316,5.833,317,4.615,318,2.514,319,2.514,320,2.514,321,2.514,322,2.514,323,3.817,324,2.514,325,2.514,326,2.514,327,2.514,328,2.514,329,3.817,330,5.54,331,3.817,332,2.514,333,2.514,334,2.514]],["title/classes/InterceptorCallbacks.html",[0,0.332,262,2.175]],["body/classes/InterceptorCallbacks.html",[0,0.365,2,0.143,3,0.143,4,0.126,8,0.079,9,0.46,10,0.359,11,0.01,12,0.443,15,0.405,17,0.526,18,0.019,19,0.336,20,0.244,21,0.447,26,0.632,27,1.46,28,0.608,34,0.301,35,0.672,42,0.59,46,0.01,56,0.534,67,0.706,69,1.139,78,0.976,90,1.754,93,0.953,94,1.466,95,1.056,97,2.581,105,2.109,154,1.494,174,1.177,238,2.67,239,3.222,240,2.7,241,1.606,242,3.496,243,2.805,244,3.691,245,3.392,247,3.354,248,2.606,249,1.606,250,1.754,251,2.071,252,1.606,253,2.071,254,1.882,255,1.731,256,1.731,257,3.085,258,3.085,259,2.63,260,3.085,261,1.606,262,2.861,263,4.09,264,2.071,265,4.375,266,2.071,267,2.071,268,1.968,269,4.09,270,3.691,271,2.071,272,2.071,273,2.071,274,2.071,275,2.071,276,2.071,277,2.071,278,2.805,279,2.393,281,1.882,335,2.708,336,4.037,337,2.708,338,2.708,339,2.708,340,2.708]],["title/classes/InterceptorCallbacksLooseStrategy.html",[0,0.332,249,2.175]],["body/classes/InterceptorCallbacksLooseStrategy.html",[0,0.413,2,0.169,3,0.169,4,0.149,8,0.094,9,0.519,10,0.358,11,0.012,12,0.524,15,0.399,17,0.532,18,0.019,19,0.341,20,0.236,21,0.453,26,0.674,27,1.38,28,0.616,34,0.169,35,0.795,37,1.07,40,1.07,42,0.776,46,0.012,56,0.556,69,0.756,78,0.97,79,1.868,90,2.764,94,0.877,95,2.386,97,2.916,105,1.604,115,1.868,175,1.38,178,1.313,179,1.313,180,1.38,239,3.172,240,2.659,242,2.754,248,2.907,249,2.704,250,1.391,257,2.916,258,2.916,259,2.443,260,2.916,268,2.224,278,3.17,279,2.704,281,2.225,314,1.771,341,2.748,342,2.748,343,3.202,344,3.202,345,3.202,346,3.202,347,2.748,348,2.748,349,3.914,350,2.748,351,2.748,352,3.202,353,3.202]],["title/classes/InterceptorCallbacksStrictStrategy.html",[0,0.332,252,2.175]],["body/classes/InterceptorCallbacksStrictStrategy.html",[0,0.412,2,0.168,3,0.168,4,0.149,8,0.093,9,0.517,10,0.358,11,0.012,12,0.522,15,0.398,17,0.531,18,0.019,19,0.34,20,0.235,21,0.452,26,0.691,27,1.375,28,0.614,34,0.168,35,0.791,37,1.771,40,1.065,42,0.664,46,0.012,56,0.556,67,0.831,78,0.967,79,2.031,90,2.759,94,0.873,95,2.066,97,3.693,105,1.598,115,1.598,178,1.309,179,1.309,180,1.375,239,3.167,240,2.654,242,2.747,248,2.904,250,1.385,252,2.695,257,2.906,258,2.906,259,2.656,260,2.906,268,2.216,278,3.159,279,2.695,281,2.215,307,2.735,314,1.763,342,2.735,347,2.735,348,2.735,349,3.901,350,2.735,351,2.735,354,2.735,355,3.187,356,3.187,357,3.187,358,3.187,359,3.187,360,3.187]],["title/classes/It.html",[0,0.415]],["body/classes/It.html",[0,0.439,2,0.184,3,0.184,4,0.163,8,0.102,9,0.552,10,0.353,11,0.012,12,0.572,15,0.412,17,0.581,18,0.019,19,0.328,20,0.266,21,0.436,26,0.664,27,1.686,30,2.691,31,1.884,34,0.255,37,1.622,40,1.169,42,0.511,46,0.016,58,3.392,69,1.145,93,1.145,115,1.229,141,2.843,154,1.294,155,2.684,224,2.073,284,4.828,285,2.674,286,4.547,287,4.164,288,3.001,289,5.165,290,4.164,291,3.001,292,3.001,293,3.001,294,3.001,361,3.372,362,3.496,363,3.496,364,3.496,365,3.496,366,3.496,367,3.496]],["title/classes/MethodExpression.html",[0,0.332,179,1.056]],["body/classes/MethodExpression.html",[0,0.612,2,0.225,3,0.225,4,0.199,8,0.125,10,0.356,11,0.014,12,0.699,15,0.361,17,0.392,18,0.019,19,0.384,20,0.251,21,0.334,34,0.356,46,0.014,56,0.334,78,1.125,93,1.31,100,1.229,162,3.001,175,1.679,178,1.598,179,1.775,180,1.679,181,3.299,220,2.532,224,3.656,225,3.857,226,3.857,368,5.55]],["title/classes/MethodExpressionFormatter.html",[0,0.332,193,2.549]],["body/classes/MethodExpressionFormatter.html",[0,0.526,2,0.241,3,0.241,4,0.214,8,0.134,9,0.661,10,0.336,11,0.015,12,0.751,15,0.378,17,0.534,18,0.019,19,0.342,20,0.236,21,0.454,26,0.575,28,0.618,32,2.719,34,0.241,35,1.138,42,0.67,46,0.015,56,0.454,71,3.909,73,1.992,74,2.524,78,1.06,100,1.672,128,2.235,179,1.93,193,4.037,198,3.714,369,5.472,370,3.507,371,3.507,372,3.187,373,4.585]],["title/classes/MethodExpressionMatcher.html",[0,0.332,212,2.549]],["body/classes/MethodExpressionMatcher.html",[0,0.497,1,4.415,2,0.221,3,0.221,4,0.196,5,2.984,7,2.18,8,0.123,9,0.625,10,0.322,11,0.016,12,0.688,15,0.358,17,0.505,18,0.019,19,0.323,20,0.224,21,0.43,22,3.039,23,3.82,25,2.326,26,0.606,27,1.662,28,0.69,29,1.505,30,1.73,31,1.211,33,2.326,34,0.221,35,1.044,42,0.614,46,0.014,56,0.43,60,1.044,79,1.479,89,2.688,153,2.82,179,1.868,181,2.05,212,3.819,233,2.922,374,5.252,375,3.609,376,3.216,377,3.216,378,4.205,379,3.609,380,3.609]],["title/classes/Mock.html",[0,0.332,381,1.902]],["body/classes/Mock.html",[0,0.371,2,0.11,3,0.11,4,0.097,8,0.061,9,0.375,10,0.374,11,0.008,12,0.54,15,0.411,17,0.496,18,0.019,19,0.378,20,0.246,21,0.459,26,0.636,28,0.658,29,0.571,34,0.174,42,0.789,46,0.008,55,0.771,56,0.484,58,1.71,60,0.517,62,1.331,63,1.592,69,1.1,77,2.576,78,0.986,90,2.205,93,0.779,94,1.696,95,2.288,102,2.292,111,1.331,115,0.732,127,2.265,140,2.123,149,3.208,174,1.433,176,3.862,221,2.108,238,2.576,240,0.905,243,2.292,245,2.761,248,2.791,250,2.743,259,0.957,261,1.235,268,1.015,304,2.108,312,2.522,314,2.808,315,1.447,381,2.415,382,1.592,383,4.464,384,2.83,385,2.799,386,2.082,387,2.082,388,2.082,389,2.082,390,2.83,391,3.997,392,2.082,393,1.447,394,4.912,395,2.082,396,2.082,397,2.83,398,2.082,399,1.787,400,2.83,401,2.082,402,3.132,403,2.83,404,3.33,405,2.082,406,1.447,407,1.447,408,2.108,409,1.955,410,1.787,411,1.787,412,1.787,413,1.787,414,1.787,415,1.787,416,1.787,417,1.787,418,1.787,419,1.787,420,1.592,421,1.787,422,1.787,423,1.787,424,1.787,425,1.787,426,1.787,427,1.787,428,1.787,429,1.787,430,1.787,431,1.787,432,1.787]],["title/classes/MockCore.html",[0,0.332,383,2.549]],["body/classes/MockCore.html",[0,0.364,2,0.107,3,0.107,4,0.095,8,0.059,9,0.368,10,0.372,11,0.008,12,0.529,15,0.408,17,0.491,18,0.019,19,0.381,20,0.244,21,0.455,26,0.632,28,0.653,29,0.556,34,0.17,42,0.78,46,0.008,55,0.751,56,0.48,58,1.675,60,0.504,62,1.298,63,1.552,67,0.843,69,1.084,77,2.54,78,0.975,90,2.603,93,0.763,94,1.683,95,2.267,102,2.246,105,1.136,111,1.298,115,0.714,127,2.227,140,2.599,149,3.184,174,0.882,221,1.298,238,3.098,240,0.882,243,2.246,245,2.722,248,2.914,250,2.724,259,0.933,261,1.203,268,1.576,299,1.742,304,2.066,312,2.472,314,2.954,315,1.411,381,2.38,382,1.552,383,2.798,384,2.773,385,3.184,390,2.773,391,3.94,393,1.411,394,5.019,397,2.773,399,1.742,400,2.773,402,3.079,403,2.773,404,3.308,406,1.411,407,1.411,408,2.066,409,1.916,410,1.742,411,2.773,412,3.456,413,3.456,414,3.456,415,1.742,416,1.742,417,1.742,418,1.742,419,1.742,420,1.552,421,1.742,422,1.742,423,1.742,424,1.742,425,1.742,426,1.742,427,1.742,428,1.742,429,1.742,430,1.742,431,1.742,432,1.742,433,2.03,434,3.232,435,2.03,436,2.03,437,2.03,438,2.03,439,2.03,440,2.03,441,2.03,442,2.03]],["title/classes/NamedMethodExpression.html",[0,0.332,180,1.11]],["body/classes/NamedMethodExpression.html",[0,0.604,2,0.215,3,0.215,4,0.19,8,0.119,10,0.368,11,0.014,12,0.668,15,0.393,17,0.375,18,0.019,19,0.417,20,0.261,21,0.319,34,0.351,46,0.014,56,0.319,78,1.275,93,1.272,100,1.175,162,3.065,175,1.629,178,1.551,179,1.551,180,1.824,181,3.251,220,2.419,221,2.608,224,3.575,225,3.743,226,2.835,443,5.386,444,4.08]],["title/classes/NamedMethodExpressionFormatter.html",[0,0.332,195,2.549]],["body/classes/NamedMethodExpressionFormatter.html",[0,0.516,2,0.234,3,0.234,4,0.207,8,0.13,9,0.649,10,0.331,11,0.014,12,0.729,15,0.371,17,0.524,18,0.019,19,0.335,20,0.232,21,0.446,26,0.564,28,0.606,32,2.639,34,0.234,35,1.105,42,0.833,46,0.014,56,0.446,71,3.879,73,1.934,74,2.732,78,1.148,100,1.281,128,2.17,180,2.006,195,3.962,198,3.644,370,3.404,371,3.404,372,3.093,445,5.397,446,4.451,447,4.451,448,4.451,449,4.451]],["title/classes/NamedMethodExpressionMatcher.html",[0,0.332,213,2.549]],["body/classes/NamedMethodExpressionMatcher.html",[0,0.492,1,4.396,2,0.218,3,0.218,4,0.193,5,2.962,7,2.147,8,0.121,9,0.619,10,0.32,11,0.016,12,0.678,15,0.354,17,0.5,18,0.019,19,0.32,20,0.221,21,0.425,22,3.009,23,3.804,25,2.291,26,0.639,27,1.646,28,0.686,29,1.491,30,1.704,31,1.192,33,2.291,34,0.218,35,1.028,40,1.384,42,0.605,46,0.014,56,0.425,60,1.028,79,1.456,89,2.648,110,2.654,180,1.951,181,2.019,213,3.781,233,2.878,234,3.167,235,3.167,375,3.554,376,3.167,377,3.167,379,3.554,380,3.554,450,5.213,451,4.141]],["title/classes/PlayTimes.html",[0,0.332,452,2.549]],["body/classes/PlayTimes.html",[0,0.44,2,0.185,3,0.185,4,0.163,8,0.163,9,0.553,10,0.317,11,0.012,15,0.392,17,0.447,18,0.02,19,0.286,20,0.198,21,0.38,26,0.715,27,2.151,34,0.185,37,1.865,40,2.014,42,0.512,46,0.012,50,4.171,59,2.893,64,3.107,100,1.399,279,3.308,286,4.984,393,3.878,452,3.378,453,5.431,454,3.008,455,4.171,456,5.171,457,5.171,458,4.861,459,3.505,460,3.505,461,3.505,462,4.861,463,3.505,464,4.267,465,3.505]],["title/classes/SequenceId.html",[0,0.332,466,2.345]],["body/classes/SequenceId.html",[0,0.525,2,0.241,3,0.241,4,0.213,8,0.134,9,0.66,10,0.335,11,0.015,15,0.378,18,0.019,20,0.186,26,0.63,34,0.305,42,0.667,46,0.015,59,3.582,64,3.706,67,1.192,69,1.079,93,1.369,94,1.744,99,2.709,100,1.989,155,3.207,466,4.28,467,4.425,468,3.176,469,6.696,470,4.57,471,4.57,472,4.57,473,3.176]],["title/classes/SetPropertyExpression.html",[0,0.332,178,1.056]],["body/classes/SetPropertyExpression.html",[0,0.604,2,0.215,3,0.215,4,0.19,8,0.119,10,0.368,11,0.014,12,0.668,15,0.393,17,0.375,18,0.019,19,0.417,20,0.261,21,0.319,34,0.351,46,0.014,56,0.319,78,1.275,93,1.272,100,1.972,162,2.772,175,1.629,178,1.736,179,1.551,180,1.629,181,2.626,220,2.419,221,2.608,224,3.575,225,3.743,226,2.835,474,4.08,475,4.08,476,4.08]],["title/classes/SetPropertyExpressionFormatter.html",[0,0.332,191,2.549]],["body/classes/SetPropertyExpressionFormatter.html",[0,0.523,2,0.239,3,0.239,4,0.212,8,0.133,9,0.657,10,0.334,11,0.015,12,0.743,15,0.376,17,0.531,18,0.019,19,0.339,20,0.235,21,0.451,26,0.572,28,0.614,32,2.692,34,0.239,35,1.127,42,0.663,46,0.015,56,0.451,71,3.899,73,1.972,74,2.508,78,1.054,93,1.072,100,1.662,128,2.213,178,1.923,191,4.012,198,3.69,229,3.472,370,3.472,371,3.472,372,3.155,477,5.447,478,4.54,479,4.54]],["title/classes/SetPropertyExpressionMatcher.html",[0,0.332,211,2.549]],["body/classes/SetPropertyExpressionMatcher.html",[0,0.49,2,0.217,3,0.217,4,0.192,5,2.953,7,2.134,8,0.12,9,0.617,10,0.319,11,0.016,12,0.674,13,3.533,14,4.389,15,0.353,17,0.498,18,0.019,19,0.319,20,0.221,21,0.424,22,2.997,23,3.798,25,2.277,26,0.637,27,1.639,28,0.684,29,1.485,30,1.693,31,1.185,32,2.441,33,2.277,34,0.217,35,1.022,37,1.376,40,1.376,42,0.601,46,0.014,56,0.424,60,1.022,79,1.447,89,2.632,152,2.647,178,1.853,211,3.766,233,2.861,234,3.148,235,3.148,376,3.148,377,3.148,480,5.198,481,4.117,482,4.117,483,4.117]],["title/classes/Setup.html",[0,0.332,95,1.431]],["body/classes/Setup.html",[0,0.35,2,0.135,3,0.135,4,0.119,8,0.075,9,0.44,10,0.374,11,0.01,12,0.418,15,0.418,17,0.602,18,0.019,19,0.345,20,0.274,21,0.459,26,0.703,27,1.688,28,0.272,31,1.755,34,0.135,35,0.634,37,1.558,46,0.01,67,1.59,93,0.913,94,1.608,95,2.289,100,1.113,102,3.24,105,1.359,111,1.634,115,0.899,127,1.414,162,2.566,268,1.885,279,2.292,297,2.687,314,2.579,381,2.004,394,5.008,402,3.974,452,2.687,464,3.974,484,2.194,485,4.46,486,5.197,487,5.197,488,3.565,489,2.557,490,3.866,491,2.557,492,3.866,493,2.557,494,5.87,495,3.866,496,2.557,497,4.662,498,3.866,499,2.557,500,3.866,501,3.866,502,2.557,503,3.866,504,2.557,505,3.866,506,5.197,507,2.557,508,3.866,509,2.557,510,4.662,511,4.662,512,2.557,513,2.557,514,2.557,515,4.662]],["title/classes/Times.html",[0,0.332,404,1.902]],["body/classes/Times.html",[0,0.305,2,0.113,3,0.113,4,0.1,8,0.063,9,0.384,10,0.335,11,0.009,12,0.35,15,0.437,17,0.502,18,0.019,19,0.321,20,0.259,21,0.427,26,0.665,27,1.02,29,1.84,34,0.177,35,0.531,46,0.009,47,3.699,59,3.515,64,2.155,66,3.287,67,0.558,69,1.439,78,0.939,93,0.796,94,1.743,99,2.804,100,1.362,105,0.753,138,3.512,139,2.893,254,1.488,286,5.078,361,2.343,404,3.721,455,3.578,456,4.689,457,5.084,516,1.637,517,4.17,518,4.73,519,4.73,520,4.73,521,4.179,522,3.371,523,4.73,524,3.371,525,4.17,526,3.371,527,2.141,528,3.371,529,3.371,530,6.095,531,2.141,532,2.141,533,2.141,534,2.141,535,3.371,536,2.141,537,2.141,538,3.371,539,2.141,540,2.141,541,2.141,542,3.371,543,4.415,544,2.141,545,4.17,546,2.141,547,2.141,548,2.141,549,2.141,550,3.371,551,2.141,552,1.837,553,1.837,554,2.141,555,2.141,556,2.141,557,2.141,558,2.141]],["title/classes/TrackedExpressionsFormatter.html",[0,0.332,559,2.549]],["body/classes/TrackedExpressionsFormatter.html",[0,0.495,2,0.22,3,0.22,4,0.195,8,0.122,9,0.623,10,0.321,11,0.014,12,0.684,15,0.356,17,0.503,18,0.019,19,0.322,20,0.223,21,0.428,26,0.604,28,0.649,34,0.288,35,1.037,42,0.61,46,0.016,56,0.569,66,2.905,67,1.09,69,0.987,73,1.816,74,2.378,78,1.114,119,3.587,120,4.408,121,3.587,126,3.587,128,2.038,129,2.905,130,3.587,559,4.241,560,4.666,561,5.472,562,4.696,563,2.905,564,4.179,565,4.179,566,4.179,567,4.179]],["title/classes/Tracker.html",[0,0.332,248,1.594]],["body/classes/Tracker.html",[0,0.45,2,0.191,3,0.191,4,0.169,8,0.106,9,0.566,10,0.348,11,0.013,12,0.594,15,0.398,17,0.457,18,0.019,19,0.293,20,0.249,21,0.389,26,0.605,28,0.529,34,0.299,35,0.9,42,0.53,46,0.013,56,0.444,59,1.88,67,0.946,69,0.856,93,1.175,94,1.556,96,4.27,99,2.15,100,1.044,105,1.749,175,1.938,178,1.844,179,1.844,248,2.468,393,2.52,408,2.318,466,4.23,473,2.52,485,4.27,568,2.52,569,6.113,570,3.626,571,4.975,572,5.678,573,4.975,574,3.626,575,3.626,576,5.68,577,3.626,578,3.626,579,3.626,580,3.626,581,3.626]],["title/classes/Verifier.html",[0,0.332,385,1.902]],["body/classes/Verifier.html",[0,0.504,2,0.184,3,0.184,4,0.163,8,0.102,9,0.552,10,0.293,11,0.012,12,0.794,15,0.316,17,0.446,18,0.019,19,0.285,20,0.197,21,0.379,26,0.48,28,0.672,29,1.329,34,0.293,40,1.169,42,0.879,46,0.012,47,4.119,56,0.56,60,0.868,67,0.912,68,3.102,69,1.145,78,1.099,94,1.527,105,1.706,125,3.848,127,1.934,128,1.705,138,2.073,140,3.278,149,3.12,174,1.519,361,3.372,385,2.889,404,3.547,406,3.873,409,2.073,488,2.674,521,2.674,582,2.43,583,3.496,584,4.29,585,3.496,586,4.164,587,3.496,588,3.001,589,3.102,590,3.001,591,2.43,592,3.001,593,3.001,594,3.001,595,3.001,596,3.001,597,3.001,598,4.164,599,3.001,600,3.001,601,3.001,602,3.001]],["title/classes/VerifyError.html",[0,0.332,591,2.549]],["body/classes/VerifyError.html",[0,0.533,2,0.205,3,0.205,4,0.182,10,0.205,11,0.013,12,0.855,15,0.254,17,0.358,18,0.019,19,0.229,20,0.159,21,0.304,26,0.386,28,0.698,29,1.067,34,0.31,40,1.302,42,0.92,46,0.013,47,3.893,56,0.549,60,0.966,67,1.016,68,3.338,69,1.233,78,1.149,94,1.614,105,1.369,125,3.338,128,1.899,138,2.309,140,3.054,149,2.707,174,2.269,385,2.707,404,3.264,406,3.629,409,2.309,488,2.978,521,3.994,582,2.706,584,3.766,586,3.342,588,3.342,589,3.338,590,3.342,591,3.629,592,4.481,593,4.481,594,3.342,595,3.342,596,3.342,597,3.342,598,4.481,599,3.342,600,3.342,601,3.342,602,3.342,603,3.894]],["title/classes/VerifyFormatter.html",[0,0.332,584,2.345]],["body/classes/VerifyFormatter.html",[0,0.456,2,0.194,3,0.194,4,0.172,8,0.108,9,0.574,10,0.302,11,0.013,12,0.825,15,0.328,17,0.463,18,0.019,19,0.296,20,0.205,21,0.394,26,0.568,28,0.655,29,1.572,34,0.265,42,0.838,46,0.013,55,2.28,56,0.542,59,2.973,60,0.917,67,0.963,69,0.872,73,1.605,74,2.19,78,1.265,94,1.381,117,4.625,122,4.325,123,5.287,124,5.287,125,3.938,127,2.044,128,2.457,131,2.568,372,2.568,559,4.733,562,4.922,563,3.502,584,3.667,589,2.362,604,4.386,605,3.695,606,3.695,607,2.825,608,3.695,609,3.695,610,3.695,611,3.695,612,3.695,613,3.695,614,3.695,615,3.695]],["title/changelog.html",[616,2.625,617,2.34,618,3.059]],["body/changelog.html",[9,0.505,11,0.014,18,0.014,31,1.277,40,1.483,46,0.014,56,0.347,67,1.637,77,3.147,79,1.56,95,2.218,138,2.63,250,1.928,255,2.836,256,2.836,259,2.615,297,3.083,304,2.836,315,3.083,381,3.55,385,2.3,464,3.393,607,3.393,619,4.437,620,4.437,621,4.437,622,4.437,623,4.437,624,4.437,625,4.437,626,4.437,627,4.802,628,3.807,629,3.807,630,4.437,631,4.437,632,4.437,633,4.437,634,6.623,635,4.437,636,4.437,637,4.437,638,4.437,639,4.437,640,4.437,641,4.437,642,4.437,643,4.437,644,4.437,645,3.807,646,4.437,647,3.807,648,4.437,649,3.807,650,4.437,651,4.437,652,4.437,653,4.437,654,4.437,655,3.807,656,3.807,657,3.807,658,3.807,659,3.807,660,3.807,661,4.437,662,4.437]],["title/coverage.html",[663,4.304]],["body/coverage.html",[0,0.666,1,1.222,4,0.089,5,3.061,6,1.64,7,2.834,11,0.008,14,1.222,18,0.019,20,0.078,30,1.267,46,0.008,47,1.133,48,2.355,49,2.355,52,1.222,56,0.427,60,1.357,61,1.328,62,1.222,64,4.828,67,1.773,68,1.222,69,0.451,71,1.057,72,1.64,73,2.728,74,0.83,87,1.64,90,0.83,91,1.64,92,1.64,95,0.745,110,0.786,117,1.328,118,2.355,120,1.222,129,1.328,131,1.328,140,0.991,141,2.551,142,2.688,149,0.991,151,0.786,152,0.786,153,0.83,154,1.642,155,1.057,170,1.826,173,2.629,175,0.578,178,0.55,179,0.55,180,0.578,187,1.64,189,1.328,191,1.328,193,1.328,195,1.328,210,1.328,211,1.328,212,1.328,213,1.328,220,2.629,227,1.64,230,1.64,238,1.057,239,2.695,240,2.258,241,2.629,242,0.991,248,0.83,249,1.133,250,0.83,252,1.133,262,1.133,284,1.328,285,2.355,295,2.355,341,1.64,354,1.64,369,1.64,374,1.64,381,0.991,382,2.355,383,1.328,385,0.991,404,0.991,407,1.328,408,1.222,409,1.133,445,1.64,450,1.64,452,1.328,453,1.64,454,1.64,466,1.222,467,2.688,468,2.688,473,1.328,477,1.64,480,1.64,484,1.64,516,1.461,559,1.328,560,2.355,563,1.328,568,2.14,582,2.688,584,1.222,589,1.222,591,1.328,604,2.355,627,1.461,663,1.64,664,1.64,665,1.911,666,1.911,667,6.798,668,6.891,669,3.079,670,1.64,671,1.911,672,1.911,673,4.435,674,6.027,675,2.958,676,4.174,677,1.64,678,1.64,679,1.64,680,1.64,681,1.64,682,1.64,683,3.806,684,1.64,685,1.64,686,1.64,687,4.435,688,1.911,689,1.911,690,1.911,691,3.079,692,1.64,693,1.911,694,1.911,695,1.911,696,1.911]],["title/miscellaneous/enumerations.html",[697,1.586,698,3.788]],["body/miscellaneous/enumerations.html",[8,0.161,11,0.016,18,0.016,46,0.016,239,2.855,240,2.393,241,3.853,245,3.853,255,3.521,256,3.521,516,4.212,543,5.577,552,4.726,553,4.726,697,2.855,698,4.726,699,4.726,700,5.507]],["title/miscellaneous/functions.html",[67,1.151,697,1.586]],["body/miscellaneous/functions.html",[5,1.816,8,0.109,11,0.013,17,0.529,18,0.016,19,0.339,21,0.45,46,0.013,48,2.848,49,3.875,56,0.483,62,3.682,67,1.321,68,3.682,73,2.898,74,2.202,77,2.06,90,1.618,115,1.31,118,2.848,129,4.003,131,4.003,162,2.33,239,1.931,240,1.618,241,3.004,248,2.202,261,2.208,381,2.627,407,3.522,408,3.682,409,3.415,467,2.589,468,3.522,473,4.003,560,2.848,563,4.003,568,2.589,582,2.589,589,3.682,604,2.848,627,4.405,628,3.196,629,3.196,670,3.196,676,3.196,677,4.943,678,4.943,679,4.943,680,4.943,681,3.196,682,4.349,683,3.196,684,4.943,685,4.943,686,4.943,697,1.931,699,3.196,701,7.042,702,3.725,703,3.725,704,2.848,705,3.725,706,3.196,707,3.725,708,3.196,709,3.725,710,3.725,711,3.725,712,3.725,713,3.725]],["title/index.html",[8,0.089,616,2.625,617,2.34]],["body/index.html",[0,0.274,9,0.586,11,0.008,18,0.019,19,0.11,20,0.076,21,0.146,26,0.3,28,0.512,37,1.465,40,0.626,42,0.963,46,0.008,59,2.495,66,3.344,67,1.561,69,1.376,77,3.561,78,0.696,79,1.065,93,1.446,95,0.73,100,1.763,105,0.658,111,2.438,125,1.197,138,2.598,151,1.246,152,1.246,154,1.622,162,0.861,164,3.045,170,1.795,181,1.476,229,2.316,247,2.65,259,1.753,268,1.476,296,1.606,297,2.65,304,1.197,314,1.675,361,2.104,381,3.741,385,0.97,404,2.272,420,1.431,607,1.431,617,1.431,645,1.606,647,1.606,649,3.273,655,1.606,656,1.606,657,3.273,658,1.606,659,1.606,660,4.13,664,2.599,692,2.599,714,5.42,715,1.872,716,1.872,717,3.814,718,3.028,719,1.872,720,3.028,721,1.872,722,1.872,723,1.872,724,1.872,725,1.872,726,1.872,727,1.872,728,3.028,729,1.872,730,1.872,731,1.872,732,1.872,733,1.872,734,1.872,735,1.872,736,1.872,737,3.028,738,1.872,739,1.872,740,1.872,741,1.872,742,1.872,743,1.872,744,1.872,745,1.872,746,1.872,747,1.872,748,1.872,749,1.872,750,1.872,751,1.872,752,4.382,753,1.872,754,3.028,755,1.872,756,3.028,757,1.872,758,1.872,759,6.658,760,3.028,761,1.872,762,3.028,763,1.872,764,1.872,765,3.028,766,4.382,767,1.872,768,1.872,769,3.028,770,1.872,771,1.872,772,4.812,773,1.872,774,3.028,775,1.872,776,3.028,777,1.872,778,1.872,779,4.812,780,1.872,781,4.812,782,3.028,783,1.872,784,1.872,785,3.028,786,3.028,787,4.382,788,4.382,789,3.028,790,1.872,791,1.872,792,4.382,793,3.028,794,3.028,795,1.872,796,1.872,797,1.872,798,1.872,799,1.872,800,1.872,801,3.028,802,3.028,803,1.872,804,1.872,805,1.872,806,1.872,807,3.028,808,2.599,809,3.028,810,1.872,811,1.872,812,1.872,813,1.872,814,3.028,815,1.872,816,1.872,817,1.872,818,1.872,819,1.872,820,1.872,821,1.872,822,1.872,823,1.872,824,1.872,825,1.872,826,1.872,827,1.872,828,1.872,829,1.872,830,1.872,831,1.872,832,1.872,833,1.872,834,1.872,835,1.872,836,1.872,837,1.872,838,1.872,839,1.872,840,3.028,841,1.872,842,1.872,843,1.872]],["title/modules.html",[844,4.304]],["body/modules.html",[11,0.017,18,0.017,46,0.017,844,5.073]],["title/overview.html",[845,4.304]],["body/overview.html",[0,0.526,11,0.017,18,0.017,46,0.017,154,2.151,808,4.987,845,4.987,846,5.811]],["title/miscellaneous/typealiases.html",[697,1.586,847,4.414]],["body/miscellaneous/typealiases.html",[8,0.149,11,0.016,18,0.019,20,0.252,46,0.016,55,2.471,56,0.522,60,1.26,110,2.089,141,2.206,151,2.089,152,2.089,153,2.206,173,3.67,175,1.536,178,1.462,179,1.462,180,1.536,220,3.011,568,3.529,572,5.73,697,2.633,704,3.884,708,4.358,848,5.078,849,5.078,850,5.078]],["title/miscellaneous/variables.html",[675,3.376,697,1.586]],["body/miscellaneous/variables.html",[8,0.151,11,0.016,18,0.018,20,0.255,46,0.016,56,0.49,60,1.284,69,1.222,99,3.068,100,1.49,141,2.248,142,4.351,155,3.724,170,4.316,295,3.957,466,3.308,467,3.596,468,4.351,675,3.957,697,2.682,704,3.957,706,4.44,851,5.174]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":64,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"coverage.html":{}}}],["0/1",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":694,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":667,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":66,"title":{},"body":{"classes/CallCounter.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"index.html":{}}}],["1/1",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":693,"title":{},"body":{"coverage.html":{}}}],["1/8",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":692,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["100",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["12",{"_index":689,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":792,"title":{},"body":{"index.html":{}}}],["2bit",{"_index":843,"title":{},"body":{"index.html":{}}}],["3",{"_index":794,"title":{},"body":{"index.html":{}}}],["4",{"_index":808,"title":{},"body":{"index.html":{},"overview.html":{}}}],["41",{"_index":846,"title":{},"body":{"overview.html":{}}}],["6",{"_index":625,"title":{},"body":{"changelog.html":{}}}],["_atleastonc",{"_index":517,"title":{},"body":{"classes/Times.html":{}}}],["_atmostonc",{"_index":518,"title":{},"body":{"classes/Times.html":{}}}],["_never",{"_index":519,"title":{},"body":{"classes/Times.html":{}}}],["_onc",{"_index":520,"title":{},"body":{"classes/Times.html":{}}}],["_prototyp",{"_index":300,"title":{},"body":{"classes/Interceptor.html":{}}}],["_proxi",{"_index":301,"title":{},"body":{"classes/Interceptor.html":{}}}],["_valu",{"_index":302,"title":{},"body":{"classes/Interceptor.html":{}}}],["accept",{"_index":330,"title":{},"body":{"classes/Interceptor.html":{}}}],["access",{"_index":774,"title":{},"body":{"index.html":{}}}],["action",{"_index":485,"title":{},"body":{"classes/Setup.html":{},"classes/Tracker.html":{}}}],["activestrategi",{"_index":269,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["actual",{"_index":809,"title":{},"body":{"index.html":{}}}],["ad",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":96,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Tracker.html":{}}}],["add(act",{"_index":573,"title":{},"body":{"classes/Tracker.html":{}}}],["add(key",{"_index":101,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["alias",{"_index":848,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":789,"title":{},"body":{"index.html":{}}}],["any|it",{"_index":36,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{}}}],["appli",{"_index":166,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["arg",{"_index":162,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Setup.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["arg1",{"_index":824,"title":{},"body":{"index.html":{}}}],["arg2",{"_index":814,"title":{},"body":{"index.html":{}}}],["argument",{"_index":181,"title":{},"body":{"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"index.html":{}}}],["argumentsmatch",{"_index":1,"title":{"classes/ArgumentsMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["argumentsmatcherfactori",{"_index":677,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["array",{"_index":83,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["ask",{"_index":727,"title":{},"body":{"index.html":{}}}],["assert",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["assign",{"_index":479,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["atleast",{"_index":522,"title":{},"body":{"classes/Times.html":{}}}],["atleast(callcount",{"_index":535,"title":{},"body":{"classes/Times.html":{}}}],["atleastonc",{"_index":523,"title":{},"body":{"classes/Times.html":{}}}],["atmost",{"_index":524,"title":{},"body":{"classes/Times.html":{}}}],["atmost(callcount",{"_index":538,"title":{},"body":{"classes/Times.html":{}}}],["atmostonc",{"_index":525,"title":{},"body":{"classes/Times.html":{}}}],["b",{"_index":815,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":247,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"index.html":{}}}],["behaviorstrategi",{"_index":399,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["behaviour",{"_index":662,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":526,"title":{},"body":{"classes/Times.html":{}}}],["between(callcountfrom",{"_index":541,"title":{},"body":{"classes/Times.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{}}}],["c",{"_index":717,"title":{},"body":{"index.html":{}}}],["call",{"_index":138,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["callback",{"_index":314,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["callback((arg1",{"_index":822,"title":{},"body":{"index.html":{}}}],["callback((argu",{"_index":804,"title":{},"body":{"index.html":{}}}],["callback(callback",{"_index":492,"title":{},"body":{"classes/Setup.html":{}}}],["callback.apply(undefin",{"_index":512,"title":{},"body":{"classes/Setup.html":{}}}],["callbacks.loose.strategi",{"_index":251,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.loose.strategy.t",{"_index":341,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"coverage.html":{}}}],["callbacks.loose.strategy.ts:12",{"_index":343,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:19",{"_index":345,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:23",{"_index":346,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:38",{"_index":344,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.strict.strategi",{"_index":253,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.strict.strategy.t",{"_index":354,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["callbacks.strict.strategy.ts:13",{"_index":357,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:17",{"_index":358,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:32",{"_index":356,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:6",{"_index":355,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.t",{"_index":241,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callbacks.ts:13",{"_index":282,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:15",{"_index":280,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:17",{"_index":283,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:21",{"_index":246,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["callbacks.ts:32",{"_index":336,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:40",{"_index":339,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:44",{"_index":338,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:48",{"_index":337,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:52",{"_index":340,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks/interceptor",{"_index":240,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callcount",{"_index":47,"title":{"classes/CallCounter.html":{}},"body":{"classes/CallCounter.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["callcounter(expressionmatcherfactori",{"_index":70,"title":{},"body":{"classes/CallCounter.html":{}}}],["callcounterfactori",{"_index":68,"title":{},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["callcountfrom",{"_index":545,"title":{},"body":{"classes/Times.html":{}}}],["callcountto",{"_index":542,"title":{},"body":{"classes/Times.html":{}}}],["calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n",{"_index":615,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["case",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":293,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["changelog",{"_index":618,"title":{"changelog.html":{}},"body":{}}],["check",{"_index":747,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["code",{"_index":649,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compat",{"_index":721,"title":{},"body":{"index.html":{}}}],["compil",{"_index":647,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["console.log",{"_index":628,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":42,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["constant",{"_index":32,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constantformatt",{"_index":71,"title":{"classes/ConstantFormatter.html":{}},"body":{"classes/ConstantFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["constantformatter().format(object[index",{"_index":86,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["constantmatch",{"_index":14,"title":{"classes/ConstantMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["constructor(arg",{"_index":226,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(argumentsmatch",{"_index":375,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["constructor(constantformatt",{"_index":370,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constructor(constantmatch",{"_index":13,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor(definedsetup",{"_index":342,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["constructor(evalu",{"_index":527,"title":{},"body":{"classes/Times.html":{}}}],["constructor(expectedexpressionformatt",{"_index":605,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["constructor(expressionformatt",{"_index":119,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["constructor(expressionmatch",{"_index":51,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["constructor(expressionreflector",{"_index":433,"title":{},"body":{"classes/MockCore.html":{}}}],["constructor(getpropertyexpressionmatch",{"_index":209,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["constructor(getpropertyformatt",{"_index":188,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["constructor(interceptorcallback",{"_index":305,"title":{},"body":{"classes/Interceptor.html":{}}}],["constructor(messag",{"_index":593,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["constructor(mock",{"_index":489,"title":{},"body":{"classes/Setup.html":{}}}],["constructor(nam",{"_index":221,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(pred",{"_index":362,"title":{},"body":{"classes/It.html":{}}}],["constructor(priv",{"_index":35,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{}}}],["constructor(publ",{"_index":224,"title":{},"body":{"classes/GetPropertyExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(reflector",{"_index":583,"title":{},"body":{"classes/Verifier.html":{}}}],["constructor(sequenceid",{"_index":570,"title":{},"body":{"classes/Tracker.html":{}}}],["constructor(strictstrategi",{"_index":335,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["control",{"_index":830,"title":{},"body":{"index.html":{}}}],["correspond",{"_index":832,"title":{},"body":{"index.html":{}}}],["count",{"_index":50,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{}}}],["count(expect",{"_index":54,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter",{"_index":588,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["counter.t",{"_index":49,"title":{},"body":{"classes/CallCounter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["counter.ts:12",{"_index":57,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:6",{"_index":53,"title":{},"body":{"classes/CallCounter.html":{}}}],["coverag",{"_index":663,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createobject",{"_index":303,"title":{},"body":{"classes/Interceptor.html":{}}}],["date",{"_index":787,"title":{},"body":{"index.html":{}}}],["date(2016",{"_index":819,"title":{},"body":{"index.html":{}}}],["date(2017",{"_index":823,"title":{},"body":{"index.html":{}}}],["deal",{"_index":839,"title":{},"body":{"index.html":{}}}],["declar",{"_index":156,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["dedic",{"_index":724,"title":{},"body":{"index.html":{}}}],["default",{"_index":99,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Interceptor.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":15,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["definedsetup",{"_index":90,"title":{"classes/DefinedSetups.html":{}},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["definedsetups(expressionmatcherfactori",{"_index":429,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["delimit",{"_index":613,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["deni",{"_index":765,"title":{},"body":{"index.html":{}}}],["depend",{"_index":719,"title":{},"body":{"index.html":{}}}],["descript",{"_index":84,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/Interceptor.html":{}}}],["description.push(new",{"_index":85,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["dev",{"_index":730,"title":{},"body":{"index.html":{}}}],["directli",{"_index":298,"title":{},"body":{"classes/Interceptor.html":{}}}],["document",{"_index":664,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dump",{"_index":627,"title":{},"body":{"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dump(mock",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e",{"_index":294,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["enum",{"_index":254,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Times.html":{}}}],["enumer",{"_index":698,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":592,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["error(\"setup",{"_index":835,"title":{},"body":{"index.html":{}}}],["error('an",{"_index":795,"title":{},"body":{"index.html":{}}}],["error('argu",{"_index":806,"title":{},"body":{"index.html":{}}}],["error('invok",{"_index":827,"title":{},"body":{"index.html":{}}}],["error('property4",{"_index":773,"title":{},"body":{"index.html":{}}}],["es5",{"_index":648,"title":{},"body":{"changelog.html":{}}}],["evalu",{"_index":529,"title":{},"body":{"classes/Times.html":{}}}],["exactli",{"_index":455,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["exactly(callcount",{"_index":546,"title":{},"body":{"classes/Times.html":{}}}],["exactly(count",{"_index":458,"title":{},"body":{"classes/PlayTimes.html":{}}}],["exampl",{"_index":299,"title":{},"body":{"classes/Interceptor.html":{},"classes/MockCore.html":{}}}],["except",{"_index":508,"title":{},"body":{"classes/Setup.html":{}}}],["exclus",{"_index":552,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["expect",{"_index":29,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpress",{"_index":55,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/typealiases.html":{}}}],["expectedexpressionformatt",{"_index":117,"title":{"classes/ExpectedExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["expectedexpressionformatter(expressionformatterfactori",{"_index":132,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expectedexpressionformatterfactori",{"_index":131,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expectedexpressionmessag",{"_index":609,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessage}\\n${delimiter}\\ntrack",{"_index":614,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionreflector",{"_index":140,"title":{"classes/ExpectedExpressionReflector.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["expectedgetpropertyexpress",{"_index":151,"title":{"classes/ExpectedGetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedgetpropertyexpression(nam",{"_index":161,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpression|it",{"_index":232,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["expectedmethodexpress",{"_index":153,"title":{"classes/ExpectedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmethodexpression(arg",{"_index":168,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedmethodexpression|it",{"_index":378,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["expectednamedmethodexpress",{"_index":110,"title":{"classes/ExpectedNamedMethodExpression.html":{}},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectednamedmethodexpression(nam",{"_index":163,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectednamedmethodexpression).nam",{"_index":116,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["expectednamedmethodexpression|it",{"_index":451,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["expectedsetpropertyexpress",{"_index":152,"title":{"classes/ExpectedSetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedsetpropertyexpression(nam",{"_index":165,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedsetpropertyexpression|it",{"_index":481,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["export",{"_index":34,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["express",{"_index":56,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expression(proxi",{"_index":172,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expression.arguments.foreach(arg",{"_index":446,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.nam",{"_index":229,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"index.html":{}}}],["expression.name}(${valu",{"_index":449,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.valu",{"_index":791,"title":{},"body":{"index.html":{}}}],["expressiondescript",{"_index":133,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressiondescription}${mockdescript",{"_index":136,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressionformatt",{"_index":120,"title":{"classes/ExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{}}}],["expressionformatterfactori",{"_index":129,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expressionmatch",{"_index":52,"title":{"classes/ExpressionMatcher.html":{}},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"coverage.html":{}}}],["expressionmatcherfactori",{"_index":62,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expressionproxi",{"_index":144,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expressionreflector",{"_index":411,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["expressions.t",{"_index":173,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/expect",{"_index":60,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expressions/express",{"_index":30,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["expressions|it",{"_index":203,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["extend",{"_index":174,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["factori",{"_index":130,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["fals",{"_index":40,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["field",{"_index":786,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["find",{"_index":743,"title":{},"body":{"index.html":{}}}],["fix",{"_index":623,"title":{},"body":{"changelog.html":{}}}],["fluent",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":750,"title":{},"body":{"index.html":{}}}],["format",{"_index":74,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["format(expect",{"_index":122,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(express",{"_index":198,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["format(object",{"_index":75,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["format(templ",{"_index":712,"title":{},"body":{"miscellaneous/functions.html":{}}}],["format(trackedexpress",{"_index":561,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["formatt",{"_index":128,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["formatted.join",{"_index":448,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatted.push(this.constantformatter.format(arg",{"_index":447,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatter.t",{"_index":73,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatter.ts:10",{"_index":372,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:12",{"_index":196,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:15",{"_index":126,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatter.ts:18",{"_index":606,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["formatter.ts:22",{"_index":199,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:4",{"_index":371,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["formatter.ts:5",{"_index":76,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["formatter.ts:9",{"_index":121,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatters/verifi",{"_index":590,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["friendli",{"_index":739,"title":{},"body":{"index.html":{}}}],["full",{"_index":737,"title":{},"body":{"index.html":{}}}],["fulli",{"_index":742,"title":{},"body":{"index.html":{}}}],["function",{"_index":67,"title":{"miscellaneous/functions.html":{}},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get",{"_index":616,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["get(express",{"_index":106,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["get.properti",{"_index":200,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["get.property.integrationtests.t",{"_index":751,"title":{},"body":{"index.html":{}}}],["getpropertyexpress",{"_index":175,"title":{"classes/GetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getpropertyexpression(methodnam",{"_index":352,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["getpropertyexpression(nam",{"_index":319,"title":{},"body":{"classes/Interceptor.html":{}}}],["getpropertyexpression:19",{"_index":177,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{}}}],["getpropertyexpressionformatt",{"_index":189,"title":{"classes/GetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["getpropertyexpressionmatch",{"_index":210,"title":{"classes/GetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["getpropertyformatt",{"_index":197,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["getprototypeof",{"_index":333,"title":{},"body":{"classes/Interceptor.html":{}}}],["getter",{"_index":228,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["hasnamedmethod",{"_index":97,"title":{},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(methodnam",{"_index":258,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(nam",{"_index":108,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["havebeencalledtim",{"_index":124,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["help",{"_index":726,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":410,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["hold",{"_index":775,"title":{},"body":{"index.html":{}}}],["hook",{"_index":783,"title":{},"body":{"index.html":{}}}],["id",{"_index":576,"title":{},"body":{"classes/Tracker.html":{}}}],["id.t",{"_index":468,"title":{},"body":{"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["id.ts:2",{"_index":470,"title":{},"body":{"classes/SequenceId.html":{}}}],["id.ts:4",{"_index":471,"title":{},"body":{"classes/SequenceId.html":{}}}],["identifi",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["iexpectedexpress",{"_index":149,"title":{"interfaces/IExpectedExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["ignor",{"_index":501,"title":{},"body":{"classes/Setup.html":{}}}],["iinterceptorcallback",{"_index":238,"title":{"interfaces/IInterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["iinterceptorcallbacksstrategi",{"_index":242,"title":{"interfaces/IInterceptorCallbacksStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["imock",{"_index":394,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["implement",{"_index":268,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["inclus",{"_index":553,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["inherit",{"_index":176,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/Mock.html":{}}}],["insequ",{"_index":384,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["insequence(sequ",{"_index":390,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["inspir",{"_index":716,"title":{},"body":{"index.html":{}}}],["instal",{"_index":728,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":155,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["instance(1",{"_index":801,"title":{},"body":{"index.html":{}}}],["instance(2",{"_index":803,"title":{},"body":{"index.html":{}}}],["instance(it.is(valu",{"_index":807,"title":{},"body":{"index.html":{}}}],["instance(valu",{"_index":805,"title":{},"body":{"index.html":{}}}],["instance.method",{"_index":777,"title":{},"body":{"index.html":{}}}],["instance.method(1",{"_index":816,"title":{},"body":{"index.html":{}}}],["instance.method(2",{"_index":829,"title":{},"body":{"index.html":{}}}],["instance.method(3",{"_index":825,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(valu",{"_index":820,"title":{},"body":{"index.html":{}}}],["instance.properti",{"_index":788,"title":{},"body":{"index.html":{}}}],["instance.property1",{"_index":760,"title":{},"body":{"index.html":{}}}],["instance.property2",{"_index":767,"title":{},"body":{"index.html":{}}}],["instance.property3",{"_index":770,"title":{},"body":{"index.html":{}}}],["instance[property4nam",{"_index":771,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":79,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"changelog.html":{},"index.html":{}}}],["integr",{"_index":746,"title":{},"body":{"index.html":{}}}],["intend",{"_index":296,"title":{},"body":{"classes/Interceptor.html":{},"index.html":{}}}],["interact",{"_index":629,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["intercept",{"_index":278,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["intercepted(express",{"_index":257,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptedcallback",{"_index":414,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptor",{"_index":250,"title":{"classes/Interceptor.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"coverage.html":{}}}],["interceptor(callback",{"_index":431,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptorcallback",{"_index":262,"title":{"classes/InterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"coverage.html":{}}}],["interceptorcallbacks(strictstrategi",{"_index":267,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksfactori",{"_index":407,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interceptorcallbacksfactory(definedsetup",{"_index":261,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"miscellaneous/functions.html":{}}}],["interceptorcallbacksloosestrategi",{"_index":249,"title":{"classes/InterceptorCallbacksLooseStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"coverage.html":{}}}],["interceptorcallbacksloosestrategy(definedsetup",{"_index":266,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksstrictstrategi",{"_index":252,"title":{"classes/InterceptorCallbacksStrictStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["interceptorcallbacksstrictstrategy(definedsetup",{"_index":264,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorfactori",{"_index":412,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptorfactory(interceptedcallback",{"_index":416,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interfac",{"_index":154,"title":{"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["intern",{"_index":315,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{}}}],["introduc",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["invok",{"_index":279,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/PlayTimes.html":{},"classes/Setup.html":{}}}],["invoke(arg",{"_index":495,"title":{},"body":{"classes/Setup.html":{}}}],["invoke(express",{"_index":260,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["ipred",{"_index":284,"title":{"interfaces/IPredicate.html":{}},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{}}}],["is(pred",{"_index":287,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isani",{"_index":289,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isequenceverifi",{"_index":391,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["isetup",{"_index":402,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["isetupinvok",{"_index":102,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["issu",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["it(pred",{"_index":288,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["it).pred",{"_index":81,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it).test(left",{"_index":89,"title":{},"body":{"classes/ConstantMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["it.i",{"_index":768,"title":{},"body":{"index.html":{}}}],["it.is(${(object",{"_index":80,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it.is((express",{"_index":762,"title":{},"body":{"index.html":{}}}],["it.is(express",{"_index":834,"title":{},"body":{"index.html":{}}}],["it.is(valu",{"_index":793,"title":{},"body":{"index.html":{}}}],["it.isani",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["itestfunct",{"_index":800,"title":{},"body":{"index.html":{}}}],["itestobject",{"_index":752,"title":{},"body":{"index.html":{}}}],["key",{"_index":104,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["latest",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":25,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["left.foreach((lvalu",{"_index":41,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.length",{"_index":38,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.nam",{"_index":234,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["let'",{"_index":764,"title":{},"body":{"index.html":{}}}],["lib/.../cal",{"_index":702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../dump.t",{"_index":703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../expect",{"_index":704,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/.../expressions.t",{"_index":849,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../factories.t",{"_index":701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../format",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../interceptor",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/.../interceptor.t",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../sequ",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lib/.../times.t",{"_index":700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../track",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../tracker.t",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lib/.../verifi",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../verifier.t",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/cal",{"_index":48,"title":{},"body":{"classes/CallCounter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/defin",{"_index":91,"title":{},"body":{"classes/DefinedSetups.html":{},"coverage.html":{}}}],["lib/dump.t",{"_index":670,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/expect",{"_index":141,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/express",{"_index":5,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/expressions.t",{"_index":220,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/expressions.ts:11",{"_index":368,"title":{},"body":{"classes/MethodExpression.html":{}}}],["lib/expressions.ts:18",{"_index":222,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:19",{"_index":223,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:2",{"_index":443,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/expressions.ts:24",{"_index":474,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:25",{"_index":475,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:26",{"_index":476,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:4",{"_index":444,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/format",{"_index":681,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/const",{"_index":72,"title":{},"body":{"classes/ConstantFormatter.html":{},"coverage.html":{}}}],["lib/formatters/expect",{"_index":118,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/express",{"_index":187,"title":{},"body":{"classes/ExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/factories.t",{"_index":683,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/get.properti",{"_index":227,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/method",{"_index":369,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/named.method",{"_index":445,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/set.properti",{"_index":477,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/track",{"_index":560,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/verifi",{"_index":604,"title":{},"body":{"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor",{"_index":239,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor.t",{"_index":295,"title":{},"body":{"classes/Interceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/interceptor.ts:13",{"_index":309,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:14",{"_index":308,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:15",{"_index":306,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:21",{"_index":311,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:29",{"_index":313,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:36",{"_index":310,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/mock.t",{"_index":382,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["lib/mock.ts:22",{"_index":434,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:29",{"_index":436,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:32",{"_index":435,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:37",{"_index":441,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:44",{"_index":442,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:51",{"_index":438,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:55",{"_index":439,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:60",{"_index":440,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:65",{"_index":437,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:71",{"_index":386,"title":{},"body":{"classes/Mock.html":{}}}],["lib/play",{"_index":453,"title":{},"body":{"classes/PlayTimes.html":{},"coverage.html":{}}}],["lib/sequ",{"_index":467,"title":{},"body":{"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lib/setup.t",{"_index":484,"title":{},"body":{"classes/Setup.html":{},"coverage.html":{}}}],["lib/setup.ts:12",{"_index":496,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:16",{"_index":504,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:21",{"_index":507,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:28",{"_index":493,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:39",{"_index":499,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:44",{"_index":502,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:5",{"_index":491,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:6",{"_index":490,"title":{},"body":{"classes/Setup.html":{}}}],["lib/times.t",{"_index":516,"title":{},"body":{"classes/Times.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["lib/times.ts:10",{"_index":528,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:13",{"_index":534,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:17",{"_index":536,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:21",{"_index":537,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:25",{"_index":539,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:29",{"_index":540,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:33",{"_index":544,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:40",{"_index":547,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:44",{"_index":548,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:48",{"_index":549,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:52",{"_index":551,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:7",{"_index":533,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:8",{"_index":532,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:9",{"_index":531,"title":{},"body":{"classes/Times.html":{}}}],["lib/tracker.t",{"_index":568,"title":{},"body":{"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lib/tracker.ts:13",{"_index":574,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:18",{"_index":575,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:7",{"_index":571,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/verifier.t",{"_index":582,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/verifier.ts:17",{"_index":585,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:26",{"_index":587,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:7",{"_index":603,"title":{},"body":{"classes/VerifyError.html":{}}}],["librari",{"_index":718,"title":{},"body":{"index.html":{}}}],["link",{"_index":513,"title":{},"body":{"classes/Setup.html":{}}}],["liter",{"_index":850,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["log",{"_index":569,"title":{},"body":{"classes/Tracker.html":{}}}],["logic",{"_index":620,"title":{},"body":{"changelog.html":{}}}],["loos",{"_index":256,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["loosestrategi",{"_index":265,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["magic",{"_index":735,"title":{},"body":{"index.html":{}}}],["make",{"_index":658,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["match",{"_index":11,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matched(left",{"_index":22,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher",{"_index":33,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.t",{"_index":7,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["matcher.ts:12",{"_index":377,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:15",{"_index":214,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:24",{"_index":215,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:4",{"_index":16,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matcher.ts:5",{"_index":88,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matcher.ts:6",{"_index":376,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:7",{"_index":231,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matcher.ts:9",{"_index":24,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/argu",{"_index":6,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"coverage.html":{}}}],["matchers/const",{"_index":87,"title":{},"body":{"classes/ConstantMatcher.html":{},"coverage.html":{}}}],["matchers/express",{"_index":61,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/factori",{"_index":63,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["matchers/factories.t",{"_index":676,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matchers/get.properti",{"_index":230,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/method",{"_index":374,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/named.method",{"_index":450,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/set.properti",{"_index":480,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["messag",{"_index":521,"title":{},"body":{"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["method",{"_index":9,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["method(1",{"_index":810,"title":{},"body":{"index.html":{}}}],["method(arg1",{"_index":813,"title":{},"body":{"index.html":{}}}],["method.property.integrationtests.t",{"_index":799,"title":{},"body":{"index.html":{}}}],["methodexpress",{"_index":179,"title":{"classes/MethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["methodexpression(arg",{"_index":332,"title":{},"body":{"classes/Interceptor.html":{}}}],["methodexpression:11",{"_index":182,"title":{},"body":{"classes/ExpectedMethodExpression.html":{}}}],["methodexpressionformatt",{"_index":193,"title":{"classes/MethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"coverage.html":{}}}],["methodexpressionmatch",{"_index":212,"title":{"classes/MethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"coverage.html":{}}}],["methodformatt",{"_index":192,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["methodformatterfactori",{"_index":684,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["methodmatcherfactori",{"_index":678,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["methodnam",{"_index":281,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["minimalist",{"_index":740,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":697,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missed\"));access",{"_index":836,"title":{},"body":{"index.html":{}}}],["mock",{"_index":381,"title":{"classes/Mock.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mock(mocknam",{"_index":758,"title":{},"body":{"index.html":{}}}],["mock.object",{"_index":779,"title":{},"body":{"index.html":{}}}],["mock.setup(inst",{"_index":833,"title":{},"body":{"index.html":{}}}],["mock.verify(inst",{"_index":781,"title":{},"body":{"index.html":{}}}],["mockbehavior",{"_index":245,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"miscellaneous/enumerations.html":{}}}],["mockbehavior.loos",{"_index":276,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["mockbehavior.strict",{"_index":274,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["mockcor",{"_index":383,"title":{"classes/MockCore.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["mockcore:22",{"_index":387,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:29",{"_index":389,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:32",{"_index":388,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:37",{"_index":401,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:44",{"_index":405,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:51",{"_index":395,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:55",{"_index":396,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:60",{"_index":398,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:65",{"_index":392,"title":{},"body":{"classes/Mock.html":{}}}],["mockdescript",{"_index":135,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["mocknam",{"_index":125,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["modul",{"_index":844,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moq",{"_index":111,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["moq.t",{"_index":714,"title":{},"body":{"index.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named.method",{"_index":202,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["named.method.integrationtests.t",{"_index":812,"title":{},"body":{"index.html":{}}}],["namedmethodexpress",{"_index":180,"title":{"classes/NamedMethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["namedmethodexpression(nam",{"_index":325,"title":{},"body":{"classes/Interceptor.html":{}}}],["namedmethodexpression:2",{"_index":183,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpression:4",{"_index":184,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpressionformatt",{"_index":195,"title":{"classes/NamedMethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"coverage.html":{}}}],["namedmethodexpressionmatch",{"_index":213,"title":{"classes/NamedMethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["namedmethodformatt",{"_index":194,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["namedmethodformatterfactori",{"_index":685,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["namedmethodmatcherfactori",{"_index":679,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":657,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["never",{"_index":456,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["new",{"_index":69,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":469,"title":{},"body":{"classes/SequenceId.html":{}}}],["now",{"_index":651,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":645,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":307,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["number",{"_index":59,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["number)=>boolean",{"_index":554,"title":{},"body":{"classes/Times.html":{}}}],["number|ani",{"_index":785,"title":{},"body":{"index.html":{}}}],["object",{"_index":77,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["object.getprototypeof",{"_index":655,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["object.method",{"_index":780,"title":{},"body":{"index.html":{}}}],["object.method(1",{"_index":828,"title":{},"body":{"index.html":{}}}],["object.properti",{"_index":797,"title":{},"body":{"index.html":{}}}],["object.setprototypeof",{"_index":656,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onc",{"_index":457,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["oper",{"_index":660,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["option",{"_index":21,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["order",{"_index":622,"title":{},"body":{"changelog.html":{}}}],["origin",{"_index":732,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":500,"title":{},"body":{"classes/Setup.html":{}}}],["out",{"_index":748,"title":{},"body":{"index.html":{}}}],["overview",{"_index":845,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":514,"title":{},"body":{"classes/Setup.html":{}}}],["paramet",{"_index":17,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["pass",{"_index":598,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["play",{"_index":464,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Setup.html":{},"changelog.html":{}}}],["play(pred",{"_index":498,"title":{},"body":{"classes/Setup.html":{}}}],["playabl",{"_index":487,"title":{},"body":{"classes/Setup.html":{}}}],["playpred",{"_index":486,"title":{},"body":{"classes/Setup.html":{}}}],["playtim",{"_index":452,"title":{"classes/PlayTimes.html":{}},"body":{"classes/PlayTimes.html":{},"classes/Setup.html":{},"coverage.html":{}}}],["pointer",{"_index":776,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":652,"title":{},"body":{"changelog.html":{}}}],["preced",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["predic",{"_index":31,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"changelog.html":{}}}],["predicates.t",{"_index":285,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{}}}],["predicates.ts:11",{"_index":365,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:15",{"_index":366,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:19",{"_index":367,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:6",{"_index":363,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:7",{"_index":364,"title":{},"body":{"classes/It.html":{}}}],["pretti",{"_index":744,"title":{},"body":{"index.html":{}}}],["print",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["privat",{"_index":94,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["product",{"_index":720,"title":{},"body":{"index.html":{}}}],["project",{"_index":725,"title":{},"body":{"index.html":{}}}],["properti",{"_index":93,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"index.html":{}}}],["property1",{"_index":753,"title":{},"body":{"index.html":{}}}],["property2",{"_index":754,"title":{},"body":{"index.html":{}}}],["property3",{"_index":755,"title":{},"body":{"index.html":{}}}],["property4",{"_index":756,"title":{},"body":{"index.html":{}}}],["property4nam",{"_index":757,"title":{},"body":{"index.html":{}}}],["prototyp",{"_index":259,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"index.html":{}}}],["prototype[methodnam",{"_index":360,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["prototypeof",{"_index":304,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"index.html":{}}}],["prototypeof(prototyp",{"_index":312,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["prototypeof(testobject.prototyp",{"_index":841,"title":{},"body":{"index.html":{}}}],["proxi",{"_index":170,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["proxy(funct",{"_index":169,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["proxy:ani",{"_index":158,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["public",{"_index":10,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["quick",{"_index":731,"title":{},"body":{"index.html":{}}}],["rang",{"_index":543,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["recommend",{"_index":722,"title":{},"body":{"index.html":{}}}],["record",{"_index":577,"title":{},"body":{"classes/Tracker.html":{}}}],["record.express",{"_index":422,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["refactor",{"_index":738,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":145,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflect(express",{"_index":148,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflectedinfo",{"_index":143,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflector",{"_index":406,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["reflector.t",{"_index":142,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reflector.ts:15",{"_index":146,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:17",{"_index":147,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:41",{"_index":150,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":567,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["result.substr(0",{"_index":566,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["return",{"_index":26,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["returns('cal",{"_index":802,"title":{},"body":{"index.html":{}}}],["returns(()=>{console.log('th",{"_index":778,"title":{},"body":{"index.html":{}}}],["returns(1",{"_index":761,"title":{},"body":{"index.html":{}}}],["returns(100",{"_index":763,"title":{},"body":{"index.html":{}}}],["returns(fals",{"_index":769,"title":{},"body":{"index.html":{}}}],["returns(new",{"_index":818,"title":{},"body":{"index.html":{}}}],["returns(tru",{"_index":790,"title":{},"body":{"index.html":{}}}],["returns(valu",{"_index":503,"title":{},"body":{"classes/Setup.html":{}}}],["right",{"_index":23,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["right.length",{"_index":39,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["right[index",{"_index":44,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["rightexpress",{"_index":233,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.argu",{"_index":380,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["rightexpression.nam",{"_index":235,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.valu",{"_index":483,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["rvalu",{"_index":43,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["save",{"_index":729,"title":{},"body":{"index.html":{}}}],["separ",{"_index":723,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":393,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/PlayTimes.html":{},"classes/Tracker.html":{}}}],["sequence(sequ",{"_index":462,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequence.add(thi",{"_index":428,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["sequence[index",{"_index":465,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequenceid",{"_index":466,"title":{"classes/SequenceId.html":{}},"body":{"classes/SequenceId.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sequenceidfactori",{"_index":473,"title":{},"body":{"classes/SequenceId.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":164,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"index.html":{}}}],["set.properti",{"_index":201,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["set.property.integrationtests.t",{"_index":784,"title":{},"body":{"index.html":{}}}],["set/read",{"_index":653,"title":{},"body":{"changelog.html":{}}}],["setbehaviorstrategi",{"_index":243,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setbehaviorstrategy(behavior",{"_index":244,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["setbehaviorstrategy(behaviorstrategi",{"_index":397,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setpropertyexpress",{"_index":178,"title":{"classes/SetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["setpropertyexpression(nam",{"_index":328,"title":{},"body":{"classes/Interceptor.html":{}}}],["setpropertyexpression:25",{"_index":185,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpression:26",{"_index":186,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpressionformatt",{"_index":191,"title":{"classes/SetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["setpropertyexpressionmatch",{"_index":211,"title":{"classes/SetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["setpropertyformatt",{"_index":190,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["setpropertyformatterfactori",{"_index":686,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setpropertymatcherfactori",{"_index":680,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setprototypeof",{"_index":334,"title":{},"body":{"classes/Interceptor.html":{}}}],["setup",{"_index":95,"title":{"classes/Setup.html":{}},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["setup(express",{"_index":400,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setup(inst",{"_index":759,"title":{},"body":{"index.html":{}}}],["setup(mock",{"_index":432,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setup.invok",{"_index":351,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke((expression).argu",{"_index":349,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke([(expression).valu",{"_index":350,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setupfactori",{"_index":413,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setups.t",{"_index":92,"title":{},"body":{"classes/DefinedSetups.html":{},"coverage.html":{}}}],["setups.ts:13",{"_index":103,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:17",{"_index":107,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:26",{"_index":109,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:7",{"_index":98,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["signatur",{"_index":237,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["simpl",{"_index":733,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["spi",{"_index":838,"title":{},"body":{"index.html":{}}}],["start",{"_index":617,"title":{"changelog.html":{},"index.html":{}},"body":{"index.html":{}}}],["statement",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":286,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["still",{"_index":741,"title":{},"body":{"index.html":{}}}],["strict",{"_index":255,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["strictstrategi",{"_index":263,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["string",{"_index":78,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["string.t",{"_index":682,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["strongli",{"_index":734,"title":{},"body":{"index.html":{}}}],["super",{"_index":430,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["super(messag",{"_index":594,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["support",{"_index":654,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":58,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["tabl",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":695,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":159,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["templat",{"_index":713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test",{"_index":361,"title":{},"body":{"classes/It.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"index.html":{}}}],["test(callcount",{"_index":550,"title":{},"body":{"classes/Times.html":{}}}],["test(expect",{"_index":586,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["test(inst",{"_index":290,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["testobject",{"_index":840,"title":{},"body":{"index.html":{}}}],["tests.integr",{"_index":749,"title":{},"body":{"index.html":{}}}],["texcept",{"_index":506,"title":{},"body":{"classes/Setup.html":{}}}],["therefor",{"_index":736,"title":{},"body":{"index.html":{}}}],["this._prototyp",{"_index":316,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._proxi",{"_index":317,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values.hasownproperty(nam",{"_index":322,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values[nam",{"_index":323,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.act",{"_index":510,"title":{},"body":{"classes/Setup.html":{}}}],["this.action(arg",{"_index":509,"title":{},"body":{"classes/Setup.html":{}}}],["this.activestrategi",{"_index":270,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.hasnamedmethod(methodnam",{"_index":273,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.intercepted(express",{"_index":272,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.invoke(express",{"_index":271,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.argu",{"_index":225,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["this.argumentsmatcher.matched(left.argu",{"_index":379,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["this.callcounter.count(express",{"_index":597,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.constantformatter.format(express",{"_index":208,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.argu",{"_index":373,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.valu",{"_index":478,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["this.constantmatcher.matched(left.valu",{"_index":482,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["this.constantmatcher.matched(lvalu",{"_index":45,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["this.createobject",{"_index":318,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.definedsetups.add(expectedexpress",{"_index":419,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.definedsetups.get(express",{"_index":348,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.definedsetups.get(getpropertyexpress",{"_index":353,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["this.definedsetups.hasnamedmethod(methodnam",{"_index":359,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.evaluator(callcount",{"_index":558,"title":{},"body":{"classes/Times.html":{}}}],["this.expectedexpressionformatter.format(expect",{"_index":610,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.expressionformatter.format(expect",{"_index":134,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["this.expressionformatter.format(expression)}\\n",{"_index":565,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["this.expressionmatcher.matched(express",{"_index":65,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["this.expressionproxi",{"_index":171,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.expressionreflector.reflect(express",{"_index":418,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.getpropertyexpressionmatcher.matched(left",{"_index":216,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.getpropertyformatter.format(express",{"_index":204,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.interceptedcallbacks.setbehaviorstrategy(behaviorstrategi",{"_index":427,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor",{"_index":415,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor.object",{"_index":425,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor.prototypeof(prototyp",{"_index":426,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptorcallbacks.hasnamedmethod(nam",{"_index":321,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(express",{"_index":329,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(getpropertyexpress",{"_index":320,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(namedmethodexpress",{"_index":326,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.invoke(express",{"_index":331,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.invoke(getpropertyexpress",{"_index":324,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.invoke(namedmethodexpress",{"_index":327,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.log",{"_index":580,"title":{},"body":{"classes/Tracker.html":{}}}],["this.log.push(record",{"_index":579,"title":{},"body":{"classes/Tracker.html":{}}}],["this.loosestrategi",{"_index":277,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.methodexpressionmatcher.matched(left",{"_index":218,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.methodformatter.format(express",{"_index":206,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.mock",{"_index":511,"title":{},"body":{"classes/Setup.html":{}}}],["this.nam",{"_index":424,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.namedmethodexpressionmatcher.matched(left",{"_index":219,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.namedmethodformatter.format(express",{"_index":207,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.playpred",{"_index":515,"title":{},"body":{"classes/Setup.html":{}}}],["this.predicate(inst",{"_index":292,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["this.reflectedinfo",{"_index":160,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.reflector.reflect(expect",{"_index":596,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.sequenceid.next",{"_index":578,"title":{},"body":{"classes/Tracker.html":{}}}],["this.setpropertyexpressionmatcher.matched(left",{"_index":217,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.setpropertyformatter.format(express",{"_index":205,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.setup",{"_index":113,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.setupfactory(thi",{"_index":417,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.setups.unshift([key",{"_index":112,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.strictstrategi",{"_index":275,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.trackedexpressionsformatter.format(trackedexpress",{"_index":612,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.tracker.add(express",{"_index":347,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.tracker.get().map(record",{"_index":421,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.valu",{"_index":472,"title":{},"body":{"classes/SequenceId.html":{}}}],["this.verifier.test(express",{"_index":423,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.verifyformatter.format(express",{"_index":600,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["thisarg",{"_index":167,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["throw",{"_index":488,"title":{},"body":{"classes/Setup.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["throws(except",{"_index":505,"title":{},"body":{"classes/Setup.html":{}}}],["throws(new",{"_index":772,"title":{},"body":{"index.html":{}}}],["time",{"_index":404,"title":{"classes/Times.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"index.html":{}}}],["time(",{"_index":139,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Times.html":{}}}],["times(expect",{"_index":530,"title":{},"body":{"classes/Times.html":{}}}],["times._atleastonc",{"_index":555,"title":{},"body":{"classes/Times.html":{}}}],["times._nev",{"_index":556,"title":{},"body":{"classes/Times.html":{}}}],["times._onc",{"_index":557,"title":{},"body":{"classes/Times.html":{}}}],["times.exactly(1",{"_index":811,"title":{},"body":{"index.html":{}}}],["times.messag",{"_index":601,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.never());mock",{"_index":782,"title":{},"body":{"index.html":{}}}],["times.onc",{"_index":420,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"index.html":{}}}],["times.once());mock",{"_index":798,"title":{},"body":{"index.html":{}}}],["times.t",{"_index":454,"title":{},"body":{"classes/PlayTimes.html":{},"coverage.html":{}}}],["times.test(callcount",{"_index":599,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.ts:12",{"_index":460,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:16",{"_index":461,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:25",{"_index":463,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:3",{"_index":459,"title":{},"body":{"classes/PlayTimes.html":{}}}],["timesmessag",{"_index":123,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["timesmessage.tolowercas",{"_index":137,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["track",{"_index":607,"title":{},"body":{"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["trackedact",{"_index":572,"title":{},"body":{"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["trackedexpress",{"_index":562,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatt",{"_index":559,"title":{"classes/TrackedExpressionsFormatter.html":{}},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["trackedexpressionsformatter(expressionformatterfactori",{"_index":564,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["trackedexpressionsformatterfactori",{"_index":563,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["trackedexpressionsmessag",{"_index":611,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["tracker",{"_index":248,"title":{"classes/Tracker.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tracker(sequenceidfactori",{"_index":581,"title":{},"body":{"classes/Tracker.html":{}}}],["trackerfactori",{"_index":408,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tresult",{"_index":497,"title":{},"body":{"classes/Setup.html":{}}}],["tri",{"_index":291,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["true",{"_index":37,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"index.html":{}}}],["truesponsor",{"_index":842,"title":{},"body":{"index.html":{}}}],["tvalu",{"_index":494,"title":{},"body":{"classes/Setup.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealias",{"_index":847,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":82,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["typescript",{"_index":715,"title":{},"body":{"index.html":{}}}],["unam",{"_index":236,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["undefin",{"_index":115,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"miscellaneous/functions.html":{}}}],["unset",{"_index":837,"title":{},"body":{"index.html":{}}}],["updat",{"_index":621,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":297,"title":{},"body":{"classes/Interceptor.html":{},"classes/Setup.html":{},"changelog.html":{},"index.html":{}}}],["usag",{"_index":745,"title":{},"body":{"index.html":{}}}],["v2.1.0",{"_index":661,"title":{},"body":{"changelog.html":{}}}],["v2.3.0",{"_index":650,"title":{},"body":{"changelog.html":{}}}],["v2.3.1",{"_index":644,"title":{},"body":{"changelog.html":{}}}],["v2.4.0",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["v2.5.0",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["v2.5.1",{"_index":635,"title":{},"body":{"changelog.html":{}}}],["v2.6.0",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["v2.6.1",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["v2.6.2",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["v2.7.0",{"_index":619,"title":{},"body":{"changelog.html":{}}}],["valu",{"_index":100,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value.play",{"_index":114,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["values[0",{"_index":817,"title":{},"body":{"index.html":{}}}],["values[1",{"_index":821,"title":{},"body":{"index.html":{}}}],["values[2",{"_index":826,"title":{},"body":{"index.html":{}}}],["var",{"_index":157,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["variabl",{"_index":675,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["verifi",{"_index":385,"title":{"classes/Verifier.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["verifier(new",{"_index":595,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifierfactori",{"_index":409,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["verify(express",{"_index":403,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["verifyerror",{"_index":591,"title":{"classes/VerifyError.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["verifyerror(messag",{"_index":602,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyformatt",{"_index":584,"title":{"classes/VerifyFormatter.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["verifyformatter(expectedexpressionformatterfactori",{"_index":608,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["verifyformatterfactori",{"_index":589,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":105,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["without",{"_index":831,"title":{},"body":{"index.html":{}}}],["work",{"_index":659,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["write",{"_index":766,"title":{},"body":{"index.html":{}}}],["written",{"_index":796,"title":{},"body":{"index.html":{}}}],["ye",{"_index":127,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ArgumentsMatcher.html":{"url":"classes/ArgumentsMatcher.html","title":"class - ArgumentsMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArgumentsMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/arguments-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/arguments-matcher.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any[], right: (any | It)[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/arguments-matcher.ts:9\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    (any | It)[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: any[], right: (any|It)[]): boolean{\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        let matched = true;\n        left.forEach((lvalue, index) =>{\n            const rvalue = right[index];\n            matched = this.constantMatcher.matched(lvalue, rvalue) === true ? matched : false;\n        });\n\n        return matched;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallCounter.html":{"url":"classes/CallCounter.html","title":"class - CallCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CallCounter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/call-counter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                count\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/call-counter.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        count(expected: ExpectedExpressions, expressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/call-counter.ts:12\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from './expected-expressions/expected-expressions';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\n\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count(expected: ExpectedExpressions, expressions: Expressions[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true)\n                count += 1;\n        }\n\n        return count;\n    }\n}\n\nexport function callCounterFactory(): CallCounter {\n    return new CallCounter(expressionMatcherFactory());\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantFormatter.html":{"url":"classes/ConstantFormatter.html","title":"class - ConstantFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/constant-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(object: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/constant-formatter.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantFormatter {\n\n    public format(object: any|It): string {\n        if (object instanceof It) return `It.Is(${(object as It).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const index in object)\n                description.push(new ConstantFormatter().format(object[index]));\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantMatcher.html":{"url":"classes/ConstantMatcher.html","title":"class - ConstantMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/constant-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any, right: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/constant-matcher.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantMatcher {\n\n    public matched(left: any, right: any|It): boolean {\n        if (right instanceof It)\n            return (right as It).test(left);\n        return left === right;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefinedSetups.html":{"url":"classes/DefinedSetups.html","title":"class - DefinedSetups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefinedSetups\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/defined-setups.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                setups\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/defined-setups.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            setups\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setups:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/defined-setups.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(key: ExpectedExpressions, setup: ISetupInvoke)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        setup\n                                                        \n                                                                    ISetupInvoke\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetupInvoke\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExpectedExpressions, ExpectedNamedMethodExpression } from \"./expected-expressions/expected-expressions\";\nimport { ExpressionMatcher } from \"./expression-matchers/expression-matcher\";\nimport { Expressions } from \"./expressions\";\nimport { ISetupInvoke } from \"./moq\";\n\nexport class DefinedSetups {\n    private setups: [ExpectedExpressions, ISetupInvoke][] = [];\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public add(key: ExpectedExpressions, setup: ISetupInvoke): void {\n        this.setups.unshift([key, setup]);\n    }\n\n    public get(expression: Expressions): ISetupInvoke {\n        for (const [key, value] of this.setups) {\n            if (this.expressionMatcher.matched(expression, key) === true && value.playable())\n                return value;\n        }\n\n        return undefined;\n    }\n\n    public hasNamedMethod(name: string): boolean {\n        for (const [key] of this.setups) {\n            if (key instanceof ExpectedNamedMethodExpression && (key as ExpectedNamedMethodExpression).name === name)\n                return true;\n        }\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionFormatter.html":{"url":"classes/ExpectedExpressionFormatter.html","title":"class - ExpectedExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expected-expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expected-expression-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expected-expression-formatter.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\n\nexport function expectedExpressionFormatterFactory (): ExpectedExpressionFormatter {\n    return new ExpectedExpressionFormatter(expressionFormatterFactory());\n}\n\nexport class ExpectedExpressionFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\n        const expressionDescription = this.expressionFormatter.format(expected);\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : '';\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionReflector.html":{"url":"classes/ExpectedExpressionReflector.html","title":"class - ExpectedExpressionReflector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionReflector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                reflectedInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                expressionProxy\n                            \n                            \n                                    Public\n                                reflect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reflectedInfo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reflectedInfo:     \n\n                    \n                \n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            expressionProxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        expressionProxy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reflect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reflect(expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:41\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ExpectedExpressions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedGetPropertyExpression.html":{"url":"classes/ExpectedGetPropertyExpression.html","title":"class - ExpectedGetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedGetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     GetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in GetPropertyExpression:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMethodExpression.html":{"url":"classes/ExpectedMethodExpression.html","title":"class - ExpectedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in MethodExpression:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNamedMethodExpression.html":{"url":"classes/ExpectedNamedMethodExpression.html","title":"class - ExpectedNamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNamedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NamedMethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedSetPropertyExpression.html":{"url":"classes/ExpectedSetPropertyExpression.html","title":"class - ExpectedSetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedSetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionFormatter.html":{"url":"classes/ExpressionFormatter.html","title":"class - ExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyFormatter: GetPropertyExpressionFormatter, setPropertyFormatter: SetPropertyExpressionFormatter, methodFormatter: MethodExpressionFormatter, namedMethodFormatter: NamedMethodExpressionFormatter, constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expression-formatter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getPropertyFormatter\n                                                  \n                                                        \n                                                                    GetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setPropertyFormatter\n                                                  \n                                                        \n                                                                    SetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        methodFormatter\n                                                  \n                                                        \n                                                                    MethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namedMethodFormatter\n                                                  \n                                                        \n                                                                    NamedMethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: Expressions | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expression-formatter.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, SetPropertyExpression, NamedMethodExpression,\n    MethodExpression\n} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {GetPropertyExpressionFormatter} from './get.property-formatter';\nimport {SetPropertyExpressionFormatter} from './set.property-formatter';\nimport {MethodExpressionFormatter} from './method-formatter';\nimport {NamedMethodExpressionFormatter} from './named.method-formatter';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: Expressions|It): string {\n        if (expression instanceof GetPropertyExpression) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyExpression) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof MethodExpression) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodExpression) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionMatcher.html":{"url":"classes/ExpressionMatcher.html","title":"class - ExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/expression-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyExpressionMatcher: GetPropertyExpressionMatcher, setPropertyExpressionMatcher: SetPropertyExpressionMatcher, methodExpressionMatcher: MethodExpressionMatcher, namedMethodExpressionMatcher: NamedMethodExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/expression-matcher.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    GetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    SetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        methodExpressionMatcher\n                                                  \n                                                        \n                                                                    MethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namedMethodExpressionMatcher\n                                                  \n                                                        \n                                                                    NamedMethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: Expressions, right: ExpectedExpressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/expression-matcher.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpressionMatcher} from './get.property-matcher';\nimport {SetPropertyExpressionMatcher} from './set.property-matcher';\nimport {MethodExpressionMatcher} from './method-matcher';\nimport {NamedMethodExpressionMatcher} from './named.method-matcher';\nimport {\n    Expressions, GetPropertyExpression, SetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from '../expressions';\nimport {\n    ExpectedExpressions, ExpectedGetPropertyExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression\n} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher) {\n\n    }\n\n    public matched(left: Expressions, right: ExpectedExpressions): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyExpression && (right instanceof ExpectedGetPropertyExpression || right instanceof It))\n            return this.getPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof SetPropertyExpression && (right instanceof ExpectedSetPropertyExpression || right instanceof It))\n            return this.setPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof MethodExpression && (right instanceof ExpectedMethodExpression || right instanceof It))\n            return this.methodExpressionMatcher.matched(left, >right);\n        if (left instanceof NamedMethodExpression && (right instanceof ExpectedNamedMethodExpression || right instanceof It))\n            return this.namedMethodExpressionMatcher.matched(left, >right);\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpression.html":{"url":"classes/GetPropertyExpression.html","title":"class - GetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionFormatter.html":{"url":"classes/GetPropertyExpressionFormatter.html","title":"class - GetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/get.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: GetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/get.property-formatter.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\n\nexport class GetPropertyExpressionFormatter{\n\n    public format(expression: GetPropertyExpression): string{\n        return `Getter of \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionMatcher.html":{"url":"classes/GetPropertyExpressionMatcher.html","title":"class - GetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/get.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/get.property-matcher.ts:7\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedGetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ExpectedGetPropertyExpression} from '../expected-expressions/expected-expressions';\n\nexport class GetPropertyExpressionMatcher{\n\n    public matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpectedExpression.html":{"url":"interfaces/IExpectedExpression.html","title":"interface - IExpectedExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpectedExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void | any | It\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacks.html":{"url":"interfaces/IInterceptorCallbacks.html","title":"interface - IInterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n            \n                Extends\n            \n            \n                    IInterceptorCallbacksStrategy\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setBehaviorStrategy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport { Expressions } from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { InterceptorCallbacksLooseStrategy } from \"./interceptor-callbacks.loose.strategy\";\nimport { InterceptorCallbacksStrictStrategy } from \"./interceptor-callbacks.strict.strategy\";\n\nexport enum MockBehavior {\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): void;\n\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n\n    invoke(expression: Expressions): any;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public invoke(expression: Expressions): any {\n        return this.activeStrategy.invoke(expression);\n    }\n\n    public intercepted(expression: Expressions): void {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacksStrategy.html":{"url":"interfaces/IInterceptorCallbacksStrategy.html","title":"interface - IInterceptorCallbacksStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacksStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasNamedMethod\n                                \n                                \n                                    intercepted\n                                \n                                \n                                    invoke\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \ninvoke(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport { Expressions } from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { InterceptorCallbacksLooseStrategy } from \"./interceptor-callbacks.loose.strategy\";\nimport { InterceptorCallbacksStrictStrategy } from \"./interceptor-callbacks.strict.strategy\";\n\nexport enum MockBehavior {\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): void;\n\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n\n    invoke(expression: Expressions): any;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public invoke(expression: Expressions): any {\n        return this.activeStrategy.invoke(expression);\n    }\n\n    public intercepted(expression: Expressions): void {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPredicate.html":{"url":"interfaces/IPredicate.html","title":"interface - IPredicate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPredicate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     boolean\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptor.html":{"url":"classes/Interceptor.html","title":"class - Interceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor.ts\n        \n\n            \n                Description\n            \n            \n                This class is not intended to be used directly\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _prototype\n                            \n                            \n                                    Private\n                                _proxy\n                            \n                            \n                                    Private\n                                _values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createObject\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(interceptorCallbacks: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        interceptorCallbacks\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _prototype\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _prototype:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                    \n                        \n                            Default value : null\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _proxy:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _values:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createObject\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createObject()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:36\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetPropertyExpression, MethodExpression, NamedMethodExpression, SetPropertyExpression } from \"./expressions\";\nimport { IInterceptorCallbacksStrategy } from \"./interceptor-callbacks/interceptor-callbacks\";\n\ndeclare var Proxy: any;\n\n/**\n * This class is not intended to be used directly\n * @private\n * @internal\n */\nexport class Interceptor {\n\n    private _proxy: T;\n    private _prototype: any = null;\n    private _values = {};\n\n    constructor(private interceptorCallbacks: IInterceptorCallbacksStrategy) {\n        this._prototype = Function;\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    public prototypeof(prototype?: any): any {\n        if (prototype !== undefined)\n            this._prototype = prototype;\n\n        return this._prototype;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => {\n                const getPropertyExpression = new GetPropertyExpression(name);\n                this.interceptorCallbacks.intercepted(getPropertyExpression);\n\n                if (this.interceptorCallbacks.hasNamedMethod(name, this._prototype) === false) {\n\n                    if (this._values.hasOwnProperty(name) === true)\n                        return this._values[name];\n\n                    return this.interceptorCallbacks.invoke(getPropertyExpression);\n                }\n\n                return (...args) => {\n                    const namedMethodExpression = new NamedMethodExpression(name, args);\n                    this.interceptorCallbacks.intercepted(namedMethodExpression);\n                    return this.interceptorCallbacks.invoke(namedMethodExpression);\n                }\n            },\n\n            set: (target, name, value) => {\n                const expression = new SetPropertyExpression(name, value);\n                this.interceptorCallbacks.intercepted(expression);\n                const accepted = this.interceptorCallbacks.invoke(expression);\n                if (accepted === true || accepted === undefined) {\n                    this._values[name] = value;\n                }\n\n                return accepted === undefined ? true : accepted;\n            },\n\n            apply: (target, thisArg, args) => {\n                const expression = new MethodExpression(args);\n                this.interceptorCallbacks.intercepted(expression);\n                return this.interceptorCallbacks.invoke(expression);\n            },\n\n            getPrototypeOf: (target) => this._prototype,\n            setPrototypeOf: (target, prototype) => {\n                if (prototype !== undefined) {\n                    this._prototype = prototype;\n                    return true;\n                }\n                return false;\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacks.html":{"url":"classes/InterceptorCallbacks.html","title":"class - InterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacks\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeStrategy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                invoke\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(strictStrategy: IInterceptorCallbacksStrategy, looseStrategy: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        strictStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        looseStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeStrategy:     IInterceptorCallbacksStrategy\n\n                    \n                \n                    \n                        \n                            Type :     IInterceptorCallbacksStrategy\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:32\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport { Expressions } from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { InterceptorCallbacksLooseStrategy } from \"./interceptor-callbacks.loose.strategy\";\nimport { InterceptorCallbacksStrictStrategy } from \"./interceptor-callbacks.strict.strategy\";\n\nexport enum MockBehavior {\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): void;\n\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n\n    invoke(expression: Expressions): any;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public invoke(expression: Expressions): any {\n        return this.activeStrategy.invoke(expression);\n    }\n\n    public intercepted(expression: Expressions): void {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksLooseStrategy.html":{"url":"classes/InterceptorCallbacksLooseStrategy.html","title":"class - InterceptorCallbacksLooseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksLooseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                invoke\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:38\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:23\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport {\n    Expressions,\n    GetPropertyExpression,\n    MethodExpression,\n    NamedMethodExpression,\n    SetPropertyExpression\n} from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { IInterceptorCallbacksStrategy } from \"./interceptor-callbacks\";\n\nexport class InterceptorCallbacksLooseStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): void {\n        this.tracker.add(expression);\n    }\n\n    public invoke(expression: Expressions): any {\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const getPropertyExpression = new GetPropertyExpression(methodName);\n        const setup = this.definedSetups.get(getPropertyExpression);\n        return setup !== undefined ? false : true;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksStrictStrategy.html":{"url":"classes/InterceptorCallbacksStrictStrategy.html","title":"class - InterceptorCallbacksStrictStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksStrictStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                invoke\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"../defined-setups\";\nimport { Expressions, MethodExpression, NamedMethodExpression, SetPropertyExpression } from \"../expressions\";\nimport { Tracker } from \"../tracker\";\nimport { IInterceptorCallbacksStrategy } from \"./interceptor-callbacks\";\n\nexport class InterceptorCallbacksStrictStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): void {\n        this.tracker.add(expression);\n    }\n\n    public invoke(expression: Expressions): any {\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const hasNamedMethod = this.definedSetups.hasNamedMethod(methodName);\n        if (hasNamedMethod === true) return true;\n\n        if (prototype !== null && prototype[methodName] instanceof Function)\n            return true;\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/It.html":{"url":"classes/It.html","title":"class - It","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  It\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                predicate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Is\n                            \n                            \n                                    Static\n                                IsAny\n                            \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(predicate: IPredicate)\n                    \n                \n                        \n                            \n                                Defined in lib/expected-expressions/expression-predicates.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                  \n                                                        \n                                                                    IPredicate\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            predicate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        predicate:     IPredicate\n\n                    \n                \n                    \n                        \n                            Type :     IPredicate\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Is\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Is(predicate: IPredicate)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:11\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                        \n                                                                    IPredicate\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     It | any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            IsAny\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        IsAny()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:15\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     It | any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(instance: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        instance\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpression.html":{"url":"classes/MethodExpression.html","title":"class - MethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionFormatter.html":{"url":"classes/MethodExpressionFormatter.html","title":"class - MethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: MethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/method-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {MethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class MethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: MethodExpression): string{\n        const value = this.constantFormatter.format(expression.arguments);\n        return `(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionMatcher.html":{"url":"classes/MethodExpressionMatcher.html","title":"class - MethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: MethodExpression, right: ExpectedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/method-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {MethodExpression} from '../expressions';\nimport {ExpectedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class MethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: MethodExpression, right: ExpectedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mock.html":{"url":"classes/Mock.html","title":"class - Mock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MockCore\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                interceptor\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                tracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                insequence\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                            \n                                    Public\n                                setup\n                            \n                            \n                                    Public\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/mock.ts:71\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interceptor:     Interceptor\n\n                    \n                \n                    \n                        \n                            Type :     Interceptor\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tracker\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tracker:     Tracker\n\n                    \n                \n                    \n                        \n                            Type :     Tracker\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            insequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        insequence(sequence: ISequenceVerifier, expression: IExpectedExpression)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    ISequenceVerifier\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behaviorStrategy: MockBehavior)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:60\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behaviorStrategy\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setup(expression: IExpectedExpression)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            verify\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        verify(expression: IExpectedExpression, times?: Times)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"./defined-setups\";\nimport { ExpectedExpressionReflector, IExpectedExpression } from \"./expected-expressions/expected-expression-reflector\";\nimport { expressionMatcherFactory } from \"./expression-matchers/factories\";\nimport { Interceptor } from \"./interceptor\";\nimport {\n    IInterceptorCallbacks,\n    interceptorCallbacksFactory,\n    MockBehavior\n} from \"./interceptor-callbacks/interceptor-callbacks\";\nimport { IMock, ISequenceVerifier, ISetup, ISetupInvoke } from \"./moq\";\nimport { Setup } from \"./setup\";\nimport { Times } from \"./times\";\nimport { Tracker, trackerFactory } from \"./tracker\";\nimport { Verifier, verifierFactory } from \"./verifier\";\n\n/**\n * @internal\n * @hidden\n * @private\n */\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n\n    constructor(\n        private expressionReflector: ExpectedExpressionReflector,\n        private interceptorFactory: (callbacks: IInterceptorCallbacks) => Interceptor,\n        private setupFactory: (mock: IMock) => ISetupInvoke,\n        private definedSetups: DefinedSetups,\n        public tracker: Tracker,\n        private verifier: Verifier,\n        private interceptedCallbacks: IInterceptorCallbacks,\n        public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): IMock {\n        times = times === undefined ? Times.Once() : times;\n        const expressions = this.tracker.get().map(record => record.expression);\n        this.verifier.test(expression, times, expressions, this.name);\n        return this;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n\n    public insequence(sequence: ISequenceVerifier, expression: IExpectedExpression): IMock{\n        sequence.add(this, expression);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = trackerFactory();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockCore.html":{"url":"classes/MockCore.html","title":"class - MockCore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockCore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IMock\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                interceptor\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                tracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                insequence\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                            \n                                    Public\n                                setup\n                            \n                            \n                                    Public\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionReflector: ExpectedExpressionReflector, interceptorFactory: (callbacks: IInterceptorCallbacks) => void, setupFactory: (mock: IMock) => void, definedSetups: DefinedSetups, tracker: Tracker, verifier: Verifier, interceptedCallbacks: IInterceptorCallbacks, name?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/mock.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionReflector\n                                                  \n                                                        \n                                                                    ExpectedExpressionReflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interceptorFactory\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setupFactory\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        verifier\n                                                  \n                                                        \n                                                                    Verifier\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interceptedCallbacks\n                                                  \n                                                        \n                                                                    IInterceptorCallbacks\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interceptor:     Interceptor\n\n                    \n                \n                    \n                        \n                            Type :     Interceptor\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tracker\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tracker:     Tracker\n\n                    \n                \n                    \n                        \n                            Type :     Tracker\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            insequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        insequence(sequence: ISequenceVerifier, expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    ISequenceVerifier\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behaviorStrategy: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:60\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behaviorStrategy\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setup(expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            verify\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        verify(expression: IExpectedExpression, times?: Times)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"./defined-setups\";\nimport { ExpectedExpressionReflector, IExpectedExpression } from \"./expected-expressions/expected-expression-reflector\";\nimport { expressionMatcherFactory } from \"./expression-matchers/factories\";\nimport { Interceptor } from \"./interceptor\";\nimport {\n    IInterceptorCallbacks,\n    interceptorCallbacksFactory,\n    MockBehavior\n} from \"./interceptor-callbacks/interceptor-callbacks\";\nimport { IMock, ISequenceVerifier, ISetup, ISetupInvoke } from \"./moq\";\nimport { Setup } from \"./setup\";\nimport { Times } from \"./times\";\nimport { Tracker, trackerFactory } from \"./tracker\";\nimport { Verifier, verifierFactory } from \"./verifier\";\n\n/**\n * @internal\n * @hidden\n * @private\n */\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n\n    constructor(\n        private expressionReflector: ExpectedExpressionReflector,\n        private interceptorFactory: (callbacks: IInterceptorCallbacks) => Interceptor,\n        private setupFactory: (mock: IMock) => ISetupInvoke,\n        private definedSetups: DefinedSetups,\n        public tracker: Tracker,\n        private verifier: Verifier,\n        private interceptedCallbacks: IInterceptorCallbacks,\n        public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): IMock {\n        times = times === undefined ? Times.Once() : times;\n        const expressions = this.tracker.get().map(record => record.expression);\n        this.verifier.test(expression, times, expressions, this.name);\n        return this;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n\n    public insequence(sequence: ISequenceVerifier, expression: IExpectedExpression): IMock{\n        sequence.add(this, expression);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = trackerFactory();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpression.html":{"url":"classes/NamedMethodExpression.html","title":"class - NamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionFormatter.html":{"url":"classes/NamedMethodExpressionFormatter.html","title":"class - NamedMethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/named.method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/named.method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: NamedMethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/named.method-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {NamedMethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class NamedMethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: NamedMethodExpression): string{\n        const formatted: string[] = [];\n\n        expression.arguments.forEach(arg=>{\n            formatted.push(this.constantFormatter.format(arg));\n        });\n\n        const value = formatted.join(', ');\n        return `${expression.name}(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionMatcher.html":{"url":"classes/NamedMethodExpressionMatcher.html","title":"class - NamedMethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/named.method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/named.method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/named.method-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedNamedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {NamedMethodExpression} from '../expressions';\nimport {ExpectedNamedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class NamedMethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name)\n            return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlayTimes.html":{"url":"classes/PlayTimes.html","title":"class - PlayTimes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlayTimes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/play-times.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Exactly\n                            \n                            \n                                    Static\n                                Never\n                            \n                            \n                                    Static\n                                Once\n                            \n                            \n                                    Static\n                                Sequence\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Exactly\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Exactly(count: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:3\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Never()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Once()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Sequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Sequence(sequence: boolean[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    boolean[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PlayTimes {\n\n    public static Exactly(count: number): () => boolean {\n        let invoked = 0;\n        return () => {\n            if (invoked >= count) return false;\n            invoked++;\n            return true;\n        };\n    }\n\n    public static Never(): () => boolean {\n        return () => false;\n    }\n\n    public static Once(): () => boolean {\n        let played = false;\n        return () => {\n            if (played) return false;\n            played = true;\n            return true;\n        };\n    }\n\n    public static Sequence(sequence: boolean[]): () => boolean {\n        let index = 0;\n        return () => {\n            const value = sequence[index];\n            index++;\n            return value;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequenceId.html":{"url":"classes/SequenceId.html","title":"class - SequenceId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequenceId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sequence-id.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/sequence-id.ts:2\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            next\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        next()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/sequence-id.ts:4\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class SequenceId {\n    private value: number = 0;\n\n    public next(): number {\n        return this.value++;\n    }\n}\n\nconst instance = new SequenceId();\n\nexport function sequenceIdFactory(): SequenceId {\n    return instance;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpression.html":{"url":"classes/SetPropertyExpression.html","title":"class - SetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionFormatter.html":{"url":"classes/SetPropertyExpressionFormatter.html","title":"class - SetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/set.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/set.property-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/set.property-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {SetPropertyExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class SetPropertyExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: SetPropertyExpression): string{\n        const value = this.constantFormatter.format(expression.value);\n        return `Assignment of ${value} to property \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionMatcher.html":{"url":"classes/SetPropertyExpressionMatcher.html","title":"class - SetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/set.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/set.property-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/set.property-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedSetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedSetPropertyExpression} from '../expected-expressions/expected-expressions';\nimport {SetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class SetPropertyExpressionMatcher{\n\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Setup.html":{"url":"classes/Setup.html","title":"class - Setup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Setup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/setup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ISetupInvoke\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                action\n                            \n                            \n                                    Private\n                                playPredicate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                callback\n                            \n                            \n                                    Public\n                                invoke\n                            \n                            \n                                    Public\n                                play\n                            \n                            \n                                    Public\n                                playable\n                            \n                            \n                                    Public\n                                returns\n                            \n                            \n                                    Public\n                                throws\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mock: IMock)\n                    \n                \n                        \n                            \n                                Defined in lib/setup.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mock\n                                                  \n                                                        \n                                                                    IMock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            action\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        action:     Function\n\n                    \n                \n                    \n                        \n                            Type :     Function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/setup.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            playPredicate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        playPredicate:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/setup.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            callback\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        callback(callback: (args: any[]) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:28\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TValue\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(args?: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:12\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TResult\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            play\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        play(predicate: () => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:39\n                            \n                        \n\n\n                \n                    \n                            Plays the setup when predicate returns true otherwise the setup will be ignored.\nAs predicate PlayTimes could be used.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            playable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        playable()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            returns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        returns(value: TValue)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:16\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TValue\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    TValue\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            throws\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        throws(exception: TException)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:21\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TException\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exception\n                                                        \n                                                                    TException\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { IMock, ISetup, ISetupInvoke } from \"./moq\";\n\nexport class Setup implements ISetupInvoke {\n\n    private action: Function;\n    private playPredicate: () => boolean;\n\n    constructor(private mock: IMock) {\n\n    }\n\n    public invoke(args?: any[]): TResult {\n        return this.action(args);\n    }\n\n    public returns(value: TValue): IMock {\n        this.action = () => value;\n        return this.mock;\n    }\n\n    public throws(exception: TException): IMock {\n        this.action = () => {\n            throw exception;\n        };\n        return this.mock;\n    }\n\n    public callback(callback: (args: any[]) => TValue): IMock {\n        this.action = (args?: any[]) => callback.apply(undefined, args);\n        return this.mock;\n    }\n\n    /**\n     * Plays the setup when predicate returns true otherwise the setup will be ignored.\n     * As predicate {@link PlayTimes} could be used.\n     * @param {() => boolean} predicate\n     * @returns {ISetup}\n     */\n    public play(predicate: () => boolean): ISetup {\n        this.playPredicate = predicate;\n        return this;\n    }\n\n    public playable(): boolean {\n        if (this.playPredicate === undefined) return true;\n        return this.playPredicate();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Times.html":{"url":"classes/Times.html","title":"class - Times","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Times\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/times.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _atLeastOnce\n                            \n                            \n                                    Private\n                                    Static\n                                _atMostOnce\n                            \n                            \n                                    Private\n                                    Static\n                                _never\n                            \n                            \n                                    Private\n                                    Static\n                                _once\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                AtLeast\n                            \n                            \n                                    Static\n                                AtLeastOnce\n                            \n                            \n                                    Static\n                                AtMost\n                            \n                            \n                                    Static\n                                AtMostOnce\n                            \n                            \n                                    Static\n                                Between\n                            \n                            \n                                    Static\n                                Exactly\n                            \n                            \n                                    Static\n                                Never\n                            \n                            \n                                    Static\n                                Once\n                            \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(evaluator: (callCount: number) => void, message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/times.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        evaluator\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _atLeastOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _atLeastOnce:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected >= 1, `Should be called at least once`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _atMostOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _atMostOnce:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected \n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _never:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected === 0, `Should be called never`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _once:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected === 1, `Should be called once`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        message:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtLeast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtLeast(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtLeastOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtLeastOnce()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtMost\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtMost(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtMostOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtMostOnce()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Between\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Between(callCountFrom: number, callCountTo: number, range: Range)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCountFrom\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callCountTo\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        range\n                                                        \n                                                                    Range\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Exactly\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Exactly(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Never()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Once()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export enum Range{\n    Exclusive,\n    Inclusive\n}\n\nexport class Times {\n    private static _once: Times =  new Times(expected => expected === 1, `Should be called once`);\n    private static _never: Times =  new Times(expected => expected === 0, `Should be called never`);\n    private static _atMostOnce: Times =  new Times(expected => expected  expected >= 1, `Should be called at least once`);\n\n    constructor(private evaluator: (callCount: number)=>boolean,\n                public message: string) {\n\n    }\n\n    public static AtLeast(callCount: number): Times {\n        return new Times(expected => expected >= callCount, `Should be called at least ${callCount} time(s)`);\n    }\n\n    public static AtLeastOnce(): Times {\n        return Times._atLeastOnce;\n    }\n\n    public static AtMost(callCount: number): Times {\n        return new Times(expected => expected  expected > callCountFrom && expected  expected >= callCountFrom && expected  expected === callCount, `Should be called exactly ${callCount} time(s)`);\n    }\n\n    public static Never(): Times {\n        return Times._never;\n    }\n\n    public static Once(): Times {\n        return Times._once;\n    }\n\n    public test(callCount: number): boolean {\n        return this.evaluator(callCount);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackedExpressionsFormatter.html":{"url":"classes/TrackedExpressionsFormatter.html","title":"class - TrackedExpressionsFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackedExpressionsFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/tracked-expressions-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/tracked-expressions-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(trackedExpressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/tracked-expressions-formatter.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\nimport {Expressions} from '../expressions';\n\nexport function trackedExpressionsFormatterFactory (): TrackedExpressionsFormatter {\n    return new TrackedExpressionsFormatter(expressionFormatterFactory());\n}\n\nexport class TrackedExpressionsFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expressions[]): string {\n        let result: string = '';\n        for (const expression of trackedExpressions) {\n            result += `${this.expressionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tracker.html":{"url":"classes/Tracker.html","title":"class - Tracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/tracker.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sequenceId: SequenceId)\n                    \n                \n                        \n                            \n                                Defined in lib/tracker.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequenceId\n                                                  \n                                                        \n                                                                    SequenceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            log\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        log:     TrackedAction[]\n\n                    \n                \n                    \n                        \n                            Type :     TrackedAction[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/tracker.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                        \n                                                                    MethodExpression | GetPropertyExpression | SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     TrackedAction[]\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetPropertyExpression, MethodExpression, SetPropertyExpression } from \"./expressions\";\nimport { SequenceId, sequenceIdFactory } from \"./sequence-id\";\n\nexport type TrackedAction = { id: number, expression: MethodExpression | GetPropertyExpression | SetPropertyExpression };\n\nexport class Tracker {\n    private log: TrackedAction[] = [];\n\n    constructor(private sequenceId: SequenceId) {\n\n    }\n\n    public add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression): void {\n        const record = {id: this.sequenceId.next(), expression: action};\n        this.log.push(record);\n    }\n\n    public get(): TrackedAction[] {\n        return this.log;\n    }\n}\n\nexport function trackerFactory(): Tracker {\n    return new Tracker(sequenceIdFactory());\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Verifier.html":{"url":"classes/Verifier.html","title":"class - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Verifier\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: ExpectedExpressionReflector, callCounter: CallCounter, verifyFormatter: VerifyFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    ExpectedExpressionReflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        callCounter\n                                                  \n                                                        \n                                                                    CallCounter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        verifyFormatter\n                                                  \n                                                        \n                                                                    VerifyFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/verifier.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyError.html":{"url":"classes/VerifyError.html","title":"class - VerifyError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyFormatter.html":{"url":"classes/VerifyFormatter.html","title":"class - VerifyFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/verify-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expectedExpressionFormatter: ExpectedExpressionFormatter, trackedExpressionsFormatter: TrackedExpressionsFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/verify-formatter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expectedExpressionFormatter\n                                                  \n                                                        \n                                                                    ExpectedExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        trackedExpressionsFormatter\n                                                  \n                                                        \n                                                                    TrackedExpressionsFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/verify-formatter.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {Expressions} from '../expressions';\nimport {ExpectedExpressionFormatter, expectedExpressionFormatterFactory} from './expected-expression-formatter';\nimport {TrackedExpressionsFormatter, trackedExpressionsFormatterFactory} from './tracked-expressions-formatter';\n\nexport function verifyFormatterFactory(): VerifyFormatter {\n    return new VerifyFormatter(expectedExpressionFormatterFactory(), trackedExpressionsFormatterFactory());\n}\n\nexport class VerifyFormatter {\n\n    constructor(\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string): string {\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\n        const delimiter = '-------------------------------------';\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nv2.7.0\n\nThe internal logic of interceptor has been updated in order to fix the issue (#6)\n\nv2.6.2\n\nDump function that dumps into console.log all interactions with the mocked object has been added\n\nv2.6.1\n\nThe verify methods can be used in fluent call\n\nv2.6.0\n\nThe play setup has been introduced\n\nv2.5.1\n\nThe latest setup has precedence\n\nv2.5.0\n\nIn case of false assertion the dump of the tracked expressions is printed.\n\nv2.4.0\n\nIt.IsAny predicate has been introduced.\n\nv2.3.1\n\nThe NPM package is compiled as es5 code.\n\nv2.3.0\n\nMock prototype has been introduced. Now it is possible to set/read prototype of mock with prototypeof function.\nAlso mock object supports Object.getPrototypeOf and Object.setPrototypeOf functions. You may need it to make work\ninstanceof operator.\n\nv2.1.0\n\nMock behaviours (strict and loose) have been introduced.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/call-counter.ts\n            \n            \n                class\n            \n            \n                CallCounter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/call-counter.ts\n            \n            \n                function\n            \n            \n                callCounterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/defined-setups.ts\n            \n            \n                class\n            \n            \n                DefinedSetups\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                lib/dump.ts\n            \n            \n                function\n            \n            \n                dump\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                class\n            \n            \n                ExpectedExpressionReflector\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                interface\n            \n            \n                IExpectedExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                variable\n            \n            \n                Proxy\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedGetPropertyExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedMethodExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedNamedMethodExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedSetPropertyExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expression-predicates.ts\n            \n            \n                class\n            \n            \n                It\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expression-predicates.ts\n            \n            \n                interface\n            \n            \n                IPredicate\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/arguments-matcher.ts\n            \n            \n                class\n            \n            \n                ArgumentsMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/constant-matcher.ts\n            \n            \n                class\n            \n            \n                ConstantMatcher\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/expression-matcher.ts\n            \n            \n                class\n            \n            \n                ExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                argumentsMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                expressionMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                methodMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                namedMethodMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                setPropertyMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/get.property-matcher.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpressionMatcher\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/method-matcher.ts\n            \n            \n                class\n            \n            \n                MethodExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/named.method-matcher.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/set.property-matcher.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                MethodExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpression\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpression\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/format-string.ts\n            \n            \n                function\n            \n            \n                format\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/constant-formatter.ts\n            \n            \n                class\n            \n            \n                ConstantFormatter\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/formatters/expected-expression-formatter.ts\n            \n            \n                class\n            \n            \n                ExpectedExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/expected-expression-formatter.ts\n            \n            \n                function\n            \n            \n                expectedExpressionFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/expression-formatter.ts\n            \n            \n                class\n            \n            \n                ExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                expressionFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                methodFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                namedMethodFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                setPropertyFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/get.property-formatter.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpressionFormatter\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/formatters/method-formatter.ts\n            \n            \n                class\n            \n            \n                MethodExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/named.method-formatter.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/set.property-formatter.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/tracked-expressions-formatter.ts\n            \n            \n                class\n            \n            \n                TrackedExpressionsFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/tracked-expressions-formatter.ts\n            \n            \n                function\n            \n            \n                trackedExpressionsFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/verify-formatter.ts\n            \n            \n                class\n            \n            \n                VerifyFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/verify-formatter.ts\n            \n            \n                function\n            \n            \n                verifyFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacksLooseStrategy\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacksStrictStrategy\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacks\n            \n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                interface\n            \n            \n                IInterceptorCallbacks\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                interface\n            \n            \n                IInterceptorCallbacksStrategy\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                function\n            \n            \n                interceptorCallbacksFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/interceptor.ts\n            \n            \n                class\n            \n            \n                Interceptor\n            \n            \n                12 %\n                (1/8)\n            \n        \n        \n            \n                \n                lib/interceptor.ts\n            \n            \n                variable\n            \n            \n                Proxy\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/mock.ts\n            \n            \n                class\n            \n            \n                Mock\n            \n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                lib/mock.ts\n            \n            \n                class\n            \n            \n                MockCore\n            \n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                lib/play-times.ts\n            \n            \n                class\n            \n            \n                PlayTimes\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                class\n            \n            \n                SequenceId\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                function\n            \n            \n                sequenceIdFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                variable\n            \n            \n                instance\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/setup.ts\n            \n            \n                class\n            \n            \n                Setup\n            \n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                lib/times.ts\n            \n            \n                class\n            \n            \n                Times\n            \n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                lib/tracker.ts\n            \n            \n                class\n            \n            \n                Tracker\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/tracker.ts\n            \n            \n                function\n            \n            \n                trackerFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                class\n            \n            \n                Verifier\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                class\n            \n            \n                VerifyError\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                function\n            \n            \n                verifierFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockBehavior   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            Range   (lib/.../times.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n        \n            \n                \n                    \n                        \n                        MockBehavior\n                    \n                \n                        \n                            \n                                 Strict\n                            \n                        \n                        \n                            \n                                 Loose\n                            \n                        \n            \n        \n\n    lib/times.ts\n    \n        \n            \n                \n                    \n                        \n                        Range\n                    \n                \n                        \n                            \n                                 Exclusive\n                            \n                        \n                        \n                            \n                                 Inclusive\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            argumentsMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            callCounterFactory   (lib/.../call-counter.ts)\n                        \n                        \n                            dump   (lib/.../dump.ts)\n                        \n                        \n                            expectedExpressionFormatterFactory   (lib/.../expected-expression-formatter.ts)\n                        \n                        \n                            expressionFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            expressionMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            format   (lib/.../format-string.ts)\n                        \n                        \n                            interceptorCallbacksFactory   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            methodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            methodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            sequenceIdFactory   (lib/.../sequence-id.ts)\n                        \n                        \n                            setPropertyFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            setPropertyMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            trackedExpressionsFormatterFactory   (lib/.../tracked-expressions-formatter.ts)\n                        \n                        \n                            trackerFactory   (lib/.../tracker.ts)\n                        \n                        \n                            verifierFactory   (lib/.../verifier.ts)\n                        \n                        \n                            verifyFormatterFactory   (lib/.../verify-formatter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expression-matchers/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            argumentsMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nargumentsMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expressionMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/call-counter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            callCounterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ncallCounterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/dump.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dump\n                            \n                            \n                        \n                    \n                \n                \n                    \ndump(mock)\n                    \n                \n\n\n\n\n                \n                    \n                            This function dumps into console.log all interactions with the mocked object\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mock\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/formatters/expected-expression-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expectedExpressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpectedExpressionFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/format-string.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \nformat(template, ...args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        template\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            interceptorCallbacksFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ninterceptorCallbacksFactory(definedSetups, tracker)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        tracker\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/sequence-id.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sequenceIdFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsequenceIdFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/tracked-expressions-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackedExpressionsFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackedExpressionsFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/tracker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackerFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackerFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/verifier.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifierFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifierFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/verify-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifyFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nmoq.ts | Documentation\nMoq for Typescript. Inspired by c# Moq library.\nImportant\nThis implementation depends on Proxy object.\nSo if your production code is not compatible with this I would recommend you separate you production code and testing code into dedicated projects.\nIf you need help with this then ask me.\nInstall\nnpm install moq.ts --save-dev\nQuick start\nmoq.ts as the original Moq library is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).\nYou can find a pretty full set of usages in the integration tests. Check out tests.integration folder.\n\n\nMocking property of objects\nMocking property setting\nMocking functions\nMocking functions of objects\nMock behavior\nMock prototype\n\n\n\nMocking property of objects\n-\nmock-get.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedGetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property1: number;\n    property2: number;\n    property3: number;\n    property4: number;\n    method(): void;\n}\n\nconst property4Name = 'property4';\nconst mockName = 'mock name is optional';\nconst mock = new Mock(mockName)\n    .setup(instance => instance.property1)\n    .returns(1)\n\n    .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property2'))\n    .returns(100)\n\n    //let's deny any write operation on the property for all values\n    .setup(instance => {instance.property2 = It.Is(() => true)})\n    .returns(false)\n\n    .setup(instance => instance.property3)\n    .callback(()=> 10 + 10)\n\n    .setup(instance => instance[property4Name])\n    .throws(new Error('property4 access'))\n\n    //since a method is a property that holds a pointer to a function\n    .setup(instance => instance.method)\n    .returns(()=>{console.log('The method was called')});\n\nconst object = mock.object();\nobject.method();\n\nmock.verify(instance=> instance.property1, Times.Never());Mocking property setting\n-\nThe documentation on returned value from 'set hook' on Proxy object\nmock-set.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedSetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property: number|any;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => {instance.property = 1})\n    //true - allows the write operation\n    .returns(true)\n\n    .setup(instance => It.Is((expression: ExpectedSetPropertyExpression) => expression.name === 'property' && expression.value === 2))\n    //false - denies the write operation\n    .returns(false)\n\n    .setup(instance => {instance.property = It.Is(value => value === 3)})\n    // allows the write operation\n    .callback(()=> true)\n\n    .setup(instance => {instance.property = value})\n    .throws(new Error('an object has been written into property'));\n\n\nconst object = mock.object();\nobject.property = 1;\n\nmock.verify(instance=> {instance.property = 1}, Times.Once());Mocking functions\n-\nmock-method.property.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestFunction {\n    (arg: number|any): string;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => instance(1))\n    .returns('called with 1')\n\n    .setup(instance => instance(2))\n    .callback((argument)=> argument === 2 ? 'called with 2' : `called with ${argument}`)\n\n    .setup(instance => instance(value))\n    .throws(new Error('Argument is object with date'))\n\n    .setup(instance => instance(It.Is(value => value === 4)))\n    .returns('called with 4');\n\nconst method = mock.object();\nconst actual = method(1);\n\nmock.verify(instance => instance(1), Times.Once());\nmock.verify(instance => instance(It.Is(value=> value === 1)), Times.Exactly(1));\n\n Mocking functions of objects\n -\nmock-named.method.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestObject {\n    method(arg1: number, arg2: string): Date;\n}\n\nconst values = ['a', 'b', 'c'];\n\nconst mock = new Mock()\n    .setup(instance => instance.method(1, values[0]))\n    .returns(new Date(2016))\n\n    .setup(instance => instance.method(It.Is(value => value === 2), values[1]))\n    .callback((arg1, arg2)=> new Date(2017 + arg1))\n\n    .setup(instance => instance.method(3, It.Is(value => value === values[2])))\n    .throws(new Error('Invoking method with 3 and c'));\n\nconst object = mock.object();\nconst actual = object.method(1, 'a');\n\nmock.verify(instance => instance.method(2, 'a'), Times.Never());Mock behavior\nYou can control mock behavior when accessing to a property without a corresponding setup. \n    mock = new Mock();\n    mock.setup(instance => It.Is(expression => true))\n      .throws(new Error(\"setup is missed\"));Accessing to an unset property or a method will return a pointer to a spy function;\nYou can call this function and it will be tracked.\nMock prototype\nIf you need to make work instanceof operator or you need to deal with prototype of the mock object you can \nuse prototypeof function of Mock class. Or you can use Object.getPrototypeOf or Object.setPrototypeOf functions\non mock object.\nclass TestObject implements ITestObject {\n\n}\n\nconst mock = new Mock()\n                .prototypeof(TestObject.prototype)\n                .object();\n\nmock.object() instanceof TestObject;// trueSponsored by 2BIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    41 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpectedExpressions   (lib/.../expected-expressions.ts)\n                        \n                        \n                            Expressions   (lib/.../expressions.ts)\n                        \n                        \n                            TrackedAction   (lib/.../tracker.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expected-expressions/expected-expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        ExpectedExpressions\n                    \n                \n                \n                    \n                        ExpectedExpressions:     ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It\n\n                    \n                \n            \n        \n\n    lib/expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        Expressions\n                    \n                \n                \n                    \n                        Expressions:     MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression\n\n                    \n                \n            \n        \n\n    lib/tracker.ts\n    \n        \n            \n                \n                    \n                        \n                        TrackedAction\n                    \n                \n                \n                    \n                        TrackedAction:     literal type\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            instance   (lib/.../sequence-id.ts)\n                        \n                        \n                            Proxy   (lib/.../interceptor.ts)\n                        \n                        \n                            Proxy   (lib/.../expected-expression-reflector.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/sequence-id.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            instance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        instance:     \n\n                    \n                \n                    \n                        \n                            Default value : new SequenceId()\n                        \n                    \n\n\n            \n        \n\n    lib/interceptor.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    lib/expected-expressions/expected-expression-reflector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
