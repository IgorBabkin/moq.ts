var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.1.5","fields":["title","body"],"fieldVectors":[["title/index.html",[0,2.471,1,2.186,2,0.196]],["body/index.html",[1,1.051,3,4.627,4,2.599,5,1.396,6,1.396,7,3.055,8,2.355,9,2.355,10,1.396,11,0.407,12,1.346,13,1.396,14,1.6,15,3.822,16,2.355,17,2.599,18,1.396,19,1.396,20,1.396,21,1.772,22,1.396,23,1.396,24,2.599,25,1.396,26,1.396,27,2.355,28,1.188,29,1.396,30,1.396,31,1.396,32,1.396,33,1.396,34,1.396,35,3.055,36,1.396,37,0.105,38,1.396,39,0.679,40,1.396,41,2.355,42,1.188,43,0.866,44,1.396,45,1.396,46,1.396,47,1.396,48,1.396,49,1.969,50,1.396,51,1.396,52,2.299,53,1.396,54,1.396,55,1.396,56,1.396,57,1.396,58,1.396,59,4.461,60,2.119,61,1.396,62,2.437,63,0.954,64,1.366,65,3.589,66,0.023,67,1.396,68,2.487,69,2.355,70,1.396,71,2.355,72,0.76,73,0.643,74,0.964,75,1.396,76,0.866,77,0.117,78,0.117,79,1.663,80,1.396,81,6.053,82,2.355,83,1.396,84,2.355,85,1.772,86,1.396,87,1.396,88,2.355,89,3.589,90,3.41,91,2.098,92,1.396,93,1.396,94,1.094,95,2.355,96,1.396,97,1.6,98,2.355,99,1.396,100,3.589,101,1.396,102,4.008,103,1.396,104,2.355,105,1.396,106,1.396,107,2.437,108,4.008,109,1.396,110,4.008,111,2.355,112,0.338,113,1.396,114,1.396,115,0.954,116,2.355,117,2.355,118,3.589,119,3.589,120,3.016,121,2.355,122,1.396,123,1.396,124,3.589,125,0.471,126,2.355,127,2.355,128,1.396,129,1.396,130,1.396,131,1.396,132,1.396,133,1.396,134,0.74,135,2.355,136,2.355,137,1.396,138,1.396,139,1.248,140,1.396,141,1.396,142,2.355,143,2.004,144,2.355,145,1.396,146,1.188,147,1.396,148,1.396,149,1.396,150,2.355,151,1.396,152,1.396,153,1.396,154,1.396,155,1.396,156,1.396,157,1.396,158,1.396,159,1.396,160,1.396,161,1.396,162,1.396,163,1.396,164,1.396,165,1.396,166,2.299,167,1.396,168,1.396,169,1.396,170,1.248,171,1.396,172,1.396,173,2.004,174,0.866,175,1.051,176,3.055,177,0.565,178,1.051,179,1.396,180,1.396,181,1.396,182,1.396,183,1.396,184,1.772,185,0.106,186,1.396,187,1.396,188,1.396,189,1.396,190,1.346,191,1.188,192,1.188,193,0.794,194,1.396,195,1.188,196,0.223,197,1.188,198,1.188,199,2.355,200,1.396,201,1.396,202,1.396,203,0.008,204,0.008]],["title/overview.html",[205,4.053]],["body/overview.html",[64,2.068,66,0.02,143,4.623,196,0.514,203,0.02,204,0.02,205,4.623,206,5.434]],["title/changelog.html",[0,2.471,1,2.186,207,2.905]],["body/changelog.html",[15,2.945,17,3.689,24,3.689,28,3.689,42,3.689,49,2.229,59,4.319,66,0.018,90,3.689,125,1.462,170,2.298,174,2.69,184,3.263,190,3.146,191,3.689,192,3.689,193,1.462,195,3.689,197,3.689,198,3.689,203,0.018,204,0.018,208,4.336,209,4.336,210,2.945,211,6.046,212,4.336,213,4.336,214,4.336,215,4.336,216,4.336,217,4.336,218,4.336,219,4.336,220,4.336,221,4.336,222,1.154,223,4.336,224,4.336,225,4.336,226,4.336,227,0.328,228,4.336,229,4.336,230,4.336,231,4.336]],["title/modules.html",[232,4.053]],["body/modules.html",[66,0.02,203,0.02,204,0.02,232,4.73]],["title/classes/ArgumentsMatcher.html",[196,0.33,233,2.366]],["body/classes/ArgumentsMatcher.html",[2,0.323,11,0.485,37,0.213,66,0.023,72,0.719,74,0.564,77,0.402,78,0.402,94,1.95,112,0.647,125,1.613,185,0.362,196,0.452,203,0.015,204,0.021,222,0.932,233,3.247,234,0.182,235,0.182,236,0.182,237,2.884,238,5.444,239,1.856,240,0.458,241,0.687,242,2.98,243,4.291,244,3.503,245,0.485,246,2.533,247,3.099,248,3.503,249,2.533,250,1.613,251,0.989,252,1.418,253,2.002,254,2.002,255,0.182,256,1.049,257,2.636,258,3.503,259,3.503,260,3.503,261,4.781,262,3.503,263,3.503]],["title/classes/CallCounter.html",[196,0.33,264,2.366]],["body/classes/CallCounter.html",[2,0.233,11,0.59,37,0.211,49,1.398,66,0.023,68,2.938,72,0.712,74,0.556,77,0.398,78,0.398,79,1.097,94,1.236,112,0.598,120,2.598,185,0.358,196,0.448,203,0.015,204,0.015,227,0.523,234,0.18,235,0.18,236,0.18,240,0.454,241,0.677,245,0.48,251,1.525,254,1.974,255,0.246,256,1.034,264,3.669,265,5.403,266,3.453,267,5.183,268,3.453,269,4.735,270,3.453,271,4.735,272,2.213,273,3.453,274,0.866,275,2.937,276,2.937,277,2.937,278,2.937,279,3.453,280,2.598,281,3.453]],["title/classes/ConstantFormatter.html",[196,0.33,282,1.992]],["body/classes/ConstantFormatter.html",[2,0.345,11,0.392,15,4.573,37,0.172,39,1.353,66,0.023,72,0.768,74,0.823,77,0.325,78,0.325,112,0.7,185,0.293,193,1.93,196,0.484,203,0.016,204,0.016,222,1.029,234,0.201,235,0.201,236,0.201,240,0.481,245,0.392,251,1.092,252,1.566,255,0.201,257,2.91,282,2.921,283,5.11,284,1.782,285,2.355,286,5.11,287,3.29,288,3.867,289,3.867,290,3.867,291,3.867,292,5.11,293,3.867,294,3.867]],["title/classes/ConstantMatcher.html",[196,0.33,243,2.366]],["body/classes/ConstantMatcher.html",[2,0.283,11,0.425,37,0.186,66,0.022,72,0.809,77,0.352,78,0.352,112,0.658,185,0.317,193,1.412,196,0.509,203,0.017,204,0.02,222,1.114,234,0.218,235,0.218,236,0.218,237,2.851,239,2.218,240,0.5,243,3.654,245,0.425,246,2.851,247,3.521,249,2.851,250,1.815,251,1.182,252,1.695,255,0.218,257,3.15,295,5.381,296,4.186,297,2.597]],["title/classes/ExpectedExpressionFormatter.html",[196,0.33,298,2.622]],["body/classes/ExpectedExpressionFormatter.html",[2,0.221,11,0.532,37,0.203,39,1.438,49,1.323,66,0.023,68,3.255,72,0.685,74,0.734,76,3.705,77,0.383,78,0.383,79,1.038,107,2.218,112,0.58,177,1.323,185,0.345,196,0.431,203,0.015,204,0.015,227,0.452,234,0.17,235,0.17,236,0.17,240,0.441,241,0.641,245,0.462,251,1.286,255,0.237,256,0.978,272,2.161,274,0.819,284,1.505,285,2.099,298,3.948,299,5.247,300,2.778,301,4.2,302,2.778,303,3.876,304,4.464,305,4.83,306,2.778,307,2.218,308,1.505,309,2.778,310,2.778,311,2.778,312,3.266,313,3.266,314,3.266,315,3.266,316,3.266,317,3.266,318,3.266]],["title/classes/ExpectedExpressionReflector.html",[196,0.33,319,1.992]],["body/classes/ExpectedExpressionReflector.html",[2,0.188,11,0.413,14,1.891,37,0.124,52,2.096,60,1.647,63,1.128,64,1.06,66,0.023,72,0.611,73,1.283,74,0.774,77,0.404,78,0.404,79,1.785,91,1.548,94,0.998,112,0.649,115,1.128,134,2.545,177,1.128,185,0.364,193,0.939,196,0.385,203,0.013,204,0.013,222,1.405,227,0.458,234,0.145,235,0.145,236,0.145,240,0.404,245,0.283,251,0.786,255,0.211,272,1.828,274,1.324,319,2.325,320,2.279,321,2.096,322,2.101,323,4.493,324,4.493,325,4.067,326,2.785,327,3.46,328,3.019,329,2.785,330,2.785,331,1.202,332,1.202,333,1.891,334,1.728,335,2.37,336,2.37,337,2.37,338,4.086,339,4.99,340,2.37,341,2.37,342,2.37,343,2.37,344,2.37,345,2.37,346,2.37,347,2.37,348,2.37]],["title/classes/ExpectedGetPropertyExpression.html",[63,1.411,196,0.33]],["body/classes/ExpectedGetPropertyExpression.html",[11,0.545,37,0.185,63,2.403,66,0.023,115,2.173,196,0.614,203,0.017,204,0.017,222,1.109,227,0.406,234,0.217,235,0.217,236,0.217,255,0.337,272,1.586,274,1.045,320,1.799,331,2.316,332,2.316,349,2.586,350,2.988,351,1.778,352,1.515,353,1.515,354,1.515]],["title/classes/ExpectedMethodExpression.html",[196,0.33,332,1.503]],["body/classes/ExpectedMethodExpression.html",[11,0.545,37,0.185,63,2.173,66,0.023,115,2.173,196,0.614,203,0.017,204,0.017,222,1.109,227,0.406,234,0.217,235,0.217,236,0.217,255,0.337,272,1.586,274,1.045,320,1.799,331,2.316,332,2.561,349,2.586,350,2.988,351,1.607,352,1.515,353,1.675,354,1.515]],["title/classes/ExpectedNamedMethodExpression.html",[196,0.33,331,1.503]],["body/classes/ExpectedNamedMethodExpression.html",[11,0.545,37,0.185,63,2.173,66,0.023,115,2.173,196,0.614,203,0.017,204,0.017,222,1.109,227,0.406,234,0.217,235,0.217,236,0.217,255,0.337,272,1.586,274,1.045,320,1.799,331,2.561,332,2.316,349,2.586,350,2.988,351,1.607,352,1.515,353,1.515,354,1.675]],["title/classes/ExpectedSetPropertyExpression.html",[115,1.411,196,0.33]],["body/classes/ExpectedSetPropertyExpression.html",[11,0.545,37,0.185,63,2.173,66,0.023,115,2.403,196,0.614,203,0.017,204,0.017,222,1.109,227,0.406,234,0.217,235,0.217,236,0.217,255,0.337,272,1.586,274,1.045,320,1.799,331,2.316,332,2.316,349,2.586,350,2.988,351,1.607,352,1.675,353,1.515,354,1.515]],["title/classes/ExpressionFormatter.html",[196,0.33,301,2.366]],["body/classes/ExpressionFormatter.html",[2,0.204,11,0.63,37,0.192,39,0.958,66,0.022,72,0.756,77,0.362,78,0.362,112,0.687,177,1.223,185,0.326,193,1.956,196,0.408,203,0.014,204,0.014,222,0.804,227,0.496,234,0.157,235,0.157,236,0.157,240,0.423,241,0.593,245,0.438,251,0.853,252,1.223,253,1.727,255,0.157,256,0.905,282,3.548,284,1.392,285,1.987,301,2.928,308,2.672,322,1.964,351,1.291,352,1.217,353,1.217,354,1.217,355,5.028,356,3.021,357,4.126,358,5.028,359,4.126,360,5.028,361,4.126,362,5.028,363,4.126,364,3.021,365,4.312,366,2.675,367,3.021,368,2.57,369,2.57,370,2.57,371,3.021,372,3.021,373,3.021,374,3.021,375,3.021,376,3.021]],["title/classes/ExpressionMatcher.html",[196,0.33,269,2.622]],["body/classes/ExpressionMatcher.html",[2,0.179,11,0.605,37,0.174,63,1.587,66,0.022,72,0.701,77,0.329,78,0.329,94,1.403,112,0.677,115,1.587,125,0.893,177,1.072,185,0.297,193,2.202,196,0.371,203,0.013,204,0.016,222,0.705,227,0.436,234,0.138,235,0.138,236,0.138,237,2.471,239,1.403,240,0.392,241,0.52,245,0.398,246,2.076,247,3.6,249,3.052,250,1.321,251,1.106,252,1.072,254,2.947,255,0.138,256,0.793,269,2.948,272,1.962,274,0.664,275,3.968,322,1.67,331,1.691,332,1.691,351,1.174,352,1.106,353,1.106,354,1.106,368,2.253,369,2.253,370,2.253,377,2.648,378,4.335,379,4.485,380,4.485,381,4.485,382,2.648,383,2.648,384,2.648,385,2.648,386,2.648,387,2.648]],["title/classes/GetPropertyExpression.html",[196,0.33,351,1.043]],["body/classes/GetPropertyExpression.html",[2,0.245,37,0.246,39,1.45,60,1.98,66,0.023,77,0.558,78,0.304,91,1.378,134,2.934,139,2.591,185,0.37,196,0.586,203,0.016,204,0.016,227,0.274,234,0.188,235,0.188,236,0.188,240,0.52,241,0.71,245,0.367,255,0.322,351,1.659,352,1.381,353,1.381,354,1.381,388,2.247,389,2.459,390,3.621,391,3.621,392,3.166,393,3.321,394,2.459]],["title/classes/GetPropertyExpressionFormatter.html",[196,0.33,357,2.622]],["body/classes/GetPropertyExpressionFormatter.html",[2,0.301,11,0.452,37,0.198,39,1.244,66,0.022,72,0.842,77,0.375,78,0.375,85,3.353,112,0.619,185,0.337,196,0.53,203,0.018,204,0.018,227,0.424,234,0.232,235,0.232,236,0.232,240,0.515,245,0.452,255,0.232,284,2.053,285,2.58,287,3.791,351,1.924,357,4.213,366,3.474,395,5.599,396,4.456]],["title/classes/GetPropertyExpressionMatcher.html",[196,0.33,378,2.622]],["body/classes/GetPropertyExpressionMatcher.html",[2,0.261,11,0.581,37,0.172,63,2.466,66,0.022,72,0.768,74,0.623,77,0.325,78,0.325,94,1.385,112,0.674,125,1.304,185,0.293,193,1.304,196,0.484,203,0.016,204,0.019,222,1.029,227,0.387,234,0.201,235,0.201,236,0.201,237,2.708,239,2.049,240,0.481,245,0.392,246,2.708,247,3.446,249,2.049,250,1.724,251,1.443,252,1.566,255,0.201,274,0.97,297,2.399,351,1.824,378,3.845,397,5.11,398,3.867,399,3.867,400,2.626,401,2.91,402,2.91]],["title/classes/InterceptorCallbacksLooseStrategy.html",[196,0.33,403,2.366]],["body/classes/InterceptorCallbacksLooseStrategy.html",[2,0.193,11,0.543,12,2.37,37,0.217,39,1.083,66,0.023,72,0.623,74,0.786,77,0.41,78,0.41,79,0.909,94,1.024,97,1.942,112,0.692,125,0.964,170,3.008,177,1.975,185,0.405,190,2.787,193,1.644,196,0.392,203,0.013,204,0.013,227,0.482,234,0.149,235,0.149,236,0.149,240,0.497,241,0.561,245,0.495,250,1.398,255,0.149,256,0.856,322,1.024,351,1.242,352,1.17,353,1.17,354,1.17,403,2.815,404,3.318,405,3.057,406,2.86,407,3.025,408,3.119,409,3.119,410,2.433,411,3.673,412,3.314,413,2.86,414,2.815,415,2.86,416,2.152,417,2.815,418,2.86,419,1.774,420,2.433,421,2.433,422,3.527,423,2.433,424,2.433,425,2.86,426,2.86]],["title/classes/InterceptorCallbacksStrictStrategy.html",[196,0.33,427,2.366]],["body/classes/InterceptorCallbacksStrictStrategy.html",[2,0.193,11,0.543,12,2.37,37,0.217,39,1.083,49,1.158,66,0.022,72,0.623,74,0.668,77,0.41,78,0.41,94,1.746,97,1.942,112,0.716,125,0.964,170,2.583,177,1.679,185,0.405,190,3.057,193,1.803,196,0.392,203,0.013,204,0.013,227,0.482,234,0.149,235,0.149,236,0.149,240,0.497,241,0.561,245,0.495,250,1.398,255,0.149,256,0.856,322,1.024,352,1.17,353,1.17,354,1.17,404,3.318,405,3.057,407,3.025,408,4.024,409,3.119,410,2.433,411,3.673,412,3.314,414,2.815,416,2.152,417,2.815,419,1.774,420,2.433,421,2.433,422,3.527,423,2.433,424,2.433,427,2.815,428,2.86,429,2.86,430,2.86,431,2.86,432,2.86,433,2.86,434,2.86]],["title/classes/It.html",[196,0.412]],["body/classes/It.html",[2,0.2,21,3.202,37,0.242,60,1.723,64,1.128,66,0.023,72,0.639,74,0.478,77,0.418,78,0.418,79,1.352,94,1.524,112,0.683,125,1,177,1.201,185,0.436,196,0.403,203,0.018,204,0.014,222,1.595,234,0.154,235,0.154,236,0.154,240,0.519,241,0.582,245,0.505,250,1.678,252,2.427,255,0.221,320,2.586,333,2.889,334,3.374,392,1.695,435,2.522,436,4.509,437,4.626,438,2.965,439,4.839,440,2.965,441,3.62,442,2.965,443,2.965,444,3.62,445,2.965,446,2.965,447,2.522,448,2.522,449,2.522,450,2.522,451,2.522]],["title/classes/MethodExpression.html",[196,0.33,353,0.984]],["body/classes/MethodExpression.html",[2,0.248,37,0.248,39,1.24,60,2.001,66,0.023,77,0.501,78,0.309,91,1.399,134,3.161,139,3.298,185,0.374,196,0.589,203,0.016,204,0.016,227,0.278,234,0.191,235,0.191,236,0.191,240,0.523,241,0.721,245,0.373,255,0.324,351,1.48,352,1.395,353,1.575,354,1.395,388,2.281,392,3.19,393,3.355,394,3.355,452,4.94]],["title/classes/MethodExpressionFormatter.html",[196,0.33,361,2.622]],["body/classes/MethodExpressionFormatter.html",[2,0.271,11,0.531,37,0.233,39,1.163,66,0.022,72,0.787,74,0.646,77,0.44,78,0.44,91,1.993,112,0.579,185,0.396,196,0.495,203,0.017,204,0.017,227,0.396,234,0.209,235,0.209,236,0.209,240,0.49,241,0.787,245,0.531,253,2.293,255,0.209,256,1.202,282,3.756,284,1.849,285,2.412,308,1.849,353,1.744,361,3.939,366,3.248,453,5.827,454,3.019,455,3.019,456,2.724,457,4.012]],["title/classes/MethodExpressionMatcher.html",[196,0.33,380,2.622]],["body/classes/MethodExpressionMatcher.html",[2,0.244,11,0.601,37,0.217,66,0.022,72,0.733,74,0.581,77,0.41,78,0.41,112,0.611,139,1.911,185,0.369,193,1.217,196,0.462,203,0.016,204,0.019,222,0.96,227,0.369,233,4.329,234,0.188,235,0.188,236,0.188,237,2.928,239,1.911,240,0.464,241,0.708,245,0.495,246,2.585,247,3.378,249,1.911,250,1.645,251,1.377,252,1.461,254,2.062,255,0.188,256,1.08,274,0.904,297,2.238,332,2.555,353,1.672,380,3.671,400,2.45,458,5.527,459,3.069,460,2.714,461,2.714,462,3.607,463,3.069,464,3.069]],["title/classes/Mock.html",[59,2.366,196,0.33]],["body/classes/Mock.html",[4,2.076,11,0.632,12,1.395,15,1.657,37,0.109,39,1.1,43,3.071,59,3.361,62,4.056,66,0.023,73,1.125,74,0.856,77,0.416,78,0.205,79,1.689,97,3.609,112,0.548,146,2.076,170,2.961,177,0.988,185,0.279,196,0.42,203,0.012,204,0.012,227,0.279,234,0.127,235,0.127,236,0.127,240,0.488,241,0.723,245,0.248,251,0.689,255,0.192,272,0.929,274,0.612,276,2.076,277,2.076,307,1.657,319,2.539,322,2.139,328,2.539,334,1.514,350,1.699,389,2.503,405,1.395,411,3.297,412,3.165,419,3.467,465,2.44,466,4.442,467,2.44,468,5.588,469,3.686,470,3.686,471,1.836,472,2.774,473,3.361,474,2.44,475,2.503,476,2.44,477,2.44,478,2.44,479,2.44,480,2.44,481,2.44,482,2.44,483,2.44,484,2.44,485,2.44,486,2.44,487,2.44,488,2.44,489,2.44,490,2.44,491,2.44,492,2.44,493,2.44,494,2.44,495,2.44,496,2.44,497,2.44,498,1.836,499,2.44,500,2.44,501,2.44]],["title/classes/NamedMethodExpression.html",[196,0.33,354,0.984]],["body/classes/NamedMethodExpression.html",[2,0.235,37,0.26,39,1.434,60,1.927,66,0.023,77,0.552,78,0.292,91,1.324,134,3.236,139,3.236,185,0.411,196,0.578,203,0.015,204,0.015,227,0.263,234,0.181,235,0.181,236,0.181,240,0.543,241,0.682,245,0.353,255,0.318,351,1.425,352,1.343,353,1.343,354,1.531,388,2.158,389,2.361,392,3.1,393,3.231,394,2.361,502,4.758,503,3.477]],["title/classes/NamedMethodExpressionFormatter.html",[196,0.33,363,2.622]],["body/classes/NamedMethodExpressionFormatter.html",[2,0.261,11,0.519,37,0.227,39,1.272,66,0.022,72,0.768,74,0.823,77,0.429,78,0.429,91,1.472,112,0.565,185,0.387,196,0.484,203,0.016,204,0.016,227,0.387,234,0.201,235,0.201,236,0.201,240,0.481,241,0.759,245,0.519,253,2.211,255,0.201,256,1.158,282,3.718,284,1.782,285,2.637,308,1.782,354,1.719,363,3.845,366,3.171,454,2.91,455,2.91,456,2.626,504,5.724,505,3.867,506,3.867,507,3.867,508,3.867]],["title/classes/NamedMethodExpressionMatcher.html",[196,0.33,381,2.622]],["body/classes/NamedMethodExpressionMatcher.html",[2,0.239,11,0.596,37,0.214,66,0.022,72,0.724,74,0.571,77,0.405,78,0.405,112,0.65,125,1.194,139,1.876,185,0.365,193,1.194,196,0.456,203,0.015,204,0.019,222,0.942,227,0.365,233,4.306,234,0.184,235,0.184,236,0.184,237,2.901,239,1.876,240,0.46,241,0.695,245,0.489,246,2.552,247,3.359,249,1.876,250,1.625,251,1.36,252,1.434,254,2.024,255,0.184,256,1.061,274,0.888,297,2.197,331,2.536,354,1.659,381,3.625,400,2.405,401,2.665,402,2.665,459,3.013,460,2.665,461,2.665,463,3.013,464,3.013,509,5.475,510,3.541]],["title/classes/PlayTimes.html",[196,0.33,511,2.964]],["body/classes/PlayTimes.html",[2,0.332,37,0.186,66,0.023,68,3.051,72,0.63,74,0.468,77,0.352,78,0.352,91,1.595,94,1.761,112,0.742,125,1.816,185,0.408,196,0.397,203,0.013,204,0.013,234,0.151,235,0.151,236,0.151,240,0.453,245,0.425,250,2.218,255,0.151,267,3.565,278,3.565,436,5.002,511,3.565,512,5.71,513,2.903,514,4.19,515,5.384,516,5.384,517,4.917,518,4.19,519,2.903,520,2.903,521,2.903,522,4.19,523,2.903,524,4.917,525,4.917,526,2.903]],["title/classes/SetPropertyExpression.html",[196,0.33,352,0.984]],["body/classes/SetPropertyExpression.html",[2,0.235,37,0.26,39,1.434,60,1.927,66,0.023,77,0.552,78,0.292,91,2.4,134,2.874,139,2.521,185,0.411,196,0.578,203,0.015,204,0.015,227,0.263,234,0.181,235,0.181,236,0.181,240,0.543,241,0.682,245,0.353,255,0.318,351,1.425,352,1.531,353,1.343,354,1.343,388,2.158,389,2.361,392,3.1,393,3.231,394,2.361,527,3.477,528,3.477,529,3.477]],["title/classes/SetPropertyExpressionFormatter.html",[196,0.33,359,2.622]],["body/classes/SetPropertyExpressionFormatter.html",[2,0.268,11,0.527,37,0.231,39,1.154,60,1.605,66,0.022,72,0.78,74,0.638,77,0.436,78,0.436,85,2.982,91,1.976,112,0.574,185,0.393,196,0.491,203,0.017,204,0.017,227,0.393,234,0.206,235,0.206,236,0.206,240,0.487,241,0.777,245,0.527,253,2.265,255,0.206,256,1.187,282,3.743,284,1.826,285,2.393,308,1.826,352,1.735,359,3.908,366,3.222,454,2.982,455,2.982,456,2.691,530,5.792,531,3.963,532,3.963]],["title/classes/SetPropertyExpressionMatcher.html",[196,0.33,379,2.622]],["body/classes/SetPropertyExpressionMatcher.html",[2,0.238,11,0.595,37,0.213,66,0.022,72,0.72,74,0.566,77,0.403,78,0.403,94,1.259,112,0.648,115,2.372,125,1.186,185,0.363,193,1.186,196,0.454,203,0.015,204,0.019,222,0.935,227,0.363,234,0.183,235,0.183,236,0.183,237,2.89,239,1.863,240,0.458,241,0.69,242,2.991,243,4.296,245,0.486,246,2.54,247,3.352,249,1.863,250,1.617,251,1.353,252,1.424,253,2.01,254,2.01,255,0.183,256,1.053,274,0.881,297,2.181,352,1.654,379,3.607,400,2.387,401,2.645,402,2.645,460,2.645,461,2.645,533,5.454,534,3.515,535,3.515,536,3.515]],["title/classes/TrackedExpressionsFormatter.html",[196,0.33,537,2.622]],["body/classes/TrackedExpressionsFormatter.html",[2,0.242,11,0.559,37,0.216,39,1.223,49,1.45,66,0.023,72,0.729,74,0.577,77,0.408,78,0.408,79,1.138,112,0.609,120,2.694,185,0.367,196,0.459,203,0.019,204,0.015,227,0.513,234,0.186,235,0.186,236,0.186,240,0.463,241,0.703,245,0.493,255,0.252,256,1.072,284,1.65,285,2.236,300,3.046,301,4.32,302,3.046,306,3.046,308,1.65,309,3.046,310,3.046,537,4.143,538,5.506,539,4.854,540,4.129,541,3.046,542,3.581,543,3.581,544,3.581,545,3.581]],["title/classes/Tracker.html",[196,0.33,412,1.846]],["body/classes/Tracker.html",[2,0.247,11,0.37,37,0.219,60,1.991,66,0.023,72,0.739,73,2.265,77,0.307,78,0.307,91,1.389,112,0.615,173,3.104,185,0.421,196,0.465,203,0.016,204,0.016,227,0.484,234,0.19,235,0.19,236,0.19,240,0.538,245,0.37,255,0.19,322,1.991,351,1.782,352,1.679,353,1.679,354,1.03,412,2.604,546,3.648,547,5.948,548,4.915,549,4.915,550,3.648,551,3.648,552,3.648,553,3.648,554,3.648,555,3.648]],["title/classes/Verifier.html",[43,2.162,196,0.33]],["body/classes/Verifier.html",[2,0.196,11,0.579,21,3.146,37,0.186,39,1.195,43,3.046,49,1.172,62,4.261,66,0.022,72,0.628,73,1.927,74,0.866,76,3.336,77,0.351,78,0.351,79,1.329,107,1.965,112,0.462,125,0.976,178,2.178,185,0.316,196,0.465,203,0.013,204,0.013,227,0.503,234,0.15,235,0.15,236,0.15,240,0.413,241,0.82,245,0.424,251,1.18,255,0.255,264,4.341,274,0.726,280,3.146,307,1.965,308,1.333,319,3.26,322,1.758,328,3.074,350,1.333,471,3.694,472,2.178,556,2.462,557,2.894,558,4.161,559,2.894,560,3.557,561,2.894,562,2.462,563,3.146,564,2.462,565,2.178,566,2.462,567,2.462,568,2.462,569,2.462,570,2.462,571,2.462,572,3.557,573,2.462,574,2.462,575,2.462,576,2.462,577,2.462]],["title/classes/VerifyError.html",[196,0.33,565,2.622]],["body/classes/VerifyError.html",[11,0.607,37,0.146,39,1.265,43,2.84,49,1.332,62,3.867,66,0.022,73,1.515,74,0.917,76,2.84,77,0.276,78,0.276,79,1.455,107,2.233,112,0.364,125,1.109,178,2.474,185,0.249,196,0.498,203,0.015,204,0.015,227,0.491,234,0.171,235,0.171,236,0.171,240,0.276,241,0.898,245,0.334,251,0.928,255,0.274,264,4.065,274,0.824,280,3.444,308,1.515,319,3.01,322,1.886,328,2.617,350,2.109,471,3.444,472,2.474,556,2.797,558,3.576,560,2.797,562,2.797,563,3.444,564,2.797,565,3.444,566,3.894,567,3.894,568,2.797,569,2.797,570,2.797,571,2.797,572,3.894,573,2.797,574,3.894,575,2.797,576,2.797,577,2.797,578,3.288]],["title/classes/VerifyFormatter.html",[196,0.33,558,2.366]],["body/classes/VerifyFormatter.html",[2,0.209,11,0.562,37,0.195,39,1.418,49,1.251,66,0.022,68,3.158,72,0.658,74,0.82,76,3.437,77,0.368,78,0.368,79,0.981,112,0.563,184,2.324,185,0.332,196,0.414,203,0.014,204,0.014,227,0.483,234,0.161,235,0.161,236,0.161,240,0.428,241,0.859,245,0.445,251,1.437,255,0.228,272,2.108,274,0.774,284,1.423,285,2.018,298,4.571,303,3.727,304,4.712,305,4.712,307,2.097,308,2.018,311,2.627,322,1.569,456,2.097,537,4.701,540,4.33,541,3.727,558,3.456,563,2.324,579,5.09,580,3.088,581,3.088,582,3.088,583,3.088,584,3.088,585,3.088,586,3.088,587,3.088,588,3.088,589,3.088]],["title/interfaces/IExpectedExpression.html",[64,1.326,328,1.992]],["body/interfaces/IExpectedExpression.html",[2,0.205,11,0.44,14,2.064,52,2.287,60,2.043,63,1.231,64,1.648,66,0.023,73,1.996,74,0.813,77,0.364,78,0.364,79,1.847,91,1.648,94,1.089,112,0.643,115,1.231,134,2.673,177,1.231,185,0.23,193,1.025,196,0.288,203,0.014,204,0.014,222,1.463,227,0.416,234,0.158,235,0.158,236,0.158,240,0.255,251,0.858,255,0.225,272,1.648,274,1.086,319,1.738,320,1.869,321,2.287,322,1.551,323,2.586,324,2.586,327,2.586,328,2.884,331,1.312,332,1.312,333,2.941,334,2.687,335,2.586,336,2.586,337,2.586,338,4.293,339,5.141,340,2.586,341,2.586,342,2.586,343,2.586,344,2.586,345,2.586,346,2.586,347,2.586,348,2.586,590,2.586,591,2.586,592,3.04]],["title/interfaces/IInterceptorCallbacks.html",[64,1.326,473,2.366]],["body/interfaces/IInterceptorCallbacks.html",[2,0.198,11,0.582,12,1.674,37,0.13,39,0.937,49,1.186,64,1.881,66,0.023,72,0.634,73,2.277,74,0.679,77,0.246,78,0.246,79,1.571,112,0.598,166,3.719,170,1.552,174,1.817,175,2.204,185,0.319,190,2.825,196,0.277,203,0.013,204,0.013,210,1.989,227,0.409,234,0.152,235,0.152,236,0.152,240,0.415,245,0.297,250,1.422,255,0.298,256,0.877,322,1.51,350,1.943,403,1.989,404,2.617,405,2.411,407,3.703,411,2.617,412,3.162,414,2.864,417,2.864,419,2.617,427,1.989,473,3.356,475,3.891,498,2.204,593,2.204,594,4.218,595,4.205,596,2.929,597,2.492,598,2.492,599,2.492,600,3.588,601,4.205,602,2.492,603,4.205,604,2.492,605,2.492,606,2.492,607,4.205,608,2.492,609,2.492,610,2.492,611,2.492,612,2.492]],["title/interfaces/IInterceptorCallbacksStrategy.html",[64,1.326,407,2.162]],["body/interfaces/IInterceptorCallbacksStrategy.html",[2,0.188,11,0.57,12,1.592,37,0.181,39,1.173,49,1.128,64,1.828,66,0.023,72,0.611,73,1.874,74,0.655,77,0.342,78,0.342,79,1.526,112,0.621,166,3.06,170,1.476,174,1.728,175,2.096,185,0.364,190,3.211,196,0.264,203,0.013,204,0.013,210,1.891,227,0.458,234,0.145,235,0.145,236,0.145,240,0.404,245,0.413,250,1.62,255,0.292,256,0.834,322,1.456,350,1.283,403,1.891,404,2.98,405,2.746,407,3.639,408,3.06,409,3.06,411,2.523,412,3.108,414,3.262,416,2.096,417,3.262,419,2.523,427,1.891,473,2.762,475,3.262,498,2.096,593,2.096,595,3.46,597,2.37,598,2.37,599,2.37,600,3.46,601,4.086,602,2.37,603,4.086,604,2.37,605,2.37,606,2.37,607,4.086,608,2.37,609,2.37,610,2.37,611,2.37,612,2.37,613,2.785,614,2.785]],["title/interfaces/IPredicate.html",[64,1.326,439,2.622]],["body/interfaces/IPredicate.html",[2,0.25,60,2.269,64,1.89,66,0.023,74,0.597,79,1.578,94,1.778,112,0.69,125,1.249,177,1.5,185,0.28,196,0.351,203,0.02,204,0.016,222,0.986,234,0.193,235,0.193,236,0.193,240,0.471,250,1.889,252,2.011,255,0.258,320,2.143,333,3.372,334,3.476,392,2.117,435,3.151,436,3.737,437,3.151,439,4.504,441,3.151,444,3.151,447,3.151,448,3.151,449,3.151,450,3.151,451,3.151,590,3.151,591,3.151,615,3.704]],["title/miscellaneous/variables.html",[616,1.661,617,3.567]],["body/miscellaneous/variables.html",[2,0.342,14,4.73,37,0.27,66,0.021,203,0.019,204,0.019,227,0.383,274,1.27,320,2.185,321,3.811,616,2.895,617,4.308,618,5.064]],["title/miscellaneous/typealiases.html",[616,1.661,619,4.193]],["body/miscellaneous/typealiases.html",[2,0.324,37,0.213,63,1.939,66,0.023,115,1.939,203,0.019,204,0.019,227,0.479,272,2.407,274,1.2,320,2.066,331,2.066,332,2.066,349,2.971,351,1.434,352,1.352,353,1.352,354,1.352,388,2.971,616,2.737,620,4.788]],["title/miscellaneous/enumerations.html",[616,1.661,621,3.567]],["body/miscellaneous/enumerations.html",[2,0.348,66,0.02,174,3.192,203,0.02,204,0.02,210,3.494,404,3.192,405,2.941,475,4.151,593,3.871,616,2.941,621,4.377,622,6.113,623,5.145,624,5.145,625,5.145]]],"invertedIndex":[["",{"_index":66,"title":{},"body":{"index.html":{},"overview.html":{},"changelog.html":{},"modules.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["0",{"_index":278,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{}}}],["1",{"_index":120,"title":{},"body":{"index.html":{},"classes/CallCounter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["10",{"_index":98,"title":{},"body":{"index.html":{}}}],["2",{"_index":124,"title":{},"body":{"index.html":{}}}],["2bit",{"_index":202,"title":{},"body":{"index.html":{}}}],["3",{"_index":127,"title":{},"body":{"index.html":{}}}],["4",{"_index":143,"title":{},"body":{"index.html":{},"overview.html":{}}}],["40",{"_index":206,"title":{},"body":{"overview.html":{}}}],["access",{"_index":102,"title":{},"body":{"index.html":{}}}],["action",{"_index":551,"title":{},"body":{"classes/Tracker.html":{}}}],["activestrategi",{"_index":606,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["actual",{"_index":144,"title":{},"body":{"index.html":{}}}],["add",{"_index":548,"title":{},"body":{"classes/Tracker.html":{}}}],["add(act",{"_index":549,"title":{},"body":{"classes/Tracker.html":{}}}],["alias",{"_index":620,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":121,"title":{},"body":{"index.html":{}}}],["any|it",{"_index":257,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{}}}],["appli",{"_index":343,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["arg",{"_index":134,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{}}}],["arg1",{"_index":160,"title":{},"body":{"index.html":{}}}],["arg2",{"_index":150,"title":{},"body":{"index.html":{}}}],["argument",{"_index":139,"title":{},"body":{"index.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{}}}],["argumentsmatch",{"_index":233,"title":{"classes/ArgumentsMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["array",{"_index":291,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["ask",{"_index":26,"title":{},"body":{"index.html":{}}}],["assert",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["assign",{"_index":532,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["b",{"_index":151,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":166,"title":{},"body":{"index.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["behaviour",{"_index":209,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":250,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["c",{"_index":7,"title":{},"body":{"index.html":{}}}],["call",{"_index":107,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["callback",{"_index":97,"title":{},"body":{"index.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{}}}],["callback((arg1",{"_index":158,"title":{},"body":{"index.html":{}}}],["callback((argu",{"_index":138,"title":{},"body":{"index.html":{}}}],["callbacks.loose.strategi",{"_index":598,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.loose.strategy.t",{"_index":406,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:16",{"_index":418,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:32",{"_index":415,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:9",{"_index":413,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.strict.strategi",{"_index":597,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.strict.strategy.t",{"_index":428,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:13",{"_index":431,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:29",{"_index":430,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:6",{"_index":429,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.t",{"_index":593,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["callbacks.ts:13",{"_index":614,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:14",{"_index":613,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:18",{"_index":596,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["callbacks/interceptor",{"_index":405,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["callcount",{"_index":264,"title":{"classes/CallCounter.html":{}},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["callcounter(expressionmatcherfactori",{"_index":281,"title":{},"body":{"classes/CallCounter.html":{}}}],["callcounterfactori",{"_index":280,"title":{},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n",{"_index":589,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["case",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":450,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["changelog",{"_index":207,"title":{"changelog.html":{}},"body":{}}],["check",{"_index":55,"title":{},"body":{"index.html":{}}}],["class",{"_index":196,"title":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}},"body":{"index.html":{},"overview.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["code",{"_index":17,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["compat",{"_index":18,"title":{},"body":{"index.html":{}}}],["compil",{"_index":42,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["const",{"_index":74,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["constant",{"_index":253,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constantformatt",{"_index":282,"title":{"classes/ConstantFormatter.html":{}},"body":{"classes/ConstantFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constantformatter().format(object[index",{"_index":294,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["constantmatch",{"_index":243,"title":{"classes/ConstantMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor",{"_index":241,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["constructor(arg",{"_index":394,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(argumentsmatch",{"_index":459,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["constructor(constantformatt",{"_index":454,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constructor(constantmatch",{"_index":242,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor(definedsetup",{"_index":410,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["constructor(expectedexpressionformatt",{"_index":580,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["constructor(expressionformatt",{"_index":300,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["constructor(expressionmatch",{"_index":268,"title":{},"body":{"classes/CallCounter.html":{}}}],["constructor(getpropertyexpressionmatch",{"_index":377,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["constructor(getpropertyformatt",{"_index":356,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["constructor(messag",{"_index":567,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["constructor(nam",{"_index":389,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(pred",{"_index":438,"title":{},"body":{"classes/It.html":{}}}],["constructor(priv",{"_index":256,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["constructor(publ",{"_index":392,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"interfaces/IPredicate.html":{}}}],["constructor(reflector",{"_index":557,"title":{},"body":{"classes/Verifier.html":{}}}],["control",{"_index":167,"title":{},"body":{"index.html":{}}}],["correspond",{"_index":169,"title":{},"body":{"index.html":{}}}],["count",{"_index":267,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{}}}],["count(expect",{"_index":271,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter",{"_index":562,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["counter.t",{"_index":266,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:12",{"_index":273,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:6",{"_index":270,"title":{},"body":{"classes/CallCounter.html":{}}}],["date",{"_index":118,"title":{},"body":{"index.html":{}}}],["date(2016",{"_index":155,"title":{},"body":{"index.html":{}}}],["date(2017",{"_index":159,"title":{},"body":{"index.html":{}}}],["deal",{"_index":194,"title":{},"body":{"index.html":{}}}],["declar",{"_index":335,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["dedic",{"_index":22,"title":{},"body":{"index.html":{}}}],["default",{"_index":173,"title":{},"body":{"index.html":{},"classes/Tracker.html":{}}}],["defin",{"_index":185,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["definedsetup",{"_index":411,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["definedsetups(expressionmatcherfactori",{"_index":497,"title":{},"body":{"classes/Mock.html":{}}}],["delimit",{"_index":587,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["deni",{"_index":88,"title":{},"body":{"index.html":{}}}],["depend",{"_index":13,"title":{},"body":{"index.html":{}}}],["descript",{"_index":292,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["description.push(new",{"_index":293,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["dev",{"_index":30,"title":{},"body":{"index.html":{}}}],["document",{"_index":9,"title":{},"body":{"index.html":{}}}],["dump",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":451,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["enum",{"_index":599,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["enumer",{"_index":621,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":566,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["error('an",{"_index":128,"title":{},"body":{"index.html":{}}}],["error('argu",{"_index":141,"title":{},"body":{"index.html":{}}}],["error('invok",{"_index":163,"title":{},"body":{"index.html":{}}}],["error('property4",{"_index":101,"title":{},"body":{"index.html":{}}}],["es5",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["exactli",{"_index":514,"title":{},"body":{"classes/PlayTimes.html":{}}}],["exactly(count",{"_index":518,"title":{},"body":{"classes/PlayTimes.html":{}}}],["except",{"_index":180,"title":{},"body":{"index.html":{}}}],["exclus",{"_index":624,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["expect",{"_index":251,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedexpress",{"_index":272,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/Mock.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectedexpressionformatt",{"_index":298,"title":{"classes/ExpectedExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpressionformatter(expressionformatterfactori",{"_index":312,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expectedexpressionformatterfactori",{"_index":311,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessag",{"_index":583,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessage}\\n${delimiter}\\ntrack",{"_index":588,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionreflector",{"_index":319,"title":{"classes/ExpectedExpressionReflector.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpress",{"_index":63,"title":{"classes/ExpectedGetPropertyExpression.html":{}},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectedgetpropertyexpression(nam",{"_index":340,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpression|it",{"_index":399,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["expectedmethodexpress",{"_index":332,"title":{"classes/ExpectedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmethodexpression(arg",{"_index":345,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedmethodexpression|it",{"_index":462,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["expectednamedmethodexpress",{"_index":331,"title":{"classes/ExpectedNamedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectednamedmethodexpression(nam",{"_index":341,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectednamedmethodexpression|it",{"_index":510,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["expectedsetpropertyexpress",{"_index":115,"title":{"classes/ExpectedSetPropertyExpression.html":{}},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectedsetpropertyexpression(nam",{"_index":342,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedsetpropertyexpression|it",{"_index":534,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["export",{"_index":255,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["express",{"_index":227,"title":{},"body":{"changelog.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{}}}],["expression(proxi",{"_index":348,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expression.arguments.foreach(arg",{"_index":505,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.nam",{"_index":85,"title":{},"body":{"index.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["expression.name}(${valu",{"_index":508,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.valu",{"_index":123,"title":{},"body":{"index.html":{}}}],["expressiondescript",{"_index":313,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressiondescription}${mockdescript",{"_index":316,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressionformatt",{"_index":301,"title":{"classes/ExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["expressionformatterfactori",{"_index":309,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["expressionmatch",{"_index":269,"title":{"classes/ExpressionMatcher.html":{}},"body":{"classes/CallCounter.html":{},"classes/ExpressionMatcher.html":{}}}],["expressionmatcherfactori",{"_index":276,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{}}}],["expressionproxi",{"_index":324,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expressionreflector",{"_index":478,"title":{},"body":{"classes/Mock.html":{}}}],["expressions.t",{"_index":349,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/expect",{"_index":274,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/express",{"_index":252,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{}}}],["expressions|it",{"_index":371,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["extend",{"_index":350,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["factori",{"_index":310,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["fals",{"_index":125,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/ArgumentsMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IPredicate.html":{}}}],["field",{"_index":117,"title":{},"body":{"index.html":{}}}],["file",{"_index":236,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["find",{"_index":50,"title":{},"body":{"index.html":{}}}],["folder",{"_index":58,"title":{},"body":{"index.html":{}}}],["format",{"_index":285,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(expect",{"_index":303,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(express",{"_index":366,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["format(object",{"_index":286,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["format(trackedexpress",{"_index":539,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["formatt",{"_index":308,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["formatted.join",{"_index":507,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatted.push(this.constantformatter.format(arg",{"_index":506,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatter.t",{"_index":284,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:10",{"_index":456,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:12",{"_index":364,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:15",{"_index":306,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatter.ts:18",{"_index":581,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["formatter.ts:22",{"_index":367,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:4",{"_index":455,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["formatter.ts:5",{"_index":287,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["formatter.ts:9",{"_index":302,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatters/verifi",{"_index":564,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["friendli",{"_index":45,"title":{},"body":{"index.html":{}}}],["full",{"_index":41,"title":{},"body":{"index.html":{}}}],["fulli",{"_index":48,"title":{},"body":{"index.html":{}}}],["function",{"_index":49,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["get",{"_index":0,"title":{"index.html":{},"changelog.html":{}},"body":{}}],["get.properti",{"_index":368,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["get.property.integrationtests.t",{"_index":61,"title":{},"body":{"index.html":{}}}],["getpropertyexpress",{"_index":351,"title":{"classes/GetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["getpropertyexpression(methodnam",{"_index":425,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["getpropertyexpressionformatt",{"_index":357,"title":{"classes/GetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["getpropertyexpressionmatch",{"_index":378,"title":{"classes/GetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{}}}],["getpropertyformatt",{"_index":365,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["getter",{"_index":396,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["hasnamedmethod",{"_index":408,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["hasnamedmethod(methodnam",{"_index":414,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["havebeencalledtim",{"_index":305,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["help",{"_index":25,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":477,"title":{},"body":{"classes/Mock.html":{}}}],["hold",{"_index":103,"title":{},"body":{"index.html":{}}}],["hook",{"_index":113,"title":{},"body":{"index.html":{}}}],["https://dvabuzyarov.github.io/moq.t",{"_index":10,"title":{},"body":{"index.html":{}}}],["iexpectedexpress",{"_index":328,"title":{"interfaces/IExpectedExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IExpectedExpression.html":{}}}],["iinterceptorcallback",{"_index":473,"title":{"interfaces/IInterceptorCallbacks.html":{}},"body":{"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["iinterceptorcallbacksstrategi",{"_index":407,"title":{"interfaces/IInterceptorCallbacksStrategy.html":{}},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["imock",{"_index":468,"title":{},"body":{"classes/Mock.html":{}}}],["implement",{"_index":12,"title":{},"body":{"index.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["import",{"_index":11,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["inclus",{"_index":625,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":2,"title":{"index.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["info",{"_index":234,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["inspir",{"_index":6,"title":{},"body":{"index.html":{}}}],["instal",{"_index":27,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":333,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/It.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["instance(1",{"_index":135,"title":{},"body":{"index.html":{}}}],["instance(2",{"_index":137,"title":{},"body":{"index.html":{}}}],["instance(it.is(valu",{"_index":142,"title":{},"body":{"index.html":{}}}],["instance(valu",{"_index":140,"title":{},"body":{"index.html":{}}}],["instance.method",{"_index":105,"title":{},"body":{"index.html":{}}}],["instance.method(1",{"_index":152,"title":{},"body":{"index.html":{}}}],["instance.method(2",{"_index":165,"title":{},"body":{"index.html":{}}}],["instance.method(3",{"_index":161,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(()=>tru",{"_index":186,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(valu",{"_index":156,"title":{},"body":{"index.html":{}}}],["instance.properti",{"_index":119,"title":{},"body":{"index.html":{}}}],["instance.property1",{"_index":82,"title":{},"body":{"index.html":{}}}],["instance.property2",{"_index":92,"title":{},"body":{"index.html":{}}}],["instance.property3",{"_index":96,"title":{},"body":{"index.html":{}}}],["instance[property4nam",{"_index":99,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":193,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{}}}],["integr",{"_index":54,"title":{},"body":{"index.html":{}}}],["intend",{"_index":33,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":409,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["intercepted(express",{"_index":417,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptedcallback",{"_index":481,"title":{},"body":{"classes/Mock.html":{}}}],["interceptor",{"_index":419,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptor(callback",{"_index":500,"title":{},"body":{"classes/Mock.html":{}}}],["interceptorcallback",{"_index":600,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacks(strictstrategi",{"_index":605,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksfactori",{"_index":474,"title":{},"body":{"classes/Mock.html":{}}}],["interceptorcallbacksfactory(definedsetup",{"_index":498,"title":{},"body":{"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksloosestrategi",{"_index":403,"title":{"classes/InterceptorCallbacksLooseStrategy.html":{}},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksloosestrategy(definedsetup",{"_index":604,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksstrictstrategi",{"_index":427,"title":{"classes/InterceptorCallbacksStrictStrategy.html":{}},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksstrictstrategy(definedsetup",{"_index":602,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorfactori",{"_index":479,"title":{},"body":{"classes/Mock.html":{}}}],["interceptorfactory(interceptedcallback",{"_index":483,"title":{},"body":{"classes/Mock.html":{}}}],["interfac",{"_index":64,"title":{"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}},"body":{"index.html":{},"overview.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/It.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["intern",{"_index":476,"title":{},"body":{"classes/Mock.html":{}}}],["introduc",{"_index":211,"title":{},"body":{"changelog.html":{}}}],["invok",{"_index":524,"title":{},"body":{"classes/PlayTimes.html":{}}}],["ipred",{"_index":439,"title":{"interfaces/IPredicate.html":{}},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["is(pred",{"_index":441,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["isani",{"_index":437,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["isetup",{"_index":470,"title":{},"body":{"classes/Mock.html":{}}}],["isetupinvok",{"_index":469,"title":{},"body":{"classes/Mock.html":{}}}],["it(pred",{"_index":447,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["it).pred",{"_index":289,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it).test(left",{"_index":297,"title":{},"body":{"classes/ConstantMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["it.i",{"_index":93,"title":{},"body":{"index.html":{}}}],["it.is(${(object",{"_index":288,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it.is(()=>tru",{"_index":187,"title":{},"body":{"index.html":{}}}],["it.is((express",{"_index":84,"title":{},"body":{"index.html":{}}}],["it.is(valu",{"_index":126,"title":{},"body":{"index.html":{}}}],["it.isani",{"_index":221,"title":{},"body":{"changelog.html":{}}}],["itestfunct",{"_index":133,"title":{},"body":{"index.html":{}}}],["itestobject",{"_index":65,"title":{},"body":{"index.html":{}}}],["latest",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":249,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["left.foreach((lvalu",{"_index":260,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.length",{"_index":258,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.nam",{"_index":401,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["let'",{"_index":87,"title":{},"body":{"index.html":{}}}],["lib/cal",{"_index":265,"title":{},"body":{"classes/CallCounter.html":{}}}],["lib/expect",{"_index":320,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/It.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{}}}],["lib/express",{"_index":237,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["lib/expressions.t",{"_index":388,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["lib/expressions.ts:11",{"_index":452,"title":{},"body":{"classes/MethodExpression.html":{}}}],["lib/expressions.ts:18",{"_index":390,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:19",{"_index":391,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:2",{"_index":502,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/expressions.ts:24",{"_index":527,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:25",{"_index":528,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:26",{"_index":529,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:4",{"_index":503,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/formatters/const",{"_index":283,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["lib/formatters/expect",{"_index":299,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["lib/formatters/express",{"_index":355,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["lib/formatters/get.properti",{"_index":395,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["lib/formatters/method",{"_index":453,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["lib/formatters/named.method",{"_index":504,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["lib/formatters/set.properti",{"_index":530,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["lib/formatters/track",{"_index":538,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["lib/formatters/verifi",{"_index":579,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["lib/interceptor",{"_index":404,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["lib/interceptor.t",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/mock.t",{"_index":465,"title":{},"body":{"classes/Mock.html":{}}}],["lib/mock.ts:62",{"_index":467,"title":{},"body":{"classes/Mock.html":{}}}],["lib/play",{"_index":512,"title":{},"body":{"classes/PlayTimes.html":{}}}],["lib/times.t",{"_index":623,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/tracker.t",{"_index":546,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:13",{"_index":552,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:7",{"_index":553,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:9",{"_index":550,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/verifier.t",{"_index":556,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["lib/verifier.ts:17",{"_index":559,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:26",{"_index":561,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:7",{"_index":578,"title":{},"body":{"classes/VerifyError.html":{}}}],["librari",{"_index":8,"title":{},"body":{"index.html":{}}}],["log",{"_index":547,"title":{},"body":{"classes/Tracker.html":{}}}],["loos",{"_index":210,"title":{},"body":{"changelog.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["loosestrategi",{"_index":603,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["magic",{"_index":38,"title":{},"body":{"index.html":{}}}],["make",{"_index":191,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["match",{"_index":204,"title":{},"body":{"index.html":{},"overview.html":{},"changelog.html":{},"modules.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["matched(left",{"_index":246,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher",{"_index":254,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.t",{"_index":239,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:12",{"_index":461,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:15",{"_index":382,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:24",{"_index":383,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:4",{"_index":244,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matcher.ts:5",{"_index":296,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matcher.ts:6",{"_index":460,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:7",{"_index":398,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matcher.ts:9",{"_index":248,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/argu",{"_index":238,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/const",{"_index":295,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matchers/express",{"_index":275,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpressionMatcher.html":{}}}],["matchers/factori",{"_index":277,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{}}}],["matchers/get.properti",{"_index":397,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matchers/method",{"_index":458,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["matchers/named.method",{"_index":509,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["matchers/set.properti",{"_index":533,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["matter",{"_index":181,"title":{},"body":{"index.html":{}}}],["messag",{"_index":574,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["method",{"_index":72,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["method(1",{"_index":145,"title":{},"body":{"index.html":{}}}],["method(arg1",{"_index":149,"title":{},"body":{"index.html":{}}}],["method.property.integrationtests.t",{"_index":132,"title":{},"body":{"index.html":{}}}],["methodexpress",{"_index":353,"title":{"classes/MethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["methodexpressionformatt",{"_index":361,"title":{"classes/MethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{}}}],["methodexpressionmatch",{"_index":380,"title":{"classes/MethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{}}}],["methodformatt",{"_index":360,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["methodnam",{"_index":416,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["minimalist",{"_index":46,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":616,"title":{"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["mock",{"_index":59,"title":{"classes/Mock.html":{}},"body":{"index.html":{},"changelog.html":{},"classes/Mock.html":{}}}],["mock(mocknam",{"_index":80,"title":{},"body":{"index.html":{}}}],["mock.object",{"_index":108,"title":{},"body":{"index.html":{}}}],["mock.verify(inst",{"_index":110,"title":{},"body":{"index.html":{}}}],["mockbehavior",{"_index":475,"title":{},"body":{"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["mockbehavior.loos",{"_index":611,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["mockbehavior.strict",{"_index":175,"title":{},"body":{"index.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["mockcor",{"_index":466,"title":{},"body":{"classes/Mock.html":{}}}],["mockdescript",{"_index":315,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["mocknam",{"_index":76,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["modul",{"_index":232,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moq",{"_index":4,"title":{},"body":{"index.html":{},"classes/Mock.html":{}}}],["moq.t",{"_index":3,"title":{},"body":{"index.html":{}}}],["name",{"_index":77,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["named.method",{"_index":370,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["named.method.integrationtests.t",{"_index":148,"title":{},"body":{"index.html":{}}}],["namedmethodexpress",{"_index":354,"title":{"classes/NamedMethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["namedmethodexpressionformatt",{"_index":363,"title":{"classes/NamedMethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{}}}],["namedmethodexpressionmatch",{"_index":381,"title":{"classes/NamedMethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["namedmethodformatt",{"_index":362,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["need",{"_index":24,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["never",{"_index":515,"title":{},"body":{"classes/PlayTimes.html":{}}}],["new",{"_index":79,"title":{},"body":{"index.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["now",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":28,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["null",{"_index":433,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["number",{"_index":68,"title":{},"body":{"index.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/VerifyFormatter.html":{}}}],["number|ani",{"_index":116,"title":{},"body":{"index.html":{}}}],["object",{"_index":15,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/ConstantFormatter.html":{},"classes/Mock.html":{}}}],["object.getprototypeof",{"_index":197,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["object.method",{"_index":109,"title":{},"body":{"index.html":{}}}],["object.method(1",{"_index":164,"title":{},"body":{"index.html":{}}}],["object.properti",{"_index":130,"title":{},"body":{"index.html":{}}}],["object.setprototypeof",{"_index":198,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["onc",{"_index":516,"title":{},"body":{"classes/PlayTimes.html":{}}}],["oper",{"_index":90,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["option",{"_index":78,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["origin",{"_index":32,"title":{},"body":{"index.html":{}}}],["out",{"_index":56,"title":{},"body":{"index.html":{}}}],["overview",{"_index":205,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["paramet",{"_index":245,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["part",{"_index":182,"title":{},"body":{"index.html":{}}}],["pass",{"_index":572,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["play",{"_index":525,"title":{},"body":{"classes/PlayTimes.html":{}}}],["playtim",{"_index":511,"title":{"classes/PlayTimes.html":{}},"body":{"classes/PlayTimes.html":{}}}],["pointer",{"_index":104,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":214,"title":{},"body":{"changelog.html":{}}}],["preced",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["predic",{"_index":222,"title":{},"body":{"changelog.html":{},"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["predicates.t",{"_index":435,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["predicates.ts:1",{"_index":615,"title":{},"body":{"interfaces/IPredicate.html":{}}}],["predicates.ts:11",{"_index":442,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:15",{"_index":443,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:19",{"_index":445,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:6",{"_index":440,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:7",{"_index":446,"title":{},"body":{"classes/It.html":{}}}],["pretti",{"_index":51,"title":{},"body":{"index.html":{}}}],["print",{"_index":228,"title":{},"body":{"changelog.html":{}}}],["privat",{"_index":322,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["product",{"_index":16,"title":{},"body":{"index.html":{}}}],["project",{"_index":23,"title":{},"body":{"index.html":{}}}],["properti",{"_index":60,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Tracker.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["property1",{"_index":67,"title":{},"body":{"index.html":{}}}],["property2",{"_index":69,"title":{},"body":{"index.html":{}}}],["property3",{"_index":70,"title":{},"body":{"index.html":{}}}],["property4",{"_index":71,"title":{},"body":{"index.html":{}}}],["property4nam",{"_index":75,"title":{},"body":{"index.html":{}}}],["prototyp",{"_index":190,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["prototype[methodnam",{"_index":434,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["prototypeof",{"_index":195,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["prototypeof(prototyp",{"_index":493,"title":{},"body":{"classes/Mock.html":{}}}],["prototypeof(testobject",{"_index":200,"title":{},"body":{"index.html":{}}}],["proxi",{"_index":14,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/variables.html":{}}}],["proxy(funct",{"_index":346,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["proxy:ani",{"_index":337,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["public",{"_index":240,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["quick",{"_index":31,"title":{},"body":{"index.html":{}}}],["rang",{"_index":622,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["recommend",{"_index":19,"title":{},"body":{"index.html":{}}}],["refactor",{"_index":44,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":325,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflect(express",{"_index":327,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflectedinfo",{"_index":323,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflector",{"_index":471,"title":{},"body":{"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["reflector.t",{"_index":321,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/variables.html":{}}}],["reflector.ts:15",{"_index":330,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:17",{"_index":326,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:41",{"_index":329,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:7",{"_index":592,"title":{},"body":{"interfaces/IExpectedExpression.html":{}}}],["result",{"_index":203,"title":{},"body":{"index.html":{},"overview.html":{},"changelog.html":{},"modules.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["result.length",{"_index":545,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["result.substr(0",{"_index":544,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["return",{"_index":112,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["returns('cal",{"_index":136,"title":{},"body":{"index.html":{}}}],["returns(()=>{console.log('th",{"_index":106,"title":{},"body":{"index.html":{}}}],["returns(1",{"_index":83,"title":{},"body":{"index.html":{}}}],["returns(100",{"_index":86,"title":{},"body":{"index.html":{}}}],["returns(fals",{"_index":95,"title":{},"body":{"index.html":{}}}],["returns(new",{"_index":154,"title":{},"body":{"index.html":{}}}],["returns(tru",{"_index":122,"title":{},"body":{"index.html":{}}}],["returns(undefined);mockbehavior.loos",{"_index":188,"title":{},"body":{"index.html":{}}}],["right",{"_index":247,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["right.length",{"_index":259,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["right[index",{"_index":262,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["rightexpress",{"_index":400,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.argu",{"_index":464,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["rightexpression.nam",{"_index":402,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.valu",{"_index":536,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["rvalu",{"_index":261,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["save",{"_index":29,"title":{},"body":{"index.html":{}}}],["separ",{"_index":20,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":517,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequence(sequ",{"_index":522,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequence[index",{"_index":526,"title":{},"body":{"classes/PlayTimes.html":{}}}],["set",{"_index":52,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["set.properti",{"_index":369,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["set.property.integrationtests.t",{"_index":114,"title":{},"body":{"index.html":{}}}],["set/read",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["setbehaviorstrategi",{"_index":594,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["setbehaviorstrategy(behavior",{"_index":595,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["setbehaviorstrategy(behaviorstrategi",{"_index":495,"title":{},"body":{"classes/Mock.html":{}}}],["setbehaviorstrategy(mockbehavior.loos",{"_index":171,"title":{},"body":{"index.html":{}}}],["setbehaviorstrategy(mockbehavior.strict);th",{"_index":172,"title":{},"body":{"index.html":{}}}],["setpropertyexpress",{"_index":352,"title":{"classes/SetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["setpropertyexpressionformatt",{"_index":359,"title":{"classes/SetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["setpropertyexpressionmatch",{"_index":379,"title":{"classes/SetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["setpropertyformatt",{"_index":358,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["setup",{"_index":170,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["setup(express",{"_index":484,"title":{},"body":{"classes/Mock.html":{}}}],["setup(inst",{"_index":81,"title":{},"body":{"index.html":{}}}],["setup(mock",{"_index":501,"title":{},"body":{"classes/Mock.html":{}}}],["setup.invok",{"_index":424,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke((expression).argu",{"_index":422,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke([(expression).valu",{"_index":423,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setupfactori",{"_index":480,"title":{},"body":{"classes/Mock.html":{}}}],["signatur",{"_index":591,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["simpl",{"_index":34,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":235,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["spi",{"_index":189,"title":{},"body":{"index.html":{}}}],["start",{"_index":1,"title":{"index.html":{},"changelog.html":{}},"body":{"index.html":{}}}],["static",{"_index":436,"title":{},"body":{"classes/It.html":{},"classes/PlayTimes.html":{},"interfaces/IPredicate.html":{}}}],["still",{"_index":47,"title":{},"body":{"index.html":{}}}],["strict",{"_index":174,"title":{},"body":{"index.html":{},"changelog.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["strictstrategi",{"_index":601,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["string",{"_index":39,"title":{},"body":{"index.html":{},"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["strongli",{"_index":36,"title":{},"body":{"index.html":{}}}],["super",{"_index":499,"title":{},"body":{"classes/Mock.html":{}}}],["super(messag",{"_index":568,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["support",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":334,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/It.html":{},"classes/Mock.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["target",{"_index":338,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["test",{"_index":21,"title":{},"body":{"index.html":{},"classes/It.html":{},"classes/Verifier.html":{}}}],["test(expect",{"_index":560,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["test(inst",{"_index":444,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["testobject",{"_index":199,"title":{},"body":{"index.html":{}}}],["tests.integr",{"_index":57,"title":{},"body":{"index.html":{}}}],["therefor",{"_index":40,"title":{},"body":{"index.html":{}}}],["this.activestrategi",{"_index":607,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.activestrategy.hasnamedmethod(methodnam",{"_index":609,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.activestrategy.intercepted(express",{"_index":608,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.argu",{"_index":393,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["this.argumentsmatcher.matched(left.argu",{"_index":463,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["this.callcounter.count(express",{"_index":571,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.constantformatter.format(express",{"_index":376,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.argu",{"_index":457,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.valu",{"_index":531,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["this.constantmatcher.matched(left.valu",{"_index":535,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["this.constantmatcher.matched(lvalu",{"_index":263,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["this.definedsetups.add(expectedexpress",{"_index":487,"title":{},"body":{"classes/Mock.html":{}}}],["this.definedsetups.get(express",{"_index":421,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.definedsetups.get(getpropertyexpress",{"_index":426,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["this.definedsetups.hasnamedmethod(methodnam",{"_index":432,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.expectedexpressionformatter.format(expect",{"_index":584,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.expressionformatter.format(expect",{"_index":314,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["this.expressionformatter.format(expression)}\\n",{"_index":543,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["this.expressionmatcher.matched(express",{"_index":279,"title":{},"body":{"classes/CallCounter.html":{}}}],["this.expressionproxi",{"_index":347,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.expressionreflector.reflect(express",{"_index":486,"title":{},"body":{"classes/Mock.html":{}}}],["this.getpropertyexpressionmatcher.matched(left",{"_index":384,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.getpropertyformatter.format(express",{"_index":372,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.interceptedcallbacks.setbehaviorstrategy(behaviorstrategi",{"_index":496,"title":{},"body":{"classes/Mock.html":{}}}],["this.interceptor",{"_index":482,"title":{},"body":{"classes/Mock.html":{}}}],["this.interceptor.object",{"_index":492,"title":{},"body":{"classes/Mock.html":{}}}],["this.interceptor.prototypeof(prototyp",{"_index":494,"title":{},"body":{"classes/Mock.html":{}}}],["this.log",{"_index":555,"title":{},"body":{"classes/Tracker.html":{}}}],["this.log.push(act",{"_index":554,"title":{},"body":{"classes/Tracker.html":{}}}],["this.loosestrategi",{"_index":612,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.methodexpressionmatcher.matched(left",{"_index":386,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.methodformatter.format(express",{"_index":374,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.nam",{"_index":491,"title":{},"body":{"classes/Mock.html":{}}}],["this.namedmethodexpressionmatcher.matched(left",{"_index":387,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.namedmethodformatter.format(express",{"_index":375,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.predicate(inst",{"_index":449,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["this.reflectedinfo",{"_index":339,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.reflector.reflect(expect",{"_index":570,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.setpropertyexpressionmatcher.matched(left",{"_index":385,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.setpropertyformatter.format(express",{"_index":373,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.setupfactory(thi",{"_index":485,"title":{},"body":{"classes/Mock.html":{}}}],["this.strictstrategi",{"_index":610,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.trackedexpressionsformatter.format(trackedexpress",{"_index":586,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.tracker.add(express",{"_index":420,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.tracker.get",{"_index":490,"title":{},"body":{"classes/Mock.html":{}}}],["this.verifier.test(express",{"_index":489,"title":{},"body":{"classes/Mock.html":{}}}],["this.verifyformatter.format(express",{"_index":575,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["thisarg",{"_index":344,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["throw",{"_index":178,"title":{},"body":{"index.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["throws(new",{"_index":100,"title":{},"body":{"index.html":{}}}],["time",{"_index":62,"title":{},"body":{"index.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["time(",{"_index":318,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["times.exactly(1",{"_index":147,"title":{},"body":{"index.html":{}}}],["times.messag",{"_index":576,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.never());mock",{"_index":111,"title":{},"body":{"index.html":{}}}],["times.onc",{"_index":146,"title":{},"body":{"index.html":{},"classes/Mock.html":{}}}],["times.once());mock",{"_index":131,"title":{},"body":{"index.html":{}}}],["times.t",{"_index":513,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.test(callcount",{"_index":573,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.ts:12",{"_index":520,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:16",{"_index":521,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:25",{"_index":523,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:3",{"_index":519,"title":{},"body":{"classes/PlayTimes.html":{}}}],["timesmessag",{"_index":304,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["timesmessage.tolowercas",{"_index":317,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["track",{"_index":184,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpress",{"_index":540,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatt",{"_index":537,"title":{"classes/TrackedExpressionsFormatter.html":{}},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatter(expressionformatterfactori",{"_index":542,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["trackedexpressionsformatterfactori",{"_index":541,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsmessag",{"_index":585,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["tracker",{"_index":412,"title":{"classes/Tracker.html":{}},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/Tracker.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["tri",{"_index":448,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["true",{"_index":94,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["truesponsor",{"_index":201,"title":{},"body":{"index.html":{}}}],["type",{"_index":37,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":619,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror",{"_index":179,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":290,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["typescript",{"_index":5,"title":{},"body":{"index.html":{}}}],["unam",{"_index":590,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["undefin",{"_index":177,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["unset",{"_index":176,"title":{},"body":{"index.html":{}}}],["us",{"_index":35,"title":{},"body":{"index.html":{}}}],["usag",{"_index":53,"title":{},"body":{"index.html":{}}}],["v2.1.0",{"_index":208,"title":{},"body":{"changelog.html":{}}}],["v2.3.0",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["v2.3.1",{"_index":217,"title":{},"body":{"changelog.html":{}}}],["v2.4.0",{"_index":220,"title":{},"body":{"changelog.html":{}}}],["v2.5.0",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["v2.5.1",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["valu",{"_index":91,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Tracker.html":{},"interfaces/IExpectedExpression.html":{}}}],["values[0",{"_index":153,"title":{},"body":{"index.html":{}}}],["values[1",{"_index":157,"title":{},"body":{"index.html":{}}}],["values[2",{"_index":162,"title":{},"body":{"index.html":{}}}],["var",{"_index":336,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["variabl",{"_index":617,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifi",{"_index":43,"title":{"classes/Verifier.html":{}},"body":{"index.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifier(new",{"_index":569,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifierfactori",{"_index":472,"title":{},"body":{"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verify(express",{"_index":488,"title":{},"body":{"classes/Mock.html":{}}}],["verifyerror",{"_index":565,"title":{"classes/VerifyError.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyerror(messag",{"_index":577,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyformatt",{"_index":558,"title":{"classes/VerifyFormatter.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["verifyformatter(expectedexpressionformatterfactori",{"_index":582,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["verifyformatterfactori",{"_index":563,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["void",{"_index":73,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/Mock.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["want",{"_index":183,"title":{},"body":{"index.html":{}}}],["without",{"_index":168,"title":{},"body":{"index.html":{}}}],["work",{"_index":192,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["write",{"_index":89,"title":{},"body":{"index.html":{}}}],["written",{"_index":129,"title":{},"body":{"index.html":{}}}],["ye",{"_index":307,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nmoq.ts\nMoq for Typescript. Inspired by c# Moq library.\nDocumentation https://dvabuzyarov.github.io/moq.ts/\nImportant\nThis implementation depends on Proxy object.\nSo if your production code is not compatible with this I would recommend you separate you production code and testing code into dedicated projects.\nIf you need help with this then ask me.\nInstall\nnpm install moq.ts --save-dev\nQuick start\nmoq.ts as the original Moq library is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).\nYou can find a pretty full set of usages in the integration tests. Check out tests.integration folder.\nMocking property of objects\n-\nmock-get.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedGetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property1: number;\n    property2: number;\n    property3: number;\n    property4: number;\n    method(): void;\n}\n\nconst property4Name = 'property4';\nconst mockName = 'mock name is optional';\nconst mock = new Mock(mockName)\n    .setup(instance => instance.property1)\n    .returns(1)\n\n    .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property2'))\n    .returns(100)\n\n    //let's deny any write operation on the property for all values\n    .setup(instance => {instance.property2 = It.Is(() => true)})\n    .returns(false)\n\n    .setup(instance => instance.property3)\n    .callback(()=> 10 + 10)\n\n    .setup(instance => instance[property4Name])\n    .throws(new Error('property4 access'))\n\n    //since a method is a property that holds a pointer to a function\n    .setup(instance => instance.method)\n    .returns(()=>{console.log('The method was called')});\n\nconst object = mock.object();\nobject.method();\n\nmock.verify(instance=> instance.property1, Times.Never());Mocking property setting\n-\nThe documentation on returned value from 'set hook' on Proxy object\nmock-set.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedSetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property: number|any;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => {instance.property = 1})\n    //true - allows the write operation\n    .returns(true)\n\n    .setup(instance => It.Is((expression: ExpectedSetPropertyExpression) => expression.name === 'property' && expression.value === 2))\n    //false - denies the write operation\n    .returns(false)\n\n    .setup(instance => {instance.property = It.Is(value => value === 3)})\n    // allows the write operation\n    .callback(()=> true)\n\n    .setup(instance => {instance.property = value})\n    .throws(new Error('an object has been written into property'));\n\n\nconst object = mock.object();\nobject.property = 1;\n\nmock.verify(instance=> {instance.property = 1}, Times.Once());Mocking functions\n-\nmock-method.property.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestFunction {\n    (arg: number|any): string;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => instance(1))\n    .returns('called with 1')\n\n    .setup(instance => instance(2))\n    .callback((argument)=> argument === 2 ? 'called with 2' : `called with ${argument}`)\n\n    .setup(instance => instance(value))\n    .throws(new Error('Argument is object with date'))\n\n    .setup(instance => instance(It.Is(value => value === 4)))\n    .returns('called with 4');\n\nconst method = mock.object();\nconst actual = method(1);\n\nmock.verify(instance => instance(1), Times.Once());\nmock.verify(instance => instance(It.Is(value=> value === 1)), Times.Exactly(1)); Mocking functions of objects\n -\nmock-named.method.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestObject {\n    method(arg1: number, arg2: string): Date;\n}\n\nconst values = ['a', 'b', 'c'];\n\nconst mock = new Mock()\n    .setup(instance => instance.method(1, values[0]))\n    .returns(new Date(2016))\n\n    .setup(instance => instance.method(It.Is(value => value === 2), values[1]))\n    .callback((arg1, arg2)=> new Date(2017 + arg1))\n\n    .setup(instance => instance.method(3, It.Is(value => value === values[2])))\n    .throws(new Error('Invoking method with 3 and c'));\n\nconst object = mock.object();\nconst actual = object.method(1, 'a');\n\nmock.verify(instance => instance.method(2, 'a'), Times.Never());Mock behavior\nYou can control mock behavior when accessing to a property without a corresponding setup. \n    mock = new Mock()\n    .setBehaviorStrategy(MockBehavior.Loose)\n    //or\n    .setBehaviorStrategy(MockBehavior.Strict);The default behavior is strict.\nMockBehavior.Strict\nAccessing to an unset property will return undefined value;\nAccessing to an unset method of an object will throw TypeError exception; It does not matter if a method is a part of mocked type.\nIf you want to track a method you can define a default setup:\nconst mock = new Mock()\n    .setup(instance => instance.method(It.Is(()=>true), It.Is(()=>true)))\n    .returns(undefined);MockBehavior.Loose\nAccessing to an unset property or a method will return a pointer to a spy function;\nYou can call this function and it will be tracked.\nMock prototype\nIf you need to make work instanceof operator or you need to deal with prototype of the mock object you can \nuse prototypeof function of Mock class. Or you can use Object.getPrototypeOf or Object.setPrototypeOf functions\non mock object.\nclass TestObject implements ITestObject {\n\n}\n\nconst mock = new Mock()\n                .prototypeof(TestObject)\n                .object();\n\nmock.object() instanceof TestObject;// trueSponsored by 2BIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        40 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nv2.1.0\n\nMock behaviours (strict and loose) have been introduced.\n\nv2.3.0\n\nMock prototype has been introduced. Now it is possible to set/read prototype of mock with prototypeof function.\nAlso mock object supports Object.getPrototypeOf and Object.setPrototypeOf functions. You may need it to make work \ninstanceof operator.\n\nv2.3.1\n\nThe NPM package is compiled as es5 code.\nv2.4.0\n\nIt.IsAny predicate has been introduced.\nv2.5.0\n\nIn case of false assertion the dump of the tracked expressions is printed.\nv2.5.1\n\nThe latest setup has precedence\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArgumentsMatcher.html":{"url":"classes/ArgumentsMatcher.html","title":"class - ArgumentsMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArgumentsMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/arguments-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantMatcher: ConstantMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/arguments-matcher.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantMatcher\n                                                              \n                                                                    \n                                                                                ConstantMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: any[], right: any | It[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/arguments-matcher.ts:9\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                any[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                any | It[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: any[], right: (any|It)[]): boolean{\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        let matched = true;\n        left.forEach((lvalue, index) =>{\n            const rvalue = right[index];\n            matched = this.constantMatcher.matched(lvalue, rvalue) === true ? matched : false;\n        });\n\n        return matched;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallCounter.html":{"url":"classes/CallCounter.html","title":"class - CallCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CallCounter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/call-counter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        count\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(expressionMatcher: ExpressionMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/call-counter.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expressionMatcher\n                                                              \n                                                                    \n                                                                                ExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        count\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    count(expected: ExpectedExpressions, expressions: Expressions[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/call-counter.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expected\n                                                                \n                                                                    \n                                                                                ExpectedExpressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                expressions\n                                                                \n                                                                    \n                                                                                Expressions[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     number\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from './expected-expressions/expected-expressions';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\n\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count(expected: ExpectedExpressions, expressions: Expressions[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true)\n                count += 1;\n        }\n\n        return count;\n    }\n}\n\nexport function callCounterFactory(): CallCounter {\n    return new CallCounter(expressionMatcherFactory());\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantFormatter.html":{"url":"classes/ConstantFormatter.html","title":"class - ConstantFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/constant-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(object: any | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/constant-formatter.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                object\n                                                                \n                                                                    \n                                                                                any | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantFormatter {\n\n    public format(object: any|It): string {\n        if (object instanceof It) return `It.Is(${(object as It).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const index in object)\n                description.push(new ConstantFormatter().format(object[index]));\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantMatcher.html":{"url":"classes/ConstantMatcher.html","title":"class - ConstantMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/constant-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: any, right: any | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/constant-matcher.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                any\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                any | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantMatcher {\n\n    public matched(left: any, right: any|It): boolean {\n        if (right instanceof It)\n            return (right as It).test(left);\n        return left === right;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionFormatter.html":{"url":"classes/ExpectedExpressionFormatter.html","title":"class - ExpectedExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expected-expression-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(expressionFormatter: ExpressionFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/expected-expression-formatter.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expressionFormatter\n                                                              \n                                                                    \n                                                                                ExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/expected-expression-formatter.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expected\n                                                                \n                                                                    \n                                                                                ExpectedExpressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                timesMessage\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                haveBeenCalledTimes\n                                                                \n                                                                    \n                                                                                number\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                mockName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        yes\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\n\nexport function expectedExpressionFormatterFactory (): ExpectedExpressionFormatter {\n    return new ExpectedExpressionFormatter(expressionFormatterFactory());\n}\n\nexport class ExpectedExpressionFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\n        const expressionDescription = this.expressionFormatter.format(expected);\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : '';\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionReflector.html":{"url":"classes/ExpectedExpressionReflector.html","title":"class - ExpectedExpressionReflector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionReflector\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Private\n                                        reflectedInfo\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Private\n                                        expressionProxy\n                                    \n                                    \n                                            Public\n                                        reflect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Private\n                                        expressionProxy\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    expressionProxy()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:17\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     any\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        reflect\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    reflect(expression: IExpectedExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:41\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                IExpectedExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     ExpectedExpressions\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Private\n                                        reflectedInfo\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    reflectedInfo:     \n            \n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:15\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedGetPropertyExpression.html":{"url":"classes/ExpectedGetPropertyExpression.html","title":"class - ExpectedGetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedGetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GetPropertyExpression\n            \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMethodExpression.html":{"url":"classes/ExpectedMethodExpression.html","title":"class - ExpectedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MethodExpression\n            \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNamedMethodExpression.html":{"url":"classes/ExpectedNamedMethodExpression.html","title":"class - ExpectedNamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NamedMethodExpression\n            \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedSetPropertyExpression.html":{"url":"classes/ExpectedSetPropertyExpression.html","title":"class - ExpectedSetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedSetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SetPropertyExpression\n            \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionFormatter.html":{"url":"classes/ExpressionFormatter.html","title":"class - ExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expression-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(getPropertyFormatter: GetPropertyExpressionFormatter, setPropertyFormatter: SetPropertyExpressionFormatter, methodFormatter: MethodExpressionFormatter, namedMethodFormatter: NamedMethodExpressionFormatter, constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/expression-formatter.ts:12\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                getPropertyFormatter\n                                                              \n                                                                    \n                                                                                GetPropertyExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                setPropertyFormatter\n                                                              \n                                                                    \n                                                                                SetPropertyExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                methodFormatter\n                                                              \n                                                                    \n                                                                                MethodExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                namedMethodFormatter\n                                                              \n                                                                    \n                                                                                NamedMethodExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                constantFormatter\n                                                              \n                                                                    \n                                                                                ConstantFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: Expressions | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/expression-formatter.ts:22\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                Expressions | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, SetPropertyExpression, NamedMethodExpression,\n    MethodExpression\n} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {GetPropertyExpressionFormatter} from './get.property-formatter';\nimport {SetPropertyExpressionFormatter} from './set.property-formatter';\nimport {MethodExpressionFormatter} from './method-formatter';\nimport {NamedMethodExpressionFormatter} from './named.method-formatter';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: Expressions|It): string {\n        if (expression instanceof GetPropertyExpression) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyExpression) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof MethodExpression) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodExpression) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionMatcher.html":{"url":"classes/ExpressionMatcher.html","title":"class - ExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/expression-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(getPropertyExpressionMatcher: GetPropertyExpressionMatcher, setPropertyExpressionMatcher: SetPropertyExpressionMatcher, methodExpressionMatcher: MethodExpressionMatcher, namedMethodExpressionMatcher: NamedMethodExpressionMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/expression-matcher.ts:15\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                getPropertyExpressionMatcher\n                                                              \n                                                                    \n                                                                                GetPropertyExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                setPropertyExpressionMatcher\n                                                              \n                                                                    \n                                                                                SetPropertyExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                methodExpressionMatcher\n                                                              \n                                                                    \n                                                                                MethodExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                namedMethodExpressionMatcher\n                                                              \n                                                                    \n                                                                                NamedMethodExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: Expressions, right: ExpectedExpressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/expression-matcher.ts:24\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                Expressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedExpressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {GetPropertyExpressionMatcher} from './get.property-matcher';\nimport {SetPropertyExpressionMatcher} from './set.property-matcher';\nimport {MethodExpressionMatcher} from './method-matcher';\nimport {NamedMethodExpressionMatcher} from './named.method-matcher';\nimport {\n    Expressions, GetPropertyExpression, SetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from '../expressions';\nimport {\n    ExpectedExpressions, ExpectedGetPropertyExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression\n} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher) {\n\n    }\n\n    public matched(left: Expressions, right: ExpectedExpressions): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyExpression && (right instanceof ExpectedGetPropertyExpression || right instanceof It))\n            return this.getPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof SetPropertyExpression && (right instanceof ExpectedSetPropertyExpression || right instanceof It))\n            return this.setPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof MethodExpression && (right instanceof ExpectedMethodExpression || right instanceof It))\n            return this.methodExpressionMatcher.matched(left, >right);\n        if (left instanceof NamedMethodExpression && (right instanceof ExpectedNamedMethodExpression || right instanceof It))\n            return this.namedMethodExpressionMatcher.matched(left, >right);\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpression.html":{"url":"classes/GetPropertyExpression.html","title":"class - GetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        name\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(name: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:18\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                name\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        name\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:19\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionFormatter.html":{"url":"classes/GetPropertyExpressionFormatter.html","title":"class - GetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/get.property-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: GetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/get.property-formatter.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                GetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\n\nexport class GetPropertyExpressionFormatter{\n\n    public format(expression: GetPropertyExpression): string{\n        return `Getter of \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionMatcher.html":{"url":"classes/GetPropertyExpressionMatcher.html","title":"class - GetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/get.property-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/get.property-matcher.ts:7\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                GetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedGetPropertyExpression | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ExpectedGetPropertyExpression} from '../expected-expressions/expected-expressions';\n\nexport class GetPropertyExpressionMatcher{\n\n    public matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksLooseStrategy.html":{"url":"classes/InterceptorCallbacksLooseStrategy.html","title":"class - InterceptorCallbacksLooseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksLooseStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        hasNamedMethod\n                                    \n                                    \n                                            Public\n                                        intercepted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(definedSetups: DefinedSetups, tracker: Tracker)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                definedSetups\n                                                              \n                                                                    \n                                                                                DefinedSetups\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                tracker\n                                                              \n                                                                    \n                                                                                Tracker\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        hasNamedMethod\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:32\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                methodName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                prototype\n                                                                \n                                                                    \n                                                                                any\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        intercepted\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:16\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                Expressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksLooseStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const getPropertyExpression = new GetPropertyExpression(methodName);\n        const setup = this.definedSetups.get(getPropertyExpression);\n        return setup !== undefined ? false : true;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksStrictStrategy.html":{"url":"classes/InterceptorCallbacksStrictStrategy.html","title":"class - InterceptorCallbacksStrictStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksStrictStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        hasNamedMethod\n                                    \n                                    \n                                            Public\n                                        intercepted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(definedSetups: DefinedSetups, tracker: Tracker)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                definedSetups\n                                                              \n                                                                    \n                                                                                DefinedSetups\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                tracker\n                                                              \n                                                                    \n                                                                                Tracker\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        hasNamedMethod\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:29\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                methodName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                prototype\n                                                                \n                                                                    \n                                                                                any\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        intercepted\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                Expressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {Expressions, MethodExpression, NamedMethodExpression, SetPropertyExpression} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksStrictStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const hasNamedMethod = this.definedSetups.hasNamedMethod(methodName);\n        if (hasNamedMethod === true) return true;\n\n        if (prototype !== null && prototype[methodName] instanceof Function)\n            return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/It.html":{"url":"classes/It.html","title":"class - It","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  It\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        predicate\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Static\n                                        Is\n                                    \n                                    \n                                            Static\n                                        IsAny\n                                    \n                                    \n                                            Public\n                                        test\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(predicate: IPredicate)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                predicate\n                                                              \n                                                                    \n                                                                                IPredicate\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Static\n                                        Is\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    Is(predicate: IPredicate)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:11\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                predicate\n                                                                \n                                                                    \n                                                                                IPredicate\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     It | any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Static\n                                        IsAny\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    IsAny()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     It | any\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        test\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    test(instance: T)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:19\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                instance\n                                                                \n                                                                    \n                                                                                T\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        predicate\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    predicate:     IPredicate\n            \n                                \n                            \n                                \n                                    \n                                        Type :     IPredicate\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:7\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpression.html":{"url":"classes/MethodExpression.html","title":"class - MethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        arguments\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(args: any[])\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:11\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                args\n                                                              \n                                                                    \n                                                                                any[]\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        arguments\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    arguments:     any[]\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any[]\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:11\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionFormatter.html":{"url":"classes/MethodExpressionFormatter.html","title":"class - MethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/method-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/method-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantFormatter\n                                                              \n                                                                    \n                                                                                ConstantFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: MethodExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/method-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                MethodExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {MethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class MethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: MethodExpression): string{\n        const value = this.constantFormatter.format(expression.arguments);\n        return `(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionMatcher.html":{"url":"classes/MethodExpressionMatcher.html","title":"class - MethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/method-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(argumentsMatcher: ArgumentsMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/method-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                argumentsMatcher\n                                                              \n                                                                    \n                                                                                ArgumentsMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: MethodExpression, right: ExpectedMethodExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/method-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                MethodExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedMethodExpression | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {MethodExpression} from '../expressions';\nimport {ExpectedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class MethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: MethodExpression, right: ExpectedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mock.html":{"url":"classes/Mock.html","title":"class - Mock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mock\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MockCore\n            \n\n\n\n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(name?: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/mock.ts:62\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                name\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        yes\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n\n    \n\n\n    \n        import {IMock, ISetupInvoke, ISetup} from './moq';\nimport {Interceptor} from './interceptor';\nimport {ExpectedExpressionReflector, IExpectedExpression} from './expected-expressions/expected-expression-reflector';\nimport {Tracker} from './tracker';\nimport {DefinedSetups} from './defined-setups';\nimport {Setup} from './setup';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\nimport {Times} from './times';\nimport {Verifier, verifierFactory} from './verifier';\nimport {\n    IInterceptorCallbacks, interceptorCallbacksFactory,\n    MockBehavior\n} from './interceptor-callbacks/interceptor-callbacks';\n\n/**\n * @internal\n * @hidden\n * @private\n */\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n    constructor(\n                private expressionReflector: ExpectedExpressionReflector,\n                private interceptorFactory: (callbacks: IInterceptorCallbacks)=> Interceptor,\n                private setupFactory: (mock: IMock)=> ISetupInvoke,\n                private definedSetups: DefinedSetups,\n                public tracker: Tracker,\n                private verifier: Verifier,\n                private interceptedCallbacks: IInterceptorCallbacks,\n                public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): void {\n        times = times === undefined ? Times.Once() : times;\n        this.verifier.test(expression, times, this.tracker.get(), this.name);\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = new Tracker();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpression.html":{"url":"classes/NamedMethodExpression.html","title":"class - NamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        arguments\n                                    \n                                    \n                                            Public\n                                        name\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(name: string, args: any[])\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:2\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                name\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                args\n                                                              \n                                                                    \n                                                                                any[]\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        arguments\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    arguments:     any[]\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any[]\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:2\n                                        \n                                    \n            \n            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        name\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:4\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionFormatter.html":{"url":"classes/NamedMethodExpressionFormatter.html","title":"class - NamedMethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/named.method-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/named.method-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantFormatter\n                                                              \n                                                                    \n                                                                                ConstantFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: NamedMethodExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/named.method-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                NamedMethodExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {NamedMethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class NamedMethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: NamedMethodExpression): string{\n        const formatted: string[] = [];\n\n        expression.arguments.forEach(arg=>{\n            formatted.push(this.constantFormatter.format(arg));\n        });\n\n        const value = formatted.join(', ');\n        return `${expression.name}(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionMatcher.html":{"url":"classes/NamedMethodExpressionMatcher.html","title":"class - NamedMethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/named.method-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(argumentsMatcher: ArgumentsMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/named.method-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                argumentsMatcher\n                                                              \n                                                                    \n                                                                                ArgumentsMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/named.method-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                NamedMethodExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedNamedMethodExpression | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {NamedMethodExpression} from '../expressions';\nimport {ExpectedNamedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class NamedMethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name)\n            return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlayTimes.html":{"url":"classes/PlayTimes.html","title":"class - PlayTimes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlayTimes\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/play-times.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Static\n                                        Exactly\n                                    \n                                    \n                                            Static\n                                        Never\n                                    \n                                    \n                                            Static\n                                        Once\n                                    \n                                    \n                                            Static\n                                        Sequence\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Static\n                                        Exactly\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    Exactly(count: number)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/play-times.ts:3\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                count\n                                                                \n                                                                    \n                                                                                number\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Static\n                                        Never\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    Never()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/play-times.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Static\n                                        Once\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    Once()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/play-times.ts:16\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Static\n                                        Sequence\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    Sequence(sequence: boolean[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/play-times.ts:25\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                sequence\n                                                                \n                                                                    \n                                                                                boolean[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        export class PlayTimes {\n\n    public static Exactly(count: number): () => boolean {\n        let invoked = 0;\n        return () => {\n            if (invoked >= count) return false;\n            invoked++;\n            return true;\n        };\n    }\n\n    public static Never(): () => boolean {\n        return () => false;\n    }\n\n    public static Once(): () => boolean {\n        let played = false;\n        return () => {\n            if (played) return false;\n            played = true;\n            return true;\n        };\n    }\n\n    public static Sequence(sequence: boolean[]): () => boolean {\n        let index = 0;\n        return () => {\n            const value = sequence[index];\n            index++;\n            return value;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpression.html":{"url":"classes/SetPropertyExpression.html","title":"class - SetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        name\n                                    \n                                    \n                                            Public\n                                        value\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(name: string, value: any)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:24\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                name\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                value\n                                                              \n                                                                    \n                                                                                any\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        name\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:25\n                                        \n                                    \n            \n            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        value\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    value:     any\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:26\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionFormatter.html":{"url":"classes/SetPropertyExpressionFormatter.html","title":"class - SetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/set.property-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/set.property-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantFormatter\n                                                              \n                                                                    \n                                                                                ConstantFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: SetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/set.property-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                SetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {SetPropertyExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class SetPropertyExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: SetPropertyExpression): string{\n        const value = this.constantFormatter.format(expression.value);\n        return `Assignment of ${value} to property \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionMatcher.html":{"url":"classes/SetPropertyExpressionMatcher.html","title":"class - SetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/set.property-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantMatcher: ConstantMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/set.property-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantMatcher\n                                                              \n                                                                    \n                                                                                ConstantMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/set.property-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                SetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedSetPropertyExpression | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpectedSetPropertyExpression} from '../expected-expressions/expected-expressions';\nimport {SetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class SetPropertyExpressionMatcher{\n\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackedExpressionsFormatter.html":{"url":"classes/TrackedExpressionsFormatter.html","title":"class - TrackedExpressionsFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackedExpressionsFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/tracked-expressions-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(expressionFormatter: ExpressionFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/tracked-expressions-formatter.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expressionFormatter\n                                                              \n                                                                    \n                                                                                ExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(trackedExpressions: Expressions[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/tracked-expressions-formatter.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                trackedExpressions\n                                                                \n                                                                    \n                                                                                Expressions[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\nimport {Expressions} from '../expressions';\n\nexport function trackedExpressionsFormatterFactory (): TrackedExpressionsFormatter {\n    return new TrackedExpressionsFormatter(expressionFormatterFactory());\n}\n\nexport class TrackedExpressionsFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expressions[]): string {\n        let result: string = '';\n        for (const expression of trackedExpressions) {\n            result += `${this.expressionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tracker.html":{"url":"classes/Tracker.html","title":"class - Tracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tracker\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/tracker.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Private\n                                        log\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        add\n                                    \n                                    \n                                            Public\n                                        get\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        add\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/tracker.ts:9\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                action\n                                                                \n                                                                    \n                                                                                MethodExpression | GetPropertyExpression | SetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        get\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    get()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/tracker.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     []\n            \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Private\n                                        log\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    log:     Expressions[]\n            \n                                \n                            \n                                \n                                    \n                                        Type :     Expressions[]\n            \n                                    \n                                \n                                \n                                    \n                                        Default value : []\n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/tracker.ts:7\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        import {\n    Expressions, SetPropertyExpression, GetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from './expressions';\n\nexport class Tracker{\n    private log: Expressions[] = [];\n\n    public add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression): void{\n        this.log.push(action);\n    }\n\n    public get(): Expressions[]{\n        return this.log;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Verifier.html":{"url":"classes/Verifier.html","title":"class - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Verifier\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        test\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(reflector: ExpectedExpressionReflector, callCounter: CallCounter, verifyFormatter: VerifyFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:17\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                reflector\n                                                              \n                                                                    \n                                                                                ExpectedExpressionReflector\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                callCounter\n                                                              \n                                                                    \n                                                                                CallCounter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                verifyFormatter\n                                                              \n                                                                    \n                                                                                VerifyFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        test\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:26\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expected\n                                                                \n                                                                    \n                                                                                IExpectedExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                times\n                                                                \n                                                                    \n                                                                                Times\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                expressions\n                                                                \n                                                                    \n                                                                                Expressions[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                mockName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        yes\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyError.html":{"url":"classes/VerifyError.html","title":"class - VerifyError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyError\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(message: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:7\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                message\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyFormatter.html":{"url":"classes/VerifyFormatter.html","title":"class - VerifyFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/verify-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(expectedExpressionFormatter: ExpectedExpressionFormatter, trackedExpressionsFormatter: TrackedExpressionsFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/verify-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expectedExpressionFormatter\n                                                              \n                                                                    \n                                                                                ExpectedExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                trackedExpressionsFormatter\n                                                              \n                                                                    \n                                                                                TrackedExpressionsFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/verify-formatter.ts:18\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expected\n                                                                \n                                                                    \n                                                                                ExpectedExpressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                timesMessage\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                haveBeenCalledTimes\n                                                                \n                                                                    \n                                                                                number\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                trackedExpressions\n                                                                \n                                                                    \n                                                                                Expressions[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                mockName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        yes\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {Expressions} from '../expressions';\nimport {ExpectedExpressionFormatter, expectedExpressionFormatterFactory} from './expected-expression-formatter';\nimport {TrackedExpressionsFormatter, trackedExpressionsFormatterFactory} from './tracked-expressions-formatter';\n\nexport function verifyFormatterFactory(): VerifyFormatter {\n    return new VerifyFormatter(expectedExpressionFormatterFactory(), trackedExpressionsFormatterFactory());\n}\n\nexport class VerifyFormatter {\n\n    constructor(\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string): string {\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\n        const delimiter = '-------------------------------------';\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpectedExpression.html":{"url":"interfaces/IExpectedExpression.html","title":"interface - IExpectedExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpectedExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void | any | It\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:7\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacks.html":{"url":"interfaces/IInterceptorCallbacks.html","title":"interface - IInterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacks\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n            \n                Extends\n            \n            \n                    IInterceptorCallbacksStrategy\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setBehaviorStrategy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                        setBehaviorStrategy\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n            setBehaviorStrategy(behavior: MockBehavior)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:18\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                behavior\n                                                                \n                                                                    \n                                                                                MockBehavior\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacksStrategy.html":{"url":"interfaces/IInterceptorCallbacksStrategy.html","title":"interface - IInterceptorCallbacksStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacksStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasNamedMethod\n                                \n                                \n                                    intercepted\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                        hasNamedMethod\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n            hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:14\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                methodName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                prototype\n                                                                \n                                                                    \n                                                                                any\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                        intercepted\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n            intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                Expressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPredicate.html":{"url":"interfaces/IPredicate.html","title":"interface - IPredicate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPredicate\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     boolean\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:1\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Proxy\n                        \n                        \n                            Proxy\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor.ts\n    \n                \n                \n                    \n                        \n                            \n                            \n                                \n                                Proxy\n                                \n                                \n                            \n                        \n                    \n                    \n                        \n                            Proxy:     any\n    \n                        \n                    \n                        \n                            \n                                Type :     any\n    \n                            \n                        \n    \n    \n                \n            \n    \n    lib/expected-expressions/expected-expression-reflector.ts\n    \n                \n                \n                    \n                        \n                            \n                            \n                                \n                                Proxy\n                                \n                                \n                            \n                        \n                    \n                    \n                        \n                            Proxy:     any\n    \n                        \n                    \n                        \n                            \n                                Type :     any\n    \n                            \n                        \n    \n    \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpectedExpressions\n                        \n                        \n                            Expressions\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expected-expressions/expected-expressions.ts\n    \n            \n                \n                    \n                        \n                            \n                            ExpectedExpressions\n                        \n                    \n                    \n                        \n                            ExpectedExpressions:     ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It\n    \n                        \n                    \n                \n            \n    \n    lib/expressions.ts\n    \n            \n                \n                    \n                        \n                            \n                            Expressions\n                        \n                    \n                    \n                        \n                            Expressions:     MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression\n    \n                        \n                    \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockBehavior\n                        \n                        \n                            Range\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n            \n                \n                    \n                        \n                            \n                            MockBehavior\n                        \n                    \n                            \n                                \n                                     Strict\n                                \n                            \n                            \n                                \n                                     Loose\n                                \n                            \n                \n            \n    \n    lib/times.ts\n    \n            \n                \n                    \n                        \n                            \n                            Range\n                        \n                    \n                            \n                                \n                                     Exclusive\n                                \n                            \n                            \n                                \n                                     Inclusive\n                                \n                            \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
