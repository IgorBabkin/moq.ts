var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/classes/ArgumentsMatcher.html",[0,0.332,1,2.345]],["body/classes/ArgumentsMatcher.html",[0,0.487,1,3.441,2,0.215,3,0.215,4,0.19,5,2.938,6,5.172,7,2.113,8,0.157,9,0.613,10,0.317,11,0.018,12,0.667,13,3.497,14,4.377,15,0.317,16,4.075,17,0.495,18,0.019,19,0.317,20,0.219,21,0.421,22,2.977,23,3.546,24,4.075,25,2.977,26,0.635,27,1.628,28,0.572,29,1.117,30,1.676,31,1.173,32,2.416,33,2.254,34,0.215,35,1.011,36,3.117,37,2.015,38,4.075,39,4.075,40,1.799,41,4.075,42,0.595,43,5.382,44,4.075,45,4.075,46,0.014]],["title/classes/CallCounter.html",[0,0.332,47,2.175]],["body/classes/CallCounter.html",[0,0.48,2,0.209,3,0.209,4,0.185,8,0.116,9,0.603,10,0.314,11,0.013,12,0.651,15,0.312,17,0.547,18,0.019,19,0.312,20,0.242,21,0.414,26,0.59,28,0.675,29,1.632,33,2.201,34,0.279,35,0.987,37,1.33,42,0.581,46,0.013,47,3.531,48,4.554,49,3.043,50,5.675,51,3.414,52,4.347,53,3.978,54,5.297,55,2.35,56,0.576,57,3.978,58,2.062,59,2.746,60,0.987,61,2.765,62,2.543,63,3.043,64,2.543,65,3.414,66,2.765,67,1.037,68,2.543,69,0.939,70,3.978]],["title/classes/ConstantFormatter.html",[0,0.332,71,2.029]],["body/classes/ConstantFormatter.html",[0,0.514,2,0.233,3,0.233,4,0.206,8,0.166,9,0.646,10,0.33,11,0.014,15,0.26,17,0.407,18,0.019,19,0.26,20,0.18,21,0.346,26,0.678,28,0.471,29,1.212,30,1.82,31,1.274,34,0.233,36,3.384,42,0.829,46,0.014,71,3.141,72,4.873,73,1.923,74,2.467,75,5.679,76,3.797,77,3.989,78,1.208,79,2.205,80,4.425,81,4.425,82,4.425,83,4.425,84,5.679,85,4.425,86,4.425]],["title/classes/ConstantMatcher.html",[0,0.332,14,2.345]],["body/classes/ConstantMatcher.html",[0,0.536,2,0.249,3,0.249,4,0.22,5,2.885,7,2.448,8,0.138,9,0.674,10,0.34,11,0.017,14,3.783,15,0.278,17,0.434,18,0.019,19,0.278,20,0.192,21,0.369,22,3.273,23,3.938,25,3.273,26,0.64,27,1.79,28,0.502,29,1.294,30,1.942,31,1.359,34,0.249,36,3.611,46,0.015,79,1.66,87,5.078,88,4.721,89,3.018]],["title/classes/DefinedSetups.html",[0,0.332,90,1.594]],["body/classes/DefinedSetups.html",[0,0.411,2,0.167,3,0.167,4,0.148,8,0.093,9,0.516,10,0.358,11,0.011,12,0.52,15,0.359,17,0.53,18,0.019,19,0.373,20,0.248,21,0.451,26,0.647,27,1.372,28,0.613,29,0.87,33,1.757,34,0.167,35,0.788,37,1.516,40,1.062,42,0.662,46,0.011,51,2.726,52,4.056,55,2.258,56,0.522,60,0.788,61,2.208,65,2.726,78,0.965,79,1.117,90,1.971,91,5.444,92,2.726,93,1.071,94,1.449,95,2.604,96,3.892,97,2.899,98,4.535,99,1.757,100,1.523,101,4.535,102,4.538,103,3.177,104,6.344,105,1.769,106,4.535,107,3.177,108,4.535,109,3.177,110,1.866,111,2.031,112,3.177,113,4.535,114,3.177,115,1.062,116,3.177]],["title/classes/ExpectedExpressionFormatter.html",[0,0.332,117,2.549]],["body/classes/ExpectedExpressionFormatter.html",[0,0.468,2,0.202,3,0.202,4,0.179,8,0.112,9,0.589,10,0.308,11,0.013,12,0.629,15,0.304,17,0.476,18,0.019,19,0.304,20,0.211,21,0.405,26,0.579,28,0.622,29,1.418,34,0.272,35,0.953,42,0.756,46,0.013,55,2.317,56,0.511,59,3.033,60,0.953,67,1.002,69,0.907,73,1.669,74,2.248,78,1.277,115,1.284,117,4.067,118,4.475,119,3.297,120,4.303,121,3.297,122,4.441,123,5.022,124,5.373,125,4.178,126,3.297,127,2.125,128,1.873,129,2.67,130,3.297,131,2.67,132,3.842,133,3.842,134,3.842,135,3.842,136,3.842,137,3.842,138,2.278,139,3.297]],["title/classes/ExpectedExpressionReflector.html",[0,0.332,140,1.902]],["body/classes/ExpectedExpressionReflector.html",[0,0.423,2,0.175,3,0.175,4,0.155,8,0.097,9,0.533,10,0.285,11,0.012,15,0.319,17,0.43,18,0.019,19,0.319,20,0.19,21,0.424,26,0.637,28,0.497,29,0.909,31,1.694,34,0.246,37,1.109,42,0.791,46,0.012,55,2.005,56,0.517,58,2.425,60,1.46,69,1.464,79,1.167,93,1.104,94,1.763,100,1.347,105,1.294,110,1.365,115,1.109,140,2.425,141,2.556,142,2.306,143,5.049,144,5.049,145,4.678,146,3.318,147,3.318,148,4.014,149,3.05,150,3.318,151,1.365,152,1.365,153,1.442,154,1.228,155,1.836,156,2.538,157,2.538,158,2.848,159,4.143,160,5.523,161,2.848,162,2.491,163,2.848,164,2.306,165,2.848,166,2.538,167,2.538,168,2.848,169,2.538,170,1.968,171,2.848,172,2.848]],["title/classes/ExpectedGetPropertyExpression.html",[0,0.332,151,1.509]],["body/classes/ExpectedGetPropertyExpression.html",[0,0.621,2,0.235,3,0.235,4,0.208,8,0.13,10,0.3,11,0.014,15,0.262,18,0.019,19,0.37,20,0.232,28,0.606,31,1.282,34,0.361,46,0.014,55,1.649,56,0.446,60,1.105,78,1.041,93,1.346,110,2.346,141,1.935,151,2.588,152,2.346,153,2.478,173,2.641,174,2.979,175,2.006,176,2.848,177,4.454,178,1.642,179,1.642,180,1.725]],["title/classes/ExpectedMethodExpression.html",[0,0.332,153,1.594]],["body/classes/ExpectedMethodExpression.html",[0,0.622,2,0.236,3,0.236,4,0.209,8,0.131,10,0.302,11,0.015,15,0.264,18,0.019,20,0.233,28,0.609,31,1.291,34,0.362,46,0.015,55,1.66,56,0.448,60,1.113,93,1.352,110,2.356,141,1.948,151,2.356,152,2.356,153,2.742,173,2.659,174,2.985,175,1.733,176,2.867,178,1.649,179,1.914,180,1.733,181,3.077,182,4.484]],["title/classes/ExpectedNamedMethodExpression.html",[0,0.332,110,1.509]],["body/classes/ExpectedNamedMethodExpression.html",[0,0.614,2,0.226,3,0.226,4,0.2,8,0.126,10,0.344,11,0.014,15,0.328,18,0.019,19,0.364,20,0.252,28,0.593,31,1.237,34,0.357,46,0.014,55,1.591,56,0.436,60,1.066,78,1.017,93,1.316,110,2.544,141,1.867,151,2.292,152,2.292,153,2.421,173,2.548,174,2.946,175,1.686,176,3.562,178,1.604,179,1.604,180,2.051,181,3.015,183,4.297,184,4.297]],["title/classes/ExpectedSetPropertyExpression.html",[0,0.332,152,1.509]],["body/classes/ExpectedSetPropertyExpression.html",[0,0.614,2,0.226,3,0.226,4,0.2,8,0.126,10,0.344,11,0.014,15,0.328,18,0.019,19,0.364,20,0.252,28,0.593,31,1.237,34,0.357,46,0.014,55,1.591,56,0.436,60,1.066,78,1.017,93,1.316,100,1.78,110,2.292,141,1.867,151,2.292,152,2.544,153,2.421,173,2.548,174,2.946,175,1.686,176,3.562,178,1.952,179,1.604,180,1.686,185,4.297,186,4.297]],["title/classes/ExpressionFormatter.html",[0,0.332,120,2.345]],["body/classes/ExpressionFormatter.html",[0,0.448,2,0.189,3,0.189,4,0.168,8,0.105,9,0.644,10,0.298,11,0.013,12,0.588,15,0.291,17,0.455,18,0.019,19,0.291,20,0.201,21,0.387,26,0.669,28,0.719,29,0.985,30,1.479,31,1.035,32,2.131,34,0.189,35,0.892,46,0.013,56,0.553,71,3.74,73,1.562,74,2.149,78,0.903,79,2.245,94,1.669,115,1.201,120,3.162,128,3.113,175,1.496,178,1.424,179,1.424,180,1.496,187,4.852,188,3.594,189,4.233,190,5.654,191,4.233,192,5.654,193,4.233,194,5.654,195,4.233,196,3.594,197,4.945,198,3.162,199,3.594,200,3.085,201,3.085,202,3.085,203,3.594,204,3.594,205,3.594,206,3.594,207,3.594,208,3.594]],["title/classes/ExpressionMatcher.html",[0,0.332,52,2.345]],["body/classes/ExpressionMatcher.html",[0,0.413,2,0.169,3,0.169,4,0.149,5,2.592,7,1.663,8,0.094,9,0.605,10,0.28,11,0.015,12,0.525,15,0.269,17,0.42,18,0.019,19,0.269,20,0.186,21,0.357,22,2.526,23,4.034,25,3.52,26,0.663,27,1.381,28,0.696,29,1.251,30,1.319,31,0.923,33,3.205,34,0.169,35,0.796,37,1.526,40,1.072,46,0.012,52,2.919,55,2.145,56,0.498,60,0.796,61,3.696,79,2.482,94,1.457,110,1.878,115,1.072,151,1.878,152,1.878,153,1.984,175,1.381,178,1.315,179,1.315,180,1.381,200,2.752,201,2.752,202,2.752,209,3.207,210,4.423,211,4.551,212,4.551,213,4.551,214,3.207,215,3.207,216,3.207,217,3.207,218,3.207,219,3.207]],["title/classes/GetPropertyExpression.html",[0,0.332,175,1.11]],["body/classes/GetPropertyExpression.html",[0,0.609,2,0.221,3,0.221,4,0.195,8,0.123,10,0.354,11,0.014,12,0.686,15,0.322,17,0.385,18,0.019,19,0.419,20,0.249,21,0.328,34,0.354,46,0.014,56,0.328,78,1.283,93,1.294,100,1.206,162,2.809,175,1.848,178,1.578,179,1.578,180,1.658,181,2.672,220,2.484,221,2.678,222,4.19,223,4.19,224,3.622,225,3.81,226,2.912]],["title/classes/GetPropertyExpressionFormatter.html",[0,0.332,189,2.549]],["body/classes/GetPropertyExpressionFormatter.html",[0,0.553,2,0.261,3,0.261,4,0.231,8,0.145,9,0.695,10,0.348,11,0.015,15,0.292,17,0.456,18,0.018,19,0.292,20,0.202,21,0.388,26,0.605,28,0.528,34,0.261,46,0.015,56,0.477,73,2.158,74,2.653,76,4.262,78,1.114,175,2.086,189,4.243,198,3.903,227,5.24,228,4.966,229,3.798]],["title/classes/GetPropertyExpressionMatcher.html",[0,0.332,210,2.549]],["body/classes/GetPropertyExpressionMatcher.html",[0,0.514,2,0.233,3,0.233,4,0.206,5,2.769,7,2.294,8,0.129,9,0.646,10,0.33,11,0.017,15,0.26,17,0.407,18,0.019,19,0.26,20,0.18,21,0.346,22,3.141,23,3.873,25,2.448,26,0.655,27,1.718,28,0.667,29,1.556,30,1.82,31,1.274,34,0.233,37,1.479,40,1.479,42,0.646,46,0.014,56,0.444,60,1.098,79,1.556,89,2.829,151,2.722,175,2.001,210,3.947,230,4.873,231,4.425,232,4.425,233,3.075,234,3.384,235,3.384]],["title/interfaces/IExpectedExpression.html",[149,1.902,154,1.358]],["body/interfaces/IExpectedExpression.html",[0,0.332,2,0.193,3,0.193,4,0.171,8,0.107,10,0.193,11,0.013,18,0.02,19,0.295,21,0.392,26,0.637,28,0.533,29,1.004,31,1.767,34,0.264,37,1.224,42,0.834,46,0.013,55,1.854,56,0.446,58,2.597,60,0.909,69,1.518,79,1.288,93,1.348,94,1.373,100,1.442,105,1.954,110,1.507,115,1.224,140,1.899,141,1.592,142,2.546,143,3.144,144,3.144,148,3.144,149,2.96,151,1.507,152,1.507,153,1.592,154,1.854,155,2.771,156,2.801,157,2.801,158,3.144,159,4.367,160,5.696,161,3.144,162,2.625,163,3.144,164,2.546,165,3.144,166,2.801,167,2.801,168,3.144,169,2.801,170,2.172,171,3.144,172,3.144,236,3.144,237,3.144]],["title/interfaces/IInterceptorCallbacks.html",[154,1.358,238,2.029]],["body/interfaces/IInterceptorCallbacks.html",[0,0.317,2,0.184,3,0.184,4,0.163,8,0.102,9,0.553,10,0.294,11,0.012,15,0.286,17,0.322,18,0.019,19,0.206,20,0.142,21,0.274,26,0.596,27,1.469,28,0.673,34,0.333,35,0.869,42,0.709,46,0.012,56,0.471,67,0.913,69,1.316,78,0.886,90,2.11,94,1.331,95,1.365,105,2.174,154,2.064,174,2.11,238,3.084,239,2.517,240,2.11,241,2.075,242,3.393,243,3.375,244,4.264,245,3.75,246,3.5,247,3.875,248,2.075,249,2.232,250,2.677,251,2.844,252,2.075,253,2.677,254,2.433,255,2.075,256,2.238,257,3.104,258,3.104,259,2.563,260,2.075,261,2.879,262,4.264,263,2.677,264,4.264,265,2.677,266,2.677,267,1.707,268,2.677,269,4.264,270,2.677,271,2.677,272,2.433,273,2.677,274,2.677,275,2.677]],["title/interfaces/IInterceptorCallbacksStrategy.html",[154,1.358,242,1.902]],["body/interfaces/IInterceptorCallbacksStrategy.html",[0,0.303,2,0.176,3,0.176,4,0.156,8,0.098,9,0.536,10,0.287,11,0.012,15,0.32,17,0.433,18,0.019,19,0.277,20,0.192,21,0.368,26,0.616,27,1.648,28,0.662,34,0.328,35,0.832,42,0.688,46,0.012,56,0.519,67,0.874,69,1.286,78,1.079,90,2.047,94,1.291,95,1.307,97,3.011,105,1.837,154,2.016,174,1.456,238,2.606,239,2.824,240,2.367,241,1.987,242,3.347,244,3.603,245,3.23,247,3.274,248,1.987,249,2.166,250,2.563,251,2.805,252,1.987,253,2.563,254,2.329,255,1.987,256,2.143,257,3.482,258,3.482,259,2.862,260,1.987,261,2.793,262,4.166,263,2.563,264,4.166,265,2.563,266,2.563,267,1.634,268,2.563,269,4.166,270,2.563,271,2.563,272,2.329,273,2.563,274,2.563,275,2.563,276,3.274,277,3.352,278,2.329,279,3.352]],["title/interfaces/IPredicate.html",[154,1.358,280,2.549]],["body/interfaces/IPredicate.html",[0,0.392,2,0.228,3,0.228,4,0.202,8,0.127,10,0.327,11,0.014,18,0.019,26,0.673,27,1.877,30,1.779,31,1.245,34,0.295,37,1.871,40,1.446,42,0.632,46,0.017,58,3.216,69,1.321,93,1.465,115,1.446,141,1.879,154,2.071,155,3.095,224,2.564,236,3.712,237,3.712,280,4.559,281,3.308,282,3.889,283,3.712,284,3.712,285,3.712,286,3.712,287,3.712,288,3.712,289,3.712,290,3.712]],["title/classes/Interceptor.html",[0,0.332,249,1.686]],["body/classes/Interceptor.html",[0,0.354,2,0.137,3,0.137,4,0.121,8,0.076,9,0.445,10,0.311,11,0.01,12,0.424,15,0.36,17,0.359,18,0.02,19,0.308,20,0.229,21,0.409,26,0.69,28,0.415,34,0.137,35,0.643,37,1.75,40,0.867,42,0.895,46,0.01,56,0.368,58,3.175,67,0.676,69,1.326,77,3.265,93,0.922,94,1.854,99,1.434,100,1.507,115,1.877,127,1.434,156,1.983,157,1.983,159,4.294,162,2.162,164,1.802,166,1.983,167,1.983,169,1.983,170,1.537,175,1.182,178,0.746,179,0.746,180,1.182,240,1.127,242,2.713,249,2.162,259,2.713,261,2.317,291,1.983,292,5.234,293,5.234,294,5.234,295,5.234,296,2.498,297,2.593,298,3.907,299,2.593,300,2.593,301,2.593,302,2.593,303,2.988,304,2.593,305,1.434,306,5.902,307,4.702,308,2.593,309,2.593,310,3.907,311,2.593,312,2.593,313,3.907,314,2.593,315,2.593,316,2.593,317,2.593,318,5.615,319,3.907,320,2.593,321,2.593,322,3.353,323,2.593,324,2.593]],["title/classes/InterceptorCallbacks.html",[0,0.332,261,2.175]],["body/classes/InterceptorCallbacks.html",[0,0.386,2,0.154,3,0.154,4,0.136,8,0.085,9,0.486,10,0.35,11,0.011,12,0.478,15,0.363,17,0.51,18,0.019,19,0.326,20,0.24,21,0.434,26,0.61,27,1.526,28,0.628,34,0.311,35,0.725,42,0.623,46,0.011,56,0.498,67,0.762,69,1.191,78,1.013,90,1.855,93,1.008,94,1.52,95,1.139,97,2.729,105,1.967,154,1.58,174,1.269,238,2.79,239,3.196,240,2.678,241,1.732,242,3.554,243,2.966,244,3.857,245,3.499,247,3.505,248,1.732,249,1.962,250,2.234,251,2.678,252,1.732,253,2.234,254,2.03,255,1.732,256,1.867,257,3.224,258,3.224,259,2.713,260,1.732,261,2.991,262,4.243,263,2.234,264,4.514,265,2.234,266,2.234,267,2.081,268,4.243,269,3.857,270,2.234,271,2.234,272,2.03,273,2.234,274,2.234,275,2.234,276,2.966,278,2.03,325,2.921,326,4.268,327,2.921,328,2.921,329,2.921]],["title/classes/InterceptorCallbacksLooseStrategy.html",[0,0.332,252,2.175]],["body/classes/InterceptorCallbacksLooseStrategy.html",[0,0.433,2,0.181,3,0.181,4,0.16,8,0.1,9,0.545,10,0.342,11,0.012,12,0.561,15,0.351,17,0.507,18,0.019,19,0.324,20,0.224,21,0.431,26,0.674,27,1.448,28,0.635,34,0.181,35,0.851,37,1.146,40,1.146,42,0.805,46,0.012,56,0.541,69,0.809,78,1.006,79,1.939,90,2.826,94,0.939,95,2.448,97,3.06,115,1.843,175,1.448,178,1.378,179,1.378,180,1.448,239,3.094,240,2.593,242,2.859,249,1.576,251,2.958,252,2.838,257,3.06,258,3.06,259,2.535,267,2.334,276,3.327,278,2.383,305,1.897,330,2.943,331,2.943,332,3.429,333,3.429,334,3.429,335,2.943,336,2.943,337,4.108,338,2.943,339,2.943,340,3.429,341,3.429]],["title/classes/InterceptorCallbacksStrictStrategy.html",[0,0.332,248,2.175]],["body/classes/InterceptorCallbacksStrictStrategy.html",[0,0.433,2,0.181,3,0.181,4,0.16,8,0.1,9,0.545,10,0.342,11,0.012,12,0.561,15,0.351,17,0.507,18,0.019,19,0.324,20,0.224,21,0.431,26,0.694,27,1.448,28,0.635,34,0.181,35,0.851,37,1.843,40,1.146,42,0.699,46,0.012,56,0.541,67,0.894,78,1.006,79,2.098,90,2.826,94,0.939,95,2.15,97,3.815,115,1.6,178,1.378,179,1.378,180,1.448,239,3.094,240,2.593,242,2.859,248,2.838,249,1.576,251,2.958,257,3.06,258,3.06,259,2.744,267,2.334,276,3.327,278,2.383,305,1.897,322,2.943,331,2.943,335,2.943,336,2.943,337,4.108,338,2.943,339,2.943,342,2.943,343,3.429,344,3.429,345,3.429,346,3.429,347,3.429]],["title/classes/It.html",[0,0.415]],["body/classes/It.html",[0,0.436,2,0.182,3,0.182,4,0.161,8,0.101,9,0.549,10,0.352,11,0.012,12,0.567,15,0.371,17,0.579,18,0.019,19,0.326,20,0.266,21,0.434,26,0.663,27,1.677,30,2.684,31,1.878,34,0.254,37,1.611,40,1.158,42,0.506,46,0.016,58,3.382,69,1.138,93,1.138,115,1.158,141,2.835,154,1.282,155,2.667,224,2.054,280,4.818,281,2.649,282,4.534,283,4.137,284,2.973,285,5.145,286,4.137,287,2.973,288,2.973,289,2.973,290,2.973,348,3.35,349,3.464,350,3.464,351,3.464,352,3.464,353,3.464,354,3.464]],["title/classes/MethodExpression.html",[0,0.332,179,1.056]],["body/classes/MethodExpression.html",[0,0.611,2,0.223,3,0.223,4,0.198,8,0.124,10,0.355,11,0.014,12,0.695,15,0.325,17,0.39,18,0.019,19,0.383,20,0.25,21,0.332,34,0.355,46,0.014,56,0.332,78,1.122,93,1.305,100,1.221,162,2.994,175,1.672,178,1.591,179,1.769,180,1.672,181,3.292,220,2.516,224,3.644,225,3.841,226,3.841,355,5.527]],["title/classes/MethodExpressionFormatter.html",[0,0.332,193,2.549]],["body/classes/MethodExpressionFormatter.html",[0,0.524,2,0.24,3,0.24,4,0.213,8,0.133,9,0.659,10,0.335,11,0.015,12,0.747,15,0.34,17,0.532,18,0.019,19,0.34,20,0.236,21,0.453,26,0.573,28,0.616,32,2.704,34,0.24,35,1.132,42,0.666,46,0.015,56,0.453,71,3.904,73,1.982,74,2.515,78,1.057,100,1.667,128,2.223,179,1.926,193,4.023,198,3.701,356,5.458,357,3.488,358,3.488,359,3.17,360,4.561]],["title/classes/MethodExpressionMatcher.html",[0,0.332,212,2.549]],["body/classes/MethodExpressionMatcher.html",[0,0.495,1,4.407,2,0.22,3,0.22,4,0.195,5,2.974,7,2.165,8,0.122,9,0.623,10,0.321,11,0.016,12,0.684,15,0.322,17,0.503,18,0.019,19,0.322,20,0.223,21,0.428,22,3.026,23,3.813,25,2.31,26,0.604,27,1.655,28,0.688,29,1.499,30,1.718,31,1.202,33,2.31,34,0.22,35,1.036,42,0.61,46,0.014,56,0.428,60,1.036,79,1.469,89,2.67,153,2.812,179,1.863,181,2.036,212,3.802,233,2.903,361,5.235,362,3.584,363,3.194,364,3.194,365,4.177,366,3.584,367,3.584]],["title/classes/Mock.html",[0,0.332,368,1.902]],["body/classes/Mock.html",[0,0.367,2,0.108,3,0.108,4,0.096,8,0.06,9,0.371,10,0.373,11,0.008,12,0.534,15,0.37,17,0.493,18,0.019,19,0.376,20,0.245,21,0.456,26,0.634,28,0.655,29,0.562,34,0.172,42,0.784,46,0.008,55,0.76,56,0.482,58,1.691,60,0.509,62,1.312,63,1.57,69,1.091,77,2.556,78,0.979,90,2.19,93,0.77,94,1.688,95,2.276,102,2.266,111,1.312,115,0.686,127,2.244,140,2.103,149,3.194,174,1.417,176,3.844,221,2.085,238,2.556,240,0.892,243,2.266,245,2.739,249,2.891,251,2.78,259,0.944,260,1.217,267,1.001,296,2.085,303,2.494,305,2.788,368,2.395,369,1.57,370,4.447,371,2.798,372,2.782,373,2.053,374,2.053,375,2.053,376,2.053,377,2.798,378,3.965,379,2.053,380,1.427,381,4.894,382,2.053,383,2.053,384,2.798,385,2.053,386,1.762,387,2.798,388,2.053,389,3.102,390,2.798,391,3.317,392,2.053,393,1.427,394,1.427,395,2.085,396,1.933,397,1.762,398,1.762,399,1.762,400,1.762,401,1.762,402,1.762,403,1.762,404,1.762,405,1.762,406,1.762,407,1.762,408,1.57,409,1.762,410,1.762,411,1.762,412,1.762,413,1.762,414,1.762,415,1.762,416,1.762,417,1.762,418,1.762,419,1.762,420,1.762]],["title/classes/MockCore.html",[0,0.332,370,2.549]],["body/classes/MockCore.html",[0,0.361,2,0.105,3,0.105,4,0.093,8,0.059,9,0.364,10,0.371,11,0.008,12,0.523,15,0.367,17,0.488,18,0.019,19,0.38,20,0.243,21,0.452,26,0.629,28,0.65,29,0.548,34,0.168,42,0.775,46,0.008,55,0.741,56,0.478,58,1.656,60,0.496,62,1.279,63,1.53,67,0.833,69,1.075,77,2.519,78,0.968,90,2.591,93,0.754,94,1.675,95,2.256,102,2.22,105,1.246,111,1.279,115,0.669,127,2.206,140,2.58,149,3.17,174,0.869,221,1.279,238,3.08,240,0.869,243,2.22,245,2.7,249,2.871,251,2.905,259,0.92,260,1.186,267,1.558,296,2.042,303,2.443,305,2.935,368,2.361,369,1.53,370,2.772,371,2.742,372,3.17,377,2.742,378,3.908,380,1.39,381,5.002,384,2.742,386,1.717,387,2.742,389,3.05,390,2.742,391,3.295,393,1.39,394,1.39,395,2.042,396,1.894,397,1.717,398,1.717,399,2.742,400,3.423,401,3.423,402,3.423,403,1.717,404,1.717,405,1.717,406,1.717,407,1.717,408,1.53,409,1.717,410,1.717,411,1.717,412,1.717,413,1.717,414,1.717,415,1.717,416,1.717,417,1.717,418,1.717,419,1.717,420,1.717,421,2.001,422,2.001,423,3.195,424,2.001,425,2.001,426,2.001,427,2.001,428,2.001,429,2.001,430,2.001,431,2.001]],["title/classes/NamedMethodExpression.html",[0,0.332,180,1.11]],["body/classes/NamedMethodExpression.html",[0,0.602,2,0.213,3,0.213,4,0.189,8,0.118,10,0.367,11,0.014,12,0.663,15,0.353,17,0.372,18,0.019,19,0.416,20,0.26,21,0.317,34,0.35,46,0.014,56,0.317,78,1.273,93,1.266,100,1.166,162,3.058,175,1.622,178,1.543,179,1.543,180,1.818,181,3.243,220,2.402,221,2.589,224,3.563,225,3.726,226,2.815,432,5.361,433,4.051]],["title/classes/NamedMethodExpressionFormatter.html",[0,0.332,195,2.549]],["body/classes/NamedMethodExpressionFormatter.html",[0,0.514,2,0.233,3,0.233,4,0.206,8,0.129,9,0.646,10,0.33,11,0.014,12,0.724,15,0.334,17,0.522,18,0.019,19,0.334,20,0.231,21,0.444,26,0.562,28,0.604,32,2.624,34,0.233,35,1.098,42,0.829,46,0.014,56,0.444,71,3.873,73,1.923,74,2.725,78,1.145,100,1.274,128,2.157,180,2.001,195,3.947,198,3.63,357,3.384,358,3.384,359,3.075,434,5.382,435,4.425,436,4.425,437,4.425,438,4.425]],["title/classes/NamedMethodExpressionMatcher.html",[0,0.332,213,2.549]],["body/classes/NamedMethodExpressionMatcher.html",[0,0.49,1,4.388,2,0.217,3,0.217,4,0.192,5,2.952,7,2.132,8,0.12,9,0.616,10,0.319,11,0.016,12,0.673,15,0.318,17,0.498,18,0.019,19,0.318,20,0.22,21,0.423,22,2.995,23,3.797,25,2.275,26,0.637,27,1.638,28,0.684,29,1.484,30,1.692,31,1.184,33,2.275,34,0.217,35,1.021,40,1.375,42,0.601,46,0.014,56,0.423,60,1.021,79,1.446,89,2.629,110,2.646,180,1.946,181,2.005,213,3.763,233,2.858,234,3.145,235,3.145,362,3.529,363,3.145,364,3.145,366,3.529,367,3.529,439,5.195,440,4.113]],["title/classes/PlayTimes.html",[0,0.332,441,2.549]],["body/classes/PlayTimes.html",[0,0.437,2,0.183,3,0.183,4,0.162,8,0.162,9,0.55,10,0.316,11,0.012,15,0.353,17,0.444,18,0.02,19,0.284,20,0.197,21,0.378,26,0.714,27,2.147,34,0.183,37,1.856,40,2.006,42,0.507,46,0.012,50,4.145,59,2.878,64,3.087,100,1.39,282,4.976,380,3.859,441,3.357,442,5.413,443,2.981,444,4.145,445,5.15,446,5.15,447,4.83,448,3.473,449,3.473,450,3.473,451,4.83,452,3.473,453,4.765,454,4.246,455,3.473]],["title/classes/SequenceId.html",[0,0.332,456,2.345]],["body/classes/SequenceId.html",[0,0.523,2,0.239,3,0.239,4,0.212,8,0.133,9,0.658,10,0.334,11,0.015,15,0.34,18,0.019,20,0.185,26,0.629,34,0.304,42,0.664,46,0.015,59,3.576,64,3.693,67,1.185,69,1.073,93,1.364,94,1.74,99,2.514,100,1.986,155,3.196,456,4.272,457,4.413,458,3.159,459,6.682,460,4.545,461,4.545,462,4.545,463,3.159]],["title/classes/SetPropertyExpression.html",[0,0.332,178,1.056]],["body/classes/SetPropertyExpression.html",[0,0.602,2,0.213,3,0.213,4,0.189,8,0.118,10,0.367,11,0.014,12,0.663,15,0.353,17,0.372,18,0.019,19,0.416,20,0.26,21,0.317,34,0.35,46,0.014,56,0.317,78,1.273,93,1.266,100,1.968,162,2.763,175,1.622,178,1.73,179,1.543,180,1.622,181,2.614,220,2.402,221,2.589,224,3.563,225,3.726,226,2.815,464,4.051,465,4.051,466,4.051]],["title/classes/SetPropertyExpressionFormatter.html",[0,0.332,191,2.549]],["body/classes/SetPropertyExpressionFormatter.html",[0,0.521,2,0.238,3,0.238,4,0.21,8,0.132,9,0.655,10,0.333,11,0.015,12,0.739,15,0.338,17,0.529,18,0.019,19,0.338,20,0.234,21,0.45,26,0.57,28,0.612,32,2.677,34,0.238,35,1.12,42,0.659,46,0.015,56,0.45,71,3.893,73,1.962,74,2.499,78,1.05,93,1.066,100,1.656,128,2.201,178,1.919,191,3.998,198,3.677,229,3.453,357,3.453,358,3.453,359,3.138,467,5.433,468,4.515,469,4.515]],["title/classes/SetPropertyExpressionMatcher.html",[0,0.332,211,2.549]],["body/classes/SetPropertyExpressionMatcher.html",[0,0.488,2,0.215,3,0.215,4,0.191,5,2.943,7,2.119,8,0.12,9,0.614,10,0.318,11,0.016,12,0.669,13,3.508,14,4.38,15,0.317,17,0.496,18,0.019,19,0.317,20,0.22,21,0.422,22,2.983,23,3.79,25,2.261,26,0.636,27,1.631,28,0.682,29,1.478,30,1.681,31,1.177,32,2.424,33,2.261,34,0.215,35,1.014,37,1.366,40,1.366,42,0.597,46,0.014,56,0.422,60,1.014,79,1.437,89,2.613,152,2.64,178,1.848,211,3.748,233,2.841,234,3.126,235,3.126,363,3.126,364,3.126,470,5.18,471,4.088,472,4.088,473,4.088]],["title/classes/Setup.html",[0,0.332,95,1.431]],["body/classes/Setup.html",[0,0.347,2,0.133,3,0.133,4,0.118,8,0.074,9,0.436,10,0.373,11,0.01,12,0.413,15,0.377,17,0.6,18,0.019,19,0.344,20,0.274,21,0.457,26,0.701,27,1.679,28,0.268,31,1.747,34,0.133,35,0.626,37,1.546,46,0.01,67,1.583,93,0.904,94,1.601,95,2.278,100,1.102,102,3.215,105,1.493,111,1.614,115,0.844,127,1.397,162,2.552,267,1.867,305,2.559,368,1.985,381,4.992,389,3.949,441,2.661,453,3.286,454,3.949,474,2.167,475,4.431,476,5.163,477,5.163,478,3.215,479,2.525,480,3.829,481,2.525,482,3.829,483,2.525,484,5.842,485,3.829,486,2.525,487,4.626,488,3.829,489,2.525,490,3.829,491,3.829,492,2.928,493,2.525,494,3.829,495,2.525,496,3.829,497,5.163,498,2.525,499,3.286,500,2.525,501,4.626,502,4.626,503,2.525,504,2.525,505,2.525,506,4.626]],["title/classes/Times.html",[0,0.332,391,1.902]],["body/classes/Times.html",[0,0.302,2,0.111,3,0.111,4,0.098,8,0.062,9,0.38,10,0.334,11,0.008,12,0.346,15,0.394,17,0.499,18,0.019,19,0.319,20,0.258,21,0.425,26,0.663,27,1.009,29,1.834,34,0.176,35,0.524,46,0.008,47,3.684,59,3.505,64,2.131,66,3.262,67,0.551,69,1.432,78,0.933,93,0.787,94,1.736,99,2.596,100,1.351,105,0.823,138,3.495,139,2.861,254,1.467,282,5.071,348,2.317,391,3.715,444,3.546,445,4.661,446,5.059,507,1.614,508,4.132,509,4.693,510,4.693,511,4.693,512,4.154,513,3.334,514,4.693,515,3.334,516,4.132,517,3.334,518,2.111,519,3.334,520,3.334,521,6.068,522,2.111,523,2.111,524,2.111,525,2.111,526,3.334,527,2.111,528,2.111,529,3.334,530,2.111,531,2.111,532,2.111,533,3.334,534,4.385,535,2.111,536,4.132,537,2.111,538,2.111,539,2.111,540,2.111,541,3.334,542,2.111,543,1.812,544,1.812,545,2.111,546,2.111,547,2.111,548,2.111,549,2.111]],["title/classes/TrackedExpressionsFormatter.html",[0,0.332,550,2.549]],["body/classes/TrackedExpressionsFormatter.html",[0,0.493,2,0.219,3,0.219,4,0.193,8,0.121,9,0.62,10,0.32,11,0.014,12,0.679,15,0.32,17,0.501,18,0.019,19,0.32,20,0.222,21,0.426,26,0.602,28,0.647,34,0.287,35,1.03,42,0.606,46,0.016,56,0.568,66,2.885,67,1.082,69,0.98,73,1.804,74,2.367,78,1.11,119,3.562,120,4.399,121,3.562,126,3.562,128,2.024,129,2.885,130,3.562,550,4.227,551,4.651,552,5.448,553,4.675,554,2.885,555,4.151,556,4.151,557,4.151,558,4.151]],["title/classes/Tracker.html",[0,0.332,251,1.594]],["body/classes/Tracker.html",[0,0.448,2,0.189,3,0.189,4,0.168,8,0.105,9,0.563,10,0.347,11,0.013,12,0.588,15,0.358,17,0.455,18,0.019,19,0.291,20,0.248,21,0.387,26,0.603,28,0.526,34,0.298,35,0.892,42,0.525,46,0.013,56,0.442,59,1.863,67,0.937,69,0.849,93,1.168,94,1.549,96,4.244,99,1.988,100,1.035,105,1.929,175,1.932,178,1.838,179,1.838,251,2.457,380,2.498,395,2.298,456,4.219,463,2.498,475,4.244,559,2.498,560,6.09,561,3.594,562,4.945,563,5.663,564,4.945,565,3.594,566,3.594,567,5.654,568,3.594,569,3.594,570,3.594,571,3.594,572,3.594]],["title/classes/Verifier.html",[0,0.332,372,1.902]],["body/classes/Verifier.html",[0,0.502,2,0.182,3,0.182,4,0.161,8,0.101,9,0.549,10,0.292,11,0.012,12,0.789,15,0.284,17,0.443,18,0.019,19,0.284,20,0.196,21,0.377,26,0.477,28,0.67,29,1.321,34,0.292,40,1.158,42,0.876,46,0.012,47,4.11,56,0.56,60,0.86,67,0.903,68,3.082,69,1.138,78,1.094,94,1.519,105,1.88,125,3.832,127,1.916,128,1.689,138,2.054,140,3.267,149,3.108,174,1.505,348,3.35,372,2.874,391,3.539,393,3.854,396,2.054,478,2.408,512,2.649,573,2.408,574,3.464,575,4.279,576,3.464,577,4.137,578,3.464,579,2.973,580,3.082,581,2.973,582,2.408,583,2.973,584,2.973,585,2.973,586,2.973,587,2.973,588,2.973,589,4.137,590,2.973,591,2.973,592,2.973,593,2.973]],["title/classes/VerifyError.html",[0,0.332,582,2.549]],["body/classes/VerifyError.html",[0,0.531,2,0.203,3,0.203,4,0.18,10,0.203,11,0.013,12,0.85,15,0.227,17,0.355,18,0.019,19,0.227,20,0.157,21,0.302,26,0.383,28,0.696,29,1.059,34,0.309,40,1.292,42,0.917,46,0.013,47,3.882,56,0.548,60,0.959,67,1.008,68,3.321,69,1.226,78,1.145,94,1.608,105,1.507,125,3.321,128,1.884,138,2.291,140,3.042,149,2.693,174,2.257,372,2.693,391,3.253,393,3.61,396,2.291,478,2.685,512,3.973,573,2.685,575,3.752,577,3.316,579,3.316,580,3.321,581,3.316,582,3.61,583,4.458,584,4.458,585,3.316,586,3.316,587,3.316,588,3.316,589,4.458,590,3.316,591,3.316,592,3.316,593,3.316,594,3.864]],["title/classes/VerifyFormatter.html",[0,0.332,575,2.345]],["body/classes/VerifyFormatter.html",[0,0.454,2,0.193,3,0.193,4,0.171,8,0.107,9,0.57,10,0.301,11,0.013,12,0.82,15,0.295,17,0.46,18,0.019,19,0.295,20,0.204,21,0.392,26,0.565,28,0.653,29,1.565,34,0.264,42,0.834,46,0.013,55,2.272,56,0.541,59,2.96,60,0.909,67,0.955,69,0.865,73,1.592,74,2.177,78,1.263,94,1.373,117,4.613,122,4.3,123,5.268,124,5.268,125,3.924,127,2.026,128,2.443,131,2.546,359,2.546,550,4.722,553,4.9,554,3.482,575,3.65,580,2.342,595,4.367,596,3.663,597,3.663,598,2.801,599,3.663,600,3.663,601,3.663,602,3.663,603,3.663,604,3.663,605,3.663,606,3.663]],["title/changelog.html",[607,2.625,608,2.34,609,3.059]],["body/changelog.html",[9,0.517,11,0.015,18,0.015,31,1.308,40,1.519,46,0.015,56,0.355,67,1.656,77,3.196,79,1.598,95,2.253,138,2.695,255,2.695,256,2.906,259,2.656,296,2.906,368,3.576,372,2.356,454,3.476,492,3.476,598,3.476,610,4.545,611,4.545,612,6.682,613,4.545,614,4.545,615,4.545,616,4.545,617,4.545,618,3.901,619,3.901,620,3.901,621,3.901,622,3.901,623,3.901,624,4.545,625,3.901,626,4.545,627,3.901,628,4.545,629,3.901,630,4.545,631,4.545,632,4.545,633,4.545,634,4.545,635,4.857,636,4.545,637,4.545,638,4.545,639,4.545,640,4.545,641,4.545,642,4.545,643,4.545,644,3.901,645,3.901,646,4.545]],["title/coverage.html",[647,4.304]],["body/coverage.html",[0,0.665,1,1.204,4,0.088,5,3.048,6,1.616,7,2.817,11,0.008,14,1.204,18,0.019,20,0.077,30,1.252,46,0.008,47,1.116,48,2.327,49,2.327,52,1.204,56,0.425,60,1.348,61,1.308,62,1.204,64,4.827,67,1.768,68,1.204,69,0.444,71,1.041,72,1.616,73,2.717,74,0.818,87,1.616,90,0.818,91,1.616,92,1.616,95,0.734,110,0.774,117,1.308,118,2.327,120,1.204,129,1.308,131,1.308,140,0.976,141,2.538,142,2.661,149,0.976,151,0.774,152,0.774,153,0.818,154,1.627,155,1.041,170,1.804,173,2.607,175,0.57,178,0.542,179,0.542,180,0.57,187,1.616,189,1.308,191,1.308,193,1.308,195,1.308,210,1.308,211,1.308,212,1.308,213,1.308,220,2.607,227,1.616,230,1.616,238,1.041,239,2.677,240,2.243,241,2.607,242,0.976,248,1.116,249,0.866,251,0.818,252,1.116,261,1.116,280,1.308,281,2.327,291,2.327,330,1.616,342,1.616,356,1.616,361,1.616,368,0.976,369,2.327,370,1.308,372,0.976,391,0.976,394,1.308,395,1.204,396,1.116,434,1.616,439,1.616,441,1.308,442,1.616,443,1.616,456,1.204,457,2.661,458,2.661,463,1.308,467,1.616,470,1.616,474,1.616,507,1.44,550,1.308,551,2.327,554,1.308,559,2.115,573,2.661,575,1.204,580,1.204,582,1.308,595,2.327,635,1.44,647,1.616,648,1.616,649,1.883,650,1.883,651,6.829,652,6.874,653,3.829,654,1.616,655,1.883,656,1.883,657,4.827,658,5.999,659,2.928,660,4.142,661,1.616,662,1.616,663,1.616,664,1.616,665,1.616,666,1.616,667,3.773,668,1.616,669,1.616,670,1.616,671,1.883,672,3.043,673,3.043,674,1.616,675,1.883,676,1.883,677,1.883,678,1.883]],["title/miscellaneous/enumerations.html",[679,1.586,680,3.788]],["body/miscellaneous/enumerations.html",[8,0.161,11,0.016,18,0.016,46,0.016,239,2.849,240,2.388,241,3.848,245,3.848,255,3.258,256,3.513,507,4.203,534,5.57,543,4.716,544,4.716,679,2.849,680,4.716,681,4.716,682,5.496]],["title/miscellaneous/functions.html",[67,1.151,679,1.586]],["body/miscellaneous/functions.html",[5,1.776,8,0.107,11,0.013,17,0.523,18,0.017,19,0.335,21,0.445,46,0.013,48,2.786,49,3.817,56,0.479,62,3.64,67,1.302,68,3.64,73,2.879,74,2.169,77,2.015,90,1.583,115,2.145,118,2.786,129,3.957,131,3.957,162,2.295,239,1.889,240,1.583,241,2.959,251,2.169,260,2.16,368,2.588,394,3.469,395,3.64,396,3.376,457,2.532,458,3.469,463,3.957,551,2.786,554,3.957,559,2.532,573,2.532,580,3.64,595,2.786,635,4.354,644,3.127,645,3.127,654,3.127,660,3.127,661,4.886,662,4.886,663,4.886,664,4.886,665,3.127,666,4.284,667,3.127,668,4.886,669,4.886,670,4.886,679,1.889,681,3.127,683,7.009,684,3.643,685,3.643,686,2.786,687,3.643,688,3.127,689,3.643,690,3.127,691,3.643,692,3.643,693,3.643,694,3.643,695,3.643]],["title/index.html",[8,0.089,607,2.625,608,2.34]],["body/index.html",[0,0.265,9,0.654,11,0.007,15,0.106,18,0.019,19,0.106,20,0.119,21,0.141,26,0.368,28,0.501,37,1.241,40,0.601,42,0.964,46,0.007,59,2.444,66,3.277,67,1.45,69,1.396,77,3.474,78,0.678,79,1.031,93,1.396,95,1.144,99,1.622,100,1.777,105,0.702,111,2.373,115,0.601,125,1.15,138,2.538,151,1.206,152,1.206,154,1.585,162,0.827,164,2.58,170,1.739,181,1.43,229,2.243,247,2.58,255,1.067,259,1.348,267,1.43,272,1.25,296,1.15,305,1.622,348,2.038,368,3.689,372,0.933,391,2.219,408,1.376,478,1.25,492,2.839,499,1.544,598,2.243,608,1.376,618,1.544,619,1.544,620,3.186,621,1.544,622,1.544,623,4.046,625,1.544,627,1.544,629,3.186,648,2.517,674,2.517,696,5.331,697,1.799,698,1.799,699,3.712,700,2.933,701,1.799,702,1.799,703,2.933,704,1.799,705,1.799,706,1.799,707,1.799,708,1.799,709,1.799,710,1.799,711,2.933,712,1.799,713,1.799,714,1.799,715,1.799,716,1.799,717,1.799,718,1.799,719,1.799,720,1.799,721,2.933,722,1.799,723,1.799,724,1.799,725,1.799,726,1.799,727,1.799,728,1.799,729,1.799,730,1.799,731,1.799,732,1.799,733,1.799,734,1.799,735,1.799,736,4.281,737,1.799,738,2.933,739,1.799,740,2.933,741,1.799,742,1.799,743,6.664,744,2.933,745,1.799,746,2.933,747,1.799,748,1.799,749,2.933,750,4.281,751,1.799,752,1.799,753,2.933,754,1.799,755,1.799,756,4.281,757,1.799,758,4.714,759,1.799,760,2.933,761,1.799,762,1.799,763,4.714,764,1.799,765,4.714,766,2.933,767,1.799,768,1.799,769,2.933,770,2.933,771,4.281,772,4.281,773,2.933,774,1.799,775,1.799,776,4.281,777,2.933,778,2.933,779,1.799,780,1.799,781,1.799,782,1.799,783,1.799,784,1.799,785,2.933,786,2.933,787,1.799,788,1.799,789,1.799,790,1.799,791,2.933,792,2.517,793,2.933,794,1.799,795,1.799,796,1.799,797,1.799,798,2.933,799,1.799,800,1.799,801,1.799,802,1.799,803,1.799,804,1.799,805,1.799,806,1.799,807,1.799,808,1.799,809,1.799,810,1.799,811,1.799,812,1.799,813,1.799,814,1.799,815,1.799,816,1.799,817,1.799,818,1.799,819,3.712,820,1.799,821,1.799,822,1.799,823,1.799,824,1.799,825,1.799,826,1.799,827,1.799,828,1.799,829,2.933,830,1.799,831,1.799,832,1.799]],["title/modules.html",[833,4.304]],["body/modules.html",[11,0.017,18,0.017,46,0.017,833,5.07]],["title/overview.html",[834,4.304]],["body/overview.html",[0,0.525,11,0.017,18,0.017,46,0.017,154,2.149,792,4.982,834,4.982,835,5.805]],["title/miscellaneous/typealiases.html",[679,1.586,836,4.414]],["body/miscellaneous/typealiases.html",[8,0.148,11,0.016,18,0.019,20,0.251,46,0.016,55,2.467,56,0.521,60,1.256,110,2.081,141,2.198,151,2.081,152,2.081,153,2.198,173,3.662,175,1.531,178,1.457,179,1.457,180,1.531,220,3,559,3.517,563,5.721,679,2.623,686,3.87,690,4.342,837,5.06,838,5.06,839,5.06]],["title/miscellaneous/variables.html",[659,3.376,679,1.586]],["body/miscellaneous/variables.html",[8,0.151,11,0.016,18,0.018,20,0.254,46,0.016,56,0.489,60,1.28,69,1.218,99,2.853,100,1.485,141,2.241,142,4.342,155,3.718,170,4.313,291,3.944,456,3.297,457,3.584,458,4.342,659,3.944,679,2.674,686,3.944,688,4.426,840,5.157]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":64,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"coverage.html":{}}}],["0/1",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":658,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":657,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":66,"title":{},"body":{"classes/CallCounter.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"index.html":{}}}],["1/1",{"_index":656,"title":{},"body":{"coverage.html":{}}}],["1/10",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":674,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["100",{"_index":655,"title":{},"body":{"coverage.html":{}}}],["2",{"_index":776,"title":{},"body":{"index.html":{}}}],["2bit",{"_index":832,"title":{},"body":{"index.html":{}}}],["3",{"_index":778,"title":{},"body":{"index.html":{}}}],["4",{"_index":792,"title":{},"body":{"index.html":{},"overview.html":{}}}],["41",{"_index":835,"title":{},"body":{"overview.html":{}}}],["_atleastonc",{"_index":508,"title":{},"body":{"classes/Times.html":{}}}],["_atmostonc",{"_index":509,"title":{},"body":{"classes/Times.html":{}}}],["_never",{"_index":510,"title":{},"body":{"classes/Times.html":{}}}],["_onc",{"_index":511,"title":{},"body":{"classes/Times.html":{}}}],["_prototyp",{"_index":292,"title":{},"body":{"classes/Interceptor.html":{}}}],["_proxi",{"_index":293,"title":{},"body":{"classes/Interceptor.html":{}}}],["_valu",{"_index":294,"title":{},"body":{"classes/Interceptor.html":{}}}],["accept",{"_index":318,"title":{},"body":{"classes/Interceptor.html":{}}}],["access",{"_index":758,"title":{},"body":{"index.html":{}}}],["action",{"_index":475,"title":{},"body":{"classes/Setup.html":{},"classes/Tracker.html":{}}}],["activestrategi",{"_index":268,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["actual",{"_index":793,"title":{},"body":{"index.html":{}}}],["ad",{"_index":646,"title":{},"body":{"changelog.html":{}}}],["add",{"_index":96,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Tracker.html":{}}}],["add(act",{"_index":564,"title":{},"body":{"classes/Tracker.html":{}}}],["add(key",{"_index":101,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["alias",{"_index":837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":773,"title":{},"body":{"index.html":{}}}],["any|it",{"_index":36,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{}}}],["appli",{"_index":166,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["arg",{"_index":162,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Setup.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["arg1",{"_index":808,"title":{},"body":{"index.html":{}}}],["arg2",{"_index":798,"title":{},"body":{"index.html":{}}}],["argument",{"_index":181,"title":{},"body":{"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"index.html":{}}}],["argumentsmatch",{"_index":1,"title":{"classes/ArgumentsMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["argumentsmatcherfactori",{"_index":661,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["array",{"_index":83,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["ask",{"_index":710,"title":{},"body":{"index.html":{}}}],["assert",{"_index":634,"title":{},"body":{"changelog.html":{}}}],["assign",{"_index":469,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["atleast",{"_index":513,"title":{},"body":{"classes/Times.html":{}}}],["atleast(callcount",{"_index":526,"title":{},"body":{"classes/Times.html":{}}}],["atleastonc",{"_index":514,"title":{},"body":{"classes/Times.html":{}}}],["atmost",{"_index":515,"title":{},"body":{"classes/Times.html":{}}}],["atmost(callcount",{"_index":529,"title":{},"body":{"classes/Times.html":{}}}],["atmostonc",{"_index":516,"title":{},"body":{"classes/Times.html":{}}}],["b",{"_index":799,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":247,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"index.html":{}}}],["behaviorstrategi",{"_index":386,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["behaviour",{"_index":611,"title":{},"body":{"changelog.html":{}}}],["between",{"_index":517,"title":{},"body":{"classes/Times.html":{}}}],["between(callcountfrom",{"_index":532,"title":{},"body":{"classes/Times.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{}}}],["c",{"_index":699,"title":{},"body":{"index.html":{}}}],["call",{"_index":138,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["callback",{"_index":305,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["callback((arg1",{"_index":806,"title":{},"body":{"index.html":{}}}],["callback((argu",{"_index":788,"title":{},"body":{"index.html":{}}}],["callback(callback",{"_index":482,"title":{},"body":{"classes/Setup.html":{}}}],["callback.apply(undefin",{"_index":503,"title":{},"body":{"classes/Setup.html":{}}}],["callbacks.loose.strategi",{"_index":253,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.loose.strategy.t",{"_index":330,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"coverage.html":{}}}],["callbacks.loose.strategy.ts:16",{"_index":334,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:32",{"_index":333,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:9",{"_index":332,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.strict.strategi",{"_index":250,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.strict.strategy.t",{"_index":342,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["callbacks.strict.strategy.ts:13",{"_index":345,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:29",{"_index":344,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:6",{"_index":343,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.t",{"_index":241,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callbacks.ts:13",{"_index":279,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:14",{"_index":277,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:18",{"_index":246,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["callbacks.ts:29",{"_index":326,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:37",{"_index":328,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:41",{"_index":327,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:45",{"_index":329,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks/interceptor",{"_index":240,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callcount",{"_index":47,"title":{"classes/CallCounter.html":{}},"body":{"classes/CallCounter.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["callcounter(expressionmatcherfactori",{"_index":70,"title":{},"body":{"classes/CallCounter.html":{}}}],["callcounterfactori",{"_index":68,"title":{},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["callcountfrom",{"_index":536,"title":{},"body":{"classes/Times.html":{}}}],["callcountto",{"_index":533,"title":{},"body":{"classes/Times.html":{}}}],["calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n",{"_index":606,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["case",{"_index":633,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":289,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["changelog",{"_index":609,"title":{"changelog.html":{}},"body":{}}],["check",{"_index":731,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["code",{"_index":629,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compat",{"_index":704,"title":{},"body":{"index.html":{}}}],["compil",{"_index":627,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["console.log",{"_index":644,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":42,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["constant",{"_index":32,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constantformatt",{"_index":71,"title":{"classes/ConstantFormatter.html":{}},"body":{"classes/ConstantFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["constantformatter().format(object[index",{"_index":86,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["constantmatch",{"_index":14,"title":{"classes/ConstantMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["constructor(arg",{"_index":226,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(argumentsmatch",{"_index":362,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["constructor(constantformatt",{"_index":357,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constructor(constantmatch",{"_index":13,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor(definedsetup",{"_index":331,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["constructor(evalu",{"_index":518,"title":{},"body":{"classes/Times.html":{}}}],["constructor(expectedexpressionformatt",{"_index":596,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["constructor(expressionformatt",{"_index":119,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["constructor(expressionmatch",{"_index":51,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["constructor(expressionreflector",{"_index":422,"title":{},"body":{"classes/MockCore.html":{}}}],["constructor(getpropertyexpressionmatch",{"_index":209,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["constructor(getpropertyformatt",{"_index":188,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["constructor(interceptorcallback",{"_index":297,"title":{},"body":{"classes/Interceptor.html":{}}}],["constructor(messag",{"_index":584,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["constructor(mock",{"_index":479,"title":{},"body":{"classes/Setup.html":{}}}],["constructor(nam",{"_index":221,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(pred",{"_index":349,"title":{},"body":{"classes/It.html":{}}}],["constructor(priv",{"_index":35,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{}}}],["constructor(publ",{"_index":224,"title":{},"body":{"classes/GetPropertyExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(reflector",{"_index":574,"title":{},"body":{"classes/Verifier.html":{}}}],["constructor(sequenceid",{"_index":561,"title":{},"body":{"classes/Tracker.html":{}}}],["constructor(strictstrategi",{"_index":325,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["control",{"_index":814,"title":{},"body":{"index.html":{}}}],["correspond",{"_index":816,"title":{},"body":{"index.html":{}}}],["count",{"_index":50,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{}}}],["count(expect",{"_index":54,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter",{"_index":579,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["counter.t",{"_index":49,"title":{},"body":{"classes/CallCounter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["counter.ts:12",{"_index":57,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:6",{"_index":53,"title":{},"body":{"classes/CallCounter.html":{}}}],["coverag",{"_index":647,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createobject",{"_index":295,"title":{},"body":{"classes/Interceptor.html":{}}}],["date",{"_index":771,"title":{},"body":{"index.html":{}}}],["date(2016",{"_index":803,"title":{},"body":{"index.html":{}}}],["date(2017",{"_index":807,"title":{},"body":{"index.html":{}}}],["deal",{"_index":828,"title":{},"body":{"index.html":{}}}],["declar",{"_index":156,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["dedic",{"_index":707,"title":{},"body":{"index.html":{}}}],["default",{"_index":99,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Interceptor.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":15,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["definedsetup",{"_index":90,"title":{"classes/DefinedSetups.html":{}},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["definedsetups(expressionmatcherfactori",{"_index":417,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["delimit",{"_index":604,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["deni",{"_index":749,"title":{},"body":{"index.html":{}}}],["depend",{"_index":702,"title":{},"body":{"index.html":{}}}],["descript",{"_index":84,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["description.push(new",{"_index":85,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["dev",{"_index":713,"title":{},"body":{"index.html":{}}}],["document",{"_index":648,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dump",{"_index":635,"title":{},"body":{"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["dump(mock",{"_index":693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["e",{"_index":290,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["enum",{"_index":254,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Times.html":{}}}],["enumer",{"_index":680,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":583,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["error('an",{"_index":779,"title":{},"body":{"index.html":{}}}],["error('argu",{"_index":790,"title":{},"body":{"index.html":{}}}],["error('invok",{"_index":811,"title":{},"body":{"index.html":{}}}],["error('property4",{"_index":757,"title":{},"body":{"index.html":{}}}],["es5",{"_index":628,"title":{},"body":{"changelog.html":{}}}],["evalu",{"_index":520,"title":{},"body":{"classes/Times.html":{}}}],["exactli",{"_index":444,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["exactly(callcount",{"_index":537,"title":{},"body":{"classes/Times.html":{}}}],["exactly(count",{"_index":447,"title":{},"body":{"classes/PlayTimes.html":{}}}],["exampl",{"_index":421,"title":{},"body":{"classes/MockCore.html":{}}}],["except",{"_index":499,"title":{},"body":{"classes/Setup.html":{},"index.html":{}}}],["exclus",{"_index":543,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["expect",{"_index":29,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpress",{"_index":55,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/typealiases.html":{}}}],["expectedexpressionformatt",{"_index":117,"title":{"classes/ExpectedExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["expectedexpressionformatter(expressionformatterfactori",{"_index":132,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expectedexpressionformatterfactori",{"_index":131,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expectedexpressionmessag",{"_index":600,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessage}\\n${delimiter}\\ntrack",{"_index":605,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionreflector",{"_index":140,"title":{"classes/ExpectedExpressionReflector.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["expectedgetpropertyexpress",{"_index":151,"title":{"classes/ExpectedGetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedgetpropertyexpression(nam",{"_index":161,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpression|it",{"_index":232,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["expectedmethodexpress",{"_index":153,"title":{"classes/ExpectedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmethodexpression(arg",{"_index":168,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedmethodexpression|it",{"_index":365,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["expectednamedmethodexpress",{"_index":110,"title":{"classes/ExpectedNamedMethodExpression.html":{}},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expectednamedmethodexpression(nam",{"_index":163,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectednamedmethodexpression).nam",{"_index":116,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["expectednamedmethodexpression|it",{"_index":440,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["expectedsetpropertyexpress",{"_index":152,"title":{"classes/ExpectedSetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedsetpropertyexpression(nam",{"_index":165,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedsetpropertyexpression|it",{"_index":471,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["export",{"_index":34,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["express",{"_index":56,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expression(proxi",{"_index":172,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expression.arguments.foreach(arg",{"_index":435,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.nam",{"_index":229,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"index.html":{}}}],["expression.name}(${valu",{"_index":438,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.valu",{"_index":775,"title":{},"body":{"index.html":{}}}],["expressiondescript",{"_index":133,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressiondescription}${mockdescript",{"_index":136,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressionformatt",{"_index":120,"title":{"classes/ExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{}}}],["expressionformatterfactori",{"_index":129,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expressionmatch",{"_index":52,"title":{"classes/ExpressionMatcher.html":{}},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"coverage.html":{}}}],["expressionmatcherfactori",{"_index":62,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["expressionproxi",{"_index":144,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expressionreflector",{"_index":399,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["expressions.t",{"_index":173,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/expect",{"_index":60,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expressions/express",{"_index":30,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["expressions|it",{"_index":203,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["extend",{"_index":174,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["factori",{"_index":130,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["fals",{"_index":40,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["field",{"_index":770,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["find",{"_index":727,"title":{},"body":{"index.html":{}}}],["fluent",{"_index":642,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":734,"title":{},"body":{"index.html":{}}}],["format",{"_index":74,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["format(expect",{"_index":122,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(express",{"_index":198,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["format(object",{"_index":75,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["format(templ",{"_index":694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["format(trackedexpress",{"_index":552,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["formatt",{"_index":128,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["formatted.join",{"_index":437,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatted.push(this.constantformatter.format(arg",{"_index":436,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatter.t",{"_index":73,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["formatter.ts:10",{"_index":359,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:12",{"_index":196,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:15",{"_index":126,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatter.ts:18",{"_index":597,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["formatter.ts:22",{"_index":199,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:4",{"_index":358,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["formatter.ts:5",{"_index":76,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["formatter.ts:9",{"_index":121,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatters/verifi",{"_index":581,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["friendli",{"_index":723,"title":{},"body":{"index.html":{}}}],["full",{"_index":721,"title":{},"body":{"index.html":{}}}],["fulli",{"_index":726,"title":{},"body":{"index.html":{}}}],["function",{"_index":67,"title":{"miscellaneous/functions.html":{}},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get",{"_index":607,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["get(express",{"_index":106,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["get.properti",{"_index":200,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["get.property.integrationtests.t",{"_index":735,"title":{},"body":{"index.html":{}}}],["getpropertyexpress",{"_index":175,"title":{"classes/GetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["getpropertyexpression(methodnam",{"_index":340,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["getpropertyexpression(nam",{"_index":309,"title":{},"body":{"classes/Interceptor.html":{}}}],["getpropertyexpression:19",{"_index":177,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{}}}],["getpropertyexpressionformatt",{"_index":189,"title":{"classes/GetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["getpropertyexpressionmatch",{"_index":210,"title":{"classes/GetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["getpropertyformatt",{"_index":197,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["getpropertyresult",{"_index":310,"title":{},"body":{"classes/Interceptor.html":{}}}],["getprototypeof",{"_index":321,"title":{},"body":{"classes/Interceptor.html":{}}}],["getter",{"_index":228,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["hasnamedmethod",{"_index":97,"title":{},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(methodnam",{"_index":258,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(nam",{"_index":108,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["havebeencalledtim",{"_index":124,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["help",{"_index":709,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":398,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["hold",{"_index":759,"title":{},"body":{"index.html":{}}}],["hook",{"_index":767,"title":{},"body":{"index.html":{}}}],["https://dvabuzyarov.github.io/moq.t",{"_index":701,"title":{},"body":{"index.html":{}}}],["id",{"_index":567,"title":{},"body":{"classes/Tracker.html":{}}}],["id.t",{"_index":458,"title":{},"body":{"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["id.ts:2",{"_index":460,"title":{},"body":{"classes/SequenceId.html":{}}}],["id.ts:4",{"_index":461,"title":{},"body":{"classes/SequenceId.html":{}}}],["identifi",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["iexpectedexpress",{"_index":149,"title":{"interfaces/IExpectedExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["ignor",{"_index":491,"title":{},"body":{"classes/Setup.html":{}}}],["iinterceptorcallback",{"_index":238,"title":{"interfaces/IInterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["iinterceptorcallbacksstrategi",{"_index":242,"title":{"interfaces/IInterceptorCallbacksStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["imock",{"_index":381,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["implement",{"_index":267,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["inclus",{"_index":544,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["inherit",{"_index":176,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/Mock.html":{}}}],["insequ",{"_index":371,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["insequence(sequ",{"_index":377,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["inspir",{"_index":698,"title":{},"body":{"index.html":{}}}],["instal",{"_index":711,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":155,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["instance(1",{"_index":785,"title":{},"body":{"index.html":{}}}],["instance(2",{"_index":787,"title":{},"body":{"index.html":{}}}],["instance(it.is(valu",{"_index":791,"title":{},"body":{"index.html":{}}}],["instance(valu",{"_index":789,"title":{},"body":{"index.html":{}}}],["instance.method",{"_index":761,"title":{},"body":{"index.html":{}}}],["instance.method(1",{"_index":800,"title":{},"body":{"index.html":{}}}],["instance.method(2",{"_index":813,"title":{},"body":{"index.html":{}}}],["instance.method(3",{"_index":809,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(()=>tru",{"_index":824,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(valu",{"_index":804,"title":{},"body":{"index.html":{}}}],["instance.properti",{"_index":772,"title":{},"body":{"index.html":{}}}],["instance.property1",{"_index":744,"title":{},"body":{"index.html":{}}}],["instance.property2",{"_index":751,"title":{},"body":{"index.html":{}}}],["instance.property3",{"_index":754,"title":{},"body":{"index.html":{}}}],["instance[property4nam",{"_index":755,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":79,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"changelog.html":{},"index.html":{}}}],["integr",{"_index":730,"title":{},"body":{"index.html":{}}}],["intend",{"_index":716,"title":{},"body":{"index.html":{}}}],["interact",{"_index":645,"title":{},"body":{"changelog.html":{},"miscellaneous/functions.html":{}}}],["intercept",{"_index":276,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["intercepted(express",{"_index":257,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptedcallback",{"_index":402,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptor",{"_index":249,"title":{"classes/Interceptor.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["interceptor(callback",{"_index":419,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptorcallback",{"_index":261,"title":{"classes/InterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"coverage.html":{}}}],["interceptorcallbacks(strictstrategi",{"_index":266,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksfactori",{"_index":394,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["interceptorcallbacksfactory(definedsetup",{"_index":260,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"miscellaneous/functions.html":{}}}],["interceptorcallbacksloosestrategi",{"_index":252,"title":{"classes/InterceptorCallbacksLooseStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"coverage.html":{}}}],["interceptorcallbacksloosestrategy(definedsetup",{"_index":265,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksstrictstrategi",{"_index":248,"title":{"classes/InterceptorCallbacksStrictStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{}}}],["interceptorcallbacksstrictstrategy(definedsetup",{"_index":263,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorfactori",{"_index":400,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interceptorfactory(interceptedcallback",{"_index":404,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["interfac",{"_index":154,"title":{"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["intern",{"_index":397,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["introduc",{"_index":612,"title":{},"body":{"changelog.html":{}}}],["invok",{"_index":453,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Setup.html":{}}}],["invoke(arg",{"_index":485,"title":{},"body":{"classes/Setup.html":{}}}],["ipred",{"_index":280,"title":{"interfaces/IPredicate.html":{}},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{}}}],["is(pred",{"_index":283,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isani",{"_index":285,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isequenceverifi",{"_index":378,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["isetup",{"_index":389,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["isetupinvok",{"_index":102,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{}}}],["it(pred",{"_index":284,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["it).pred",{"_index":81,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it).test(left",{"_index":89,"title":{},"body":{"classes/ConstantMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["it.i",{"_index":752,"title":{},"body":{"index.html":{}}}],["it.is(${(object",{"_index":80,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it.is(()=>tru",{"_index":825,"title":{},"body":{"index.html":{}}}],["it.is((express",{"_index":746,"title":{},"body":{"index.html":{}}}],["it.is(valu",{"_index":777,"title":{},"body":{"index.html":{}}}],["it.isani",{"_index":631,"title":{},"body":{"changelog.html":{}}}],["itestfunct",{"_index":784,"title":{},"body":{"index.html":{}}}],["itestobject",{"_index":736,"title":{},"body":{"index.html":{}}}],["key",{"_index":104,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["latest",{"_index":638,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":25,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["left.foreach((lvalu",{"_index":41,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.length",{"_index":38,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.nam",{"_index":234,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["let'",{"_index":748,"title":{},"body":{"index.html":{}}}],["lib/.../cal",{"_index":684,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../dump.t",{"_index":685,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../expect",{"_index":686,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/.../expressions.t",{"_index":838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../factories.t",{"_index":683,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../format",{"_index":687,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../interceptor",{"_index":681,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/.../interceptor.t",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../sequ",{"_index":688,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lib/.../times.t",{"_index":682,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../track",{"_index":689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../tracker.t",{"_index":690,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lib/.../verifi",{"_index":692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../verifier.t",{"_index":691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/cal",{"_index":48,"title":{},"body":{"classes/CallCounter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/defin",{"_index":91,"title":{},"body":{"classes/DefinedSetups.html":{},"coverage.html":{}}}],["lib/dump.t",{"_index":654,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/expect",{"_index":141,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/express",{"_index":5,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/expressions.t",{"_index":220,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/expressions.ts:11",{"_index":355,"title":{},"body":{"classes/MethodExpression.html":{}}}],["lib/expressions.ts:18",{"_index":222,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:19",{"_index":223,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:2",{"_index":432,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/expressions.ts:24",{"_index":464,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:25",{"_index":465,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:26",{"_index":466,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:4",{"_index":433,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/format",{"_index":665,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/const",{"_index":72,"title":{},"body":{"classes/ConstantFormatter.html":{},"coverage.html":{}}}],["lib/formatters/expect",{"_index":118,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/express",{"_index":187,"title":{},"body":{"classes/ExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/factories.t",{"_index":667,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/get.properti",{"_index":227,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/method",{"_index":356,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/named.method",{"_index":434,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/set.properti",{"_index":467,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["lib/formatters/track",{"_index":551,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/verifi",{"_index":595,"title":{},"body":{"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor",{"_index":239,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor.t",{"_index":291,"title":{},"body":{"classes/Interceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["lib/interceptor.ts:12",{"_index":300,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:13",{"_index":299,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:14",{"_index":298,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:20",{"_index":302,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:28",{"_index":304,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:35",{"_index":301,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/mock.t",{"_index":369,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["lib/mock.ts:22",{"_index":423,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:29",{"_index":425,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:32",{"_index":424,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:37",{"_index":430,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:44",{"_index":431,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:51",{"_index":427,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:55",{"_index":428,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:60",{"_index":429,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:65",{"_index":426,"title":{},"body":{"classes/MockCore.html":{}}}],["lib/mock.ts:71",{"_index":373,"title":{},"body":{"classes/Mock.html":{}}}],["lib/play",{"_index":442,"title":{},"body":{"classes/PlayTimes.html":{},"coverage.html":{}}}],["lib/sequ",{"_index":457,"title":{},"body":{"classes/SequenceId.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lib/setup.t",{"_index":474,"title":{},"body":{"classes/Setup.html":{},"coverage.html":{}}}],["lib/setup.ts:12",{"_index":486,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:16",{"_index":495,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:21",{"_index":498,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:28",{"_index":483,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:39",{"_index":489,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:44",{"_index":493,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:5",{"_index":481,"title":{},"body":{"classes/Setup.html":{}}}],["lib/setup.ts:6",{"_index":480,"title":{},"body":{"classes/Setup.html":{}}}],["lib/times.t",{"_index":507,"title":{},"body":{"classes/Times.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["lib/times.ts:10",{"_index":519,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:13",{"_index":525,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:17",{"_index":527,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:21",{"_index":528,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:25",{"_index":530,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:29",{"_index":531,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:33",{"_index":535,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:40",{"_index":538,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:44",{"_index":539,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:48",{"_index":540,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:52",{"_index":542,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:7",{"_index":524,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:8",{"_index":523,"title":{},"body":{"classes/Times.html":{}}}],["lib/times.ts:9",{"_index":522,"title":{},"body":{"classes/Times.html":{}}}],["lib/tracker.t",{"_index":559,"title":{},"body":{"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lib/tracker.ts:13",{"_index":565,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:18",{"_index":566,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:7",{"_index":562,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/verifier.t",{"_index":573,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["lib/verifier.ts:17",{"_index":576,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:26",{"_index":578,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:7",{"_index":594,"title":{},"body":{"classes/VerifyError.html":{}}}],["librari",{"_index":700,"title":{},"body":{"index.html":{}}}],["link",{"_index":504,"title":{},"body":{"classes/Setup.html":{}}}],["liter",{"_index":839,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["log",{"_index":560,"title":{},"body":{"classes/Tracker.html":{}}}],["loos",{"_index":256,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["loosestrategi",{"_index":264,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["magic",{"_index":719,"title":{},"body":{"index.html":{}}}],["make",{"_index":621,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["match",{"_index":11,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matched(left",{"_index":22,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher",{"_index":33,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.t",{"_index":7,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["matcher.ts:12",{"_index":364,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:15",{"_index":214,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:24",{"_index":215,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:4",{"_index":16,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matcher.ts:5",{"_index":88,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matcher.ts:6",{"_index":363,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:7",{"_index":231,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matcher.ts:9",{"_index":24,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/argu",{"_index":6,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"coverage.html":{}}}],["matchers/const",{"_index":87,"title":{},"body":{"classes/ConstantMatcher.html":{},"coverage.html":{}}}],["matchers/express",{"_index":61,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/factori",{"_index":63,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["matchers/factories.t",{"_index":660,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["matchers/get.properti",{"_index":230,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/method",{"_index":361,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/named.method",{"_index":439,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["matchers/set.properti",{"_index":470,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["matter",{"_index":821,"title":{},"body":{"index.html":{}}}],["messag",{"_index":512,"title":{},"body":{"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["method",{"_index":9,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["method(1",{"_index":794,"title":{},"body":{"index.html":{}}}],["method(arg1",{"_index":797,"title":{},"body":{"index.html":{}}}],["method.property.integrationtests.t",{"_index":783,"title":{},"body":{"index.html":{}}}],["methodexpress",{"_index":179,"title":{"classes/MethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["methodexpression(arg",{"_index":320,"title":{},"body":{"classes/Interceptor.html":{}}}],["methodexpression:11",{"_index":182,"title":{},"body":{"classes/ExpectedMethodExpression.html":{}}}],["methodexpressionformatt",{"_index":193,"title":{"classes/MethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"coverage.html":{}}}],["methodexpressionmatch",{"_index":212,"title":{"classes/MethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"coverage.html":{}}}],["methodformatt",{"_index":192,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["methodformatterfactori",{"_index":668,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["methodmatcherfactori",{"_index":662,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["methodnam",{"_index":278,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["minimalist",{"_index":724,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":679,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":368,"title":{"classes/Mock.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["mock(mocknam",{"_index":742,"title":{},"body":{"index.html":{}}}],["mock.object",{"_index":763,"title":{},"body":{"index.html":{}}}],["mock.verify(inst",{"_index":765,"title":{},"body":{"index.html":{}}}],["mockbehavior",{"_index":245,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"miscellaneous/enumerations.html":{}}}],["mockbehavior.loos",{"_index":274,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["mockbehavior.strict",{"_index":272,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"index.html":{}}}],["mockcor",{"_index":370,"title":{"classes/MockCore.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"coverage.html":{}}}],["mockcore:22",{"_index":374,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:29",{"_index":376,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:32",{"_index":375,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:37",{"_index":388,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:44",{"_index":392,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:51",{"_index":382,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:55",{"_index":383,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:60",{"_index":385,"title":{},"body":{"classes/Mock.html":{}}}],["mockcore:65",{"_index":379,"title":{},"body":{"classes/Mock.html":{}}}],["mockdescript",{"_index":135,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["mocknam",{"_index":125,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["modul",{"_index":833,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moq",{"_index":111,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"index.html":{}}}],["moq.t",{"_index":696,"title":{},"body":{"index.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named.method",{"_index":202,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["named.method.integrationtests.t",{"_index":796,"title":{},"body":{"index.html":{}}}],["namedmethodexpress",{"_index":180,"title":{"classes/NamedMethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["namedmethodexpression(nam",{"_index":315,"title":{},"body":{"classes/Interceptor.html":{}}}],["namedmethodexpression:2",{"_index":183,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpression:4",{"_index":184,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpressionformatt",{"_index":195,"title":{"classes/NamedMethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"coverage.html":{}}}],["namedmethodexpressionmatch",{"_index":213,"title":{"classes/NamedMethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"coverage.html":{}}}],["namedmethodformatt",{"_index":194,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["namedmethodformatterfactori",{"_index":669,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["namedmethodmatcherfactori",{"_index":663,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["need",{"_index":620,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["never",{"_index":445,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["new",{"_index":69,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":459,"title":{},"body":{"classes/SequenceId.html":{}}}],["now",{"_index":614,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":625,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":322,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["number",{"_index":59,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["number)=>boolean",{"_index":545,"title":{},"body":{"classes/Times.html":{}}}],["number|ani",{"_index":769,"title":{},"body":{"index.html":{}}}],["object",{"_index":77,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["object.getprototypeof",{"_index":618,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["object.method",{"_index":764,"title":{},"body":{"index.html":{}}}],["object.method(1",{"_index":812,"title":{},"body":{"index.html":{}}}],["object.properti",{"_index":781,"title":{},"body":{"index.html":{}}}],["object.setprototypeof",{"_index":619,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onc",{"_index":446,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["oper",{"_index":623,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["option",{"_index":21,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["origin",{"_index":715,"title":{},"body":{"index.html":{}}}],["otherwis",{"_index":490,"title":{},"body":{"classes/Setup.html":{}}}],["out",{"_index":732,"title":{},"body":{"index.html":{}}}],["overview",{"_index":834,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":626,"title":{},"body":{"changelog.html":{}}}],["param",{"_index":505,"title":{},"body":{"classes/Setup.html":{}}}],["paramet",{"_index":17,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":822,"title":{},"body":{"index.html":{}}}],["pass",{"_index":589,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["play",{"_index":454,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Setup.html":{},"changelog.html":{}}}],["play(pred",{"_index":488,"title":{},"body":{"classes/Setup.html":{}}}],["playabl",{"_index":477,"title":{},"body":{"classes/Setup.html":{}}}],["playpred",{"_index":476,"title":{},"body":{"classes/Setup.html":{}}}],["playtim",{"_index":441,"title":{"classes/PlayTimes.html":{}},"body":{"classes/PlayTimes.html":{},"classes/Setup.html":{},"coverage.html":{}}}],["pointer",{"_index":760,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":615,"title":{},"body":{"changelog.html":{}}}],["preced",{"_index":639,"title":{},"body":{"changelog.html":{}}}],["predic",{"_index":31,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"changelog.html":{}}}],["predicates.t",{"_index":281,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"coverage.html":{}}}],["predicates.ts:11",{"_index":352,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:15",{"_index":353,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:19",{"_index":354,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:6",{"_index":350,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:7",{"_index":351,"title":{},"body":{"classes/It.html":{}}}],["pretti",{"_index":728,"title":{},"body":{"index.html":{}}}],["print",{"_index":636,"title":{},"body":{"changelog.html":{}}}],["privat",{"_index":94,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/SequenceId.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["product",{"_index":703,"title":{},"body":{"index.html":{}}}],["project",{"_index":708,"title":{},"body":{"index.html":{}}}],["properti",{"_index":93,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"index.html":{}}}],["property1",{"_index":737,"title":{},"body":{"index.html":{}}}],["property2",{"_index":738,"title":{},"body":{"index.html":{}}}],["property3",{"_index":739,"title":{},"body":{"index.html":{}}}],["property4",{"_index":740,"title":{},"body":{"index.html":{}}}],["property4nam",{"_index":741,"title":{},"body":{"index.html":{}}}],["prototyp",{"_index":259,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"index.html":{}}}],["prototype[methodnam",{"_index":347,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["prototypeof",{"_index":296,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"changelog.html":{},"index.html":{}}}],["prototypeof(prototyp",{"_index":303,"title":{},"body":{"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["prototypeof(testobject",{"_index":830,"title":{},"body":{"index.html":{}}}],["proxi",{"_index":170,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["proxy(funct",{"_index":169,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["proxy:ani",{"_index":158,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["public",{"_index":10,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["quick",{"_index":714,"title":{},"body":{"index.html":{}}}],["rang",{"_index":534,"title":{},"body":{"classes/Times.html":{},"miscellaneous/enumerations.html":{}}}],["recommend",{"_index":705,"title":{},"body":{"index.html":{}}}],["record",{"_index":568,"title":{},"body":{"classes/Tracker.html":{}}}],["record.express",{"_index":410,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["refactor",{"_index":722,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":145,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflect(express",{"_index":148,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflectedinfo",{"_index":143,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflector",{"_index":393,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["reflector.t",{"_index":142,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["reflector.ts:15",{"_index":146,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:17",{"_index":147,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:41",{"_index":150,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":558,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["result.substr(0",{"_index":557,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["return",{"_index":26,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["returns('cal",{"_index":786,"title":{},"body":{"index.html":{}}}],["returns(()=>{console.log('th",{"_index":762,"title":{},"body":{"index.html":{}}}],["returns(1",{"_index":745,"title":{},"body":{"index.html":{}}}],["returns(100",{"_index":747,"title":{},"body":{"index.html":{}}}],["returns(fals",{"_index":753,"title":{},"body":{"index.html":{}}}],["returns(new",{"_index":802,"title":{},"body":{"index.html":{}}}],["returns(tru",{"_index":774,"title":{},"body":{"index.html":{}}}],["returns(undefined);mockbehavior.loos",{"_index":826,"title":{},"body":{"index.html":{}}}],["returns(valu",{"_index":494,"title":{},"body":{"classes/Setup.html":{}}}],["right",{"_index":23,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["right.length",{"_index":39,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["right[index",{"_index":44,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["rightexpress",{"_index":233,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.argu",{"_index":367,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["rightexpression.nam",{"_index":235,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.valu",{"_index":473,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["rvalu",{"_index":43,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["save",{"_index":712,"title":{},"body":{"index.html":{}}}],["separ",{"_index":706,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":380,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/PlayTimes.html":{},"classes/Tracker.html":{}}}],["sequence(sequ",{"_index":451,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequence.add(thi",{"_index":416,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["sequence[index",{"_index":455,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequenceid",{"_index":456,"title":{"classes/SequenceId.html":{}},"body":{"classes/SequenceId.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sequenceidfactori",{"_index":463,"title":{},"body":{"classes/SequenceId.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":164,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"index.html":{}}}],["set.properti",{"_index":201,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["set.property.integrationtests.t",{"_index":768,"title":{},"body":{"index.html":{}}}],["set/read",{"_index":616,"title":{},"body":{"changelog.html":{}}}],["setbehaviorstrategi",{"_index":243,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"classes/InterceptorCallbacks.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setbehaviorstrategy(behavior",{"_index":244,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["setbehaviorstrategy(behaviorstrategi",{"_index":384,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setbehaviorstrategy(mockbehavior.loos",{"_index":817,"title":{},"body":{"index.html":{}}}],["setbehaviorstrategy(mockbehavior.strict);th",{"_index":818,"title":{},"body":{"index.html":{}}}],["setpropertyexpress",{"_index":178,"title":{"classes/SetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["setpropertyexpression(nam",{"_index":317,"title":{},"body":{"classes/Interceptor.html":{}}}],["setpropertyexpression:25",{"_index":185,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpression:26",{"_index":186,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpressionformatt",{"_index":191,"title":{"classes/SetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"coverage.html":{}}}],["setpropertyexpressionmatch",{"_index":211,"title":{"classes/SetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"coverage.html":{}}}],["setpropertyformatt",{"_index":190,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["setpropertyformatterfactori",{"_index":670,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setpropertymatcherfactori",{"_index":664,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["setprototypeof",{"_index":324,"title":{},"body":{"classes/Interceptor.html":{}}}],["setup",{"_index":95,"title":{"classes/Setup.html":{}},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["setup(express",{"_index":387,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setup(inst",{"_index":743,"title":{},"body":{"index.html":{}}}],["setup(mock",{"_index":420,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setup.invok",{"_index":339,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke((expression).argu",{"_index":337,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke([(expression).valu",{"_index":338,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setupfactori",{"_index":401,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["setups.t",{"_index":92,"title":{},"body":{"classes/DefinedSetups.html":{},"coverage.html":{}}}],["setups.ts:13",{"_index":103,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:17",{"_index":107,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:26",{"_index":109,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:7",{"_index":98,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["signatur",{"_index":237,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["simpl",{"_index":717,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["spi",{"_index":827,"title":{},"body":{"index.html":{}}}],["start",{"_index":608,"title":{"changelog.html":{},"index.html":{}},"body":{"index.html":{}}}],["statement",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":282,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/Times.html":{}}}],["still",{"_index":725,"title":{},"body":{"index.html":{}}}],["strict",{"_index":255,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["strictstrategi",{"_index":262,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["string",{"_index":78,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["string.t",{"_index":666,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["strongli",{"_index":718,"title":{},"body":{"index.html":{}}}],["super",{"_index":418,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["super(messag",{"_index":585,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["support",{"_index":617,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":58,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{}}}],["tabl",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":159,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["templat",{"_index":695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test",{"_index":348,"title":{},"body":{"classes/It.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"index.html":{}}}],["test(callcount",{"_index":541,"title":{},"body":{"classes/Times.html":{}}}],["test(expect",{"_index":577,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["test(inst",{"_index":286,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["testobject",{"_index":829,"title":{},"body":{"index.html":{}}}],["tests.integr",{"_index":733,"title":{},"body":{"index.html":{}}}],["texcept",{"_index":497,"title":{},"body":{"classes/Setup.html":{}}}],["therefor",{"_index":720,"title":{},"body":{"index.html":{}}}],["this._prototyp",{"_index":306,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._prototype.prototyp",{"_index":323,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._proxi",{"_index":307,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values.hasownproperty(nam",{"_index":312,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values[nam",{"_index":313,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.act",{"_index":501,"title":{},"body":{"classes/Setup.html":{}}}],["this.action(arg",{"_index":500,"title":{},"body":{"classes/Setup.html":{}}}],["this.activestrategi",{"_index":269,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.hasnamedmethod(methodnam",{"_index":271,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.intercepted(express",{"_index":270,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.argu",{"_index":225,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["this.argumentsmatcher.matched(left.argu",{"_index":366,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["this.callcounter.count(express",{"_index":588,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.constantformatter.format(express",{"_index":208,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.argu",{"_index":360,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.valu",{"_index":468,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["this.constantmatcher.matched(left.valu",{"_index":472,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["this.constantmatcher.matched(lvalu",{"_index":45,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["this.createobject",{"_index":308,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.definedsetups.add(expectedexpress",{"_index":407,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.definedsetups.get(express",{"_index":336,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.definedsetups.get(getpropertyexpress",{"_index":341,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["this.definedsetups.hasnamedmethod(methodnam",{"_index":346,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.evaluator(callcount",{"_index":549,"title":{},"body":{"classes/Times.html":{}}}],["this.expectedexpressionformatter.format(expect",{"_index":601,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.expressionformatter.format(expect",{"_index":134,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["this.expressionformatter.format(expression)}\\n",{"_index":556,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["this.expressionmatcher.matched(express",{"_index":65,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["this.expressionproxi",{"_index":171,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.expressionreflector.reflect(express",{"_index":406,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.getpropertyexpressionmatcher.matched(left",{"_index":216,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.getpropertyformatter.format(express",{"_index":204,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.interceptedcallbacks.setbehaviorstrategy(behaviorstrategi",{"_index":415,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor",{"_index":403,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor.object",{"_index":413,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptor.prototypeof(prototyp",{"_index":414,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.interceptorcallbacks.hasnamedmethod(nam",{"_index":314,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(express",{"_index":319,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(getpropertyexpress",{"_index":311,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(namedmethodexpress",{"_index":316,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.log",{"_index":571,"title":{},"body":{"classes/Tracker.html":{}}}],["this.log.push(record",{"_index":570,"title":{},"body":{"classes/Tracker.html":{}}}],["this.loosestrategi",{"_index":275,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.methodexpressionmatcher.matched(left",{"_index":218,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.methodformatter.format(express",{"_index":206,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.mock",{"_index":502,"title":{},"body":{"classes/Setup.html":{}}}],["this.nam",{"_index":412,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.namedmethodexpressionmatcher.matched(left",{"_index":219,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.namedmethodformatter.format(express",{"_index":207,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.playpred",{"_index":506,"title":{},"body":{"classes/Setup.html":{}}}],["this.predicate(inst",{"_index":288,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["this.reflectedinfo",{"_index":160,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.reflector.reflect(expect",{"_index":587,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.sequenceid.next",{"_index":569,"title":{},"body":{"classes/Tracker.html":{}}}],["this.setpropertyexpressionmatcher.matched(left",{"_index":217,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.setpropertyformatter.format(express",{"_index":205,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.setup",{"_index":113,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.setupfactory(thi",{"_index":405,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.setups.unshift([key",{"_index":112,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.strictstrategi",{"_index":273,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.trackedexpressionsformatter.format(trackedexpress",{"_index":603,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.tracker.add(express",{"_index":335,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.tracker.get().map(record",{"_index":409,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.valu",{"_index":462,"title":{},"body":{"classes/SequenceId.html":{}}}],["this.verifier.test(express",{"_index":411,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["this.verifyformatter.format(express",{"_index":591,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["thisarg",{"_index":167,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["throw",{"_index":478,"title":{},"body":{"classes/Setup.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["throws(except",{"_index":496,"title":{},"body":{"classes/Setup.html":{}}}],["throws(new",{"_index":756,"title":{},"body":{"index.html":{}}}],["time",{"_index":391,"title":{"classes/Times.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Times.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"index.html":{}}}],["time(",{"_index":139,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Times.html":{}}}],["times(expect",{"_index":521,"title":{},"body":{"classes/Times.html":{}}}],["times._atleastonc",{"_index":546,"title":{},"body":{"classes/Times.html":{}}}],["times._nev",{"_index":547,"title":{},"body":{"classes/Times.html":{}}}],["times._onc",{"_index":548,"title":{},"body":{"classes/Times.html":{}}}],["times.exactly(1",{"_index":795,"title":{},"body":{"index.html":{}}}],["times.messag",{"_index":592,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.never());mock",{"_index":766,"title":{},"body":{"index.html":{}}}],["times.onc",{"_index":408,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"index.html":{}}}],["times.once());mock",{"_index":782,"title":{},"body":{"index.html":{}}}],["times.t",{"_index":443,"title":{},"body":{"classes/PlayTimes.html":{},"coverage.html":{}}}],["times.test(callcount",{"_index":590,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.ts:12",{"_index":449,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:16",{"_index":450,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:25",{"_index":452,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:3",{"_index":448,"title":{},"body":{"classes/PlayTimes.html":{}}}],["timesmessag",{"_index":123,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["timesmessage.tolowercas",{"_index":137,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["track",{"_index":598,"title":{},"body":{"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["trackedact",{"_index":563,"title":{},"body":{"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["trackedexpress",{"_index":553,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatt",{"_index":550,"title":{"classes/TrackedExpressionsFormatter.html":{}},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["trackedexpressionsformatter(expressionformatterfactori",{"_index":555,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["trackedexpressionsformatterfactori",{"_index":554,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["trackedexpressionsmessag",{"_index":602,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["tracker",{"_index":251,"title":{"classes/Tracker.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tracker(sequenceidfactori",{"_index":572,"title":{},"body":{"classes/Tracker.html":{}}}],["trackerfactori",{"_index":395,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Tracker.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tresult",{"_index":487,"title":{},"body":{"classes/Setup.html":{}}}],["tri",{"_index":287,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["true",{"_index":37,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"index.html":{}}}],["truesponsor",{"_index":831,"title":{},"body":{"index.html":{}}}],["tvalu",{"_index":484,"title":{},"body":{"classes/Setup.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealias",{"_index":836,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror",{"_index":820,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":82,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["typescript",{"_index":697,"title":{},"body":{"index.html":{}}}],["unam",{"_index":236,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["undefin",{"_index":115,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["unset",{"_index":819,"title":{},"body":{"index.html":{}}}],["us",{"_index":492,"title":{},"body":{"classes/Setup.html":{},"changelog.html":{},"index.html":{}}}],["usag",{"_index":729,"title":{},"body":{"index.html":{}}}],["v2.1.0",{"_index":610,"title":{},"body":{"changelog.html":{}}}],["v2.3.0",{"_index":613,"title":{},"body":{"changelog.html":{}}}],["v2.3.1",{"_index":624,"title":{},"body":{"changelog.html":{}}}],["v2.4.0",{"_index":630,"title":{},"body":{"changelog.html":{}}}],["v2.5.0",{"_index":632,"title":{},"body":{"changelog.html":{}}}],["v2.5.1",{"_index":637,"title":{},"body":{"changelog.html":{}}}],["v2.6.0",{"_index":640,"title":{},"body":{"changelog.html":{}}}],["v2.6.1",{"_index":641,"title":{},"body":{"changelog.html":{}}}],["v2.6.2",{"_index":643,"title":{},"body":{"changelog.html":{}}}],["valu",{"_index":100,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value.play",{"_index":114,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["values[0",{"_index":801,"title":{},"body":{"index.html":{}}}],["values[1",{"_index":805,"title":{},"body":{"index.html":{}}}],["values[2",{"_index":810,"title":{},"body":{"index.html":{}}}],["var",{"_index":157,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["variabl",{"_index":659,"title":{"miscellaneous/variables.html":{}},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["verifi",{"_index":372,"title":{"classes/Verifier.html":{}},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"coverage.html":{},"index.html":{}}}],["verifier(new",{"_index":586,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifierfactori",{"_index":396,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["verify(express",{"_index":390,"title":{},"body":{"classes/Mock.html":{},"classes/MockCore.html":{}}}],["verifyerror",{"_index":582,"title":{"classes/VerifyError.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"coverage.html":{}}}],["verifyerror(messag",{"_index":593,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyformatt",{"_index":575,"title":{"classes/VerifyFormatter.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{}}}],["verifyformatter(expectedexpressionformatterfactori",{"_index":599,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["verifyformatterfactori",{"_index":580,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":105,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"classes/Times.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["want",{"_index":823,"title":{},"body":{"index.html":{}}}],["without",{"_index":815,"title":{},"body":{"index.html":{}}}],["work",{"_index":622,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["write",{"_index":750,"title":{},"body":{"index.html":{}}}],["written",{"_index":780,"title":{},"body":{"index.html":{}}}],["ye",{"_index":127,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Interceptor.html":{},"classes/Mock.html":{},"classes/MockCore.html":{},"classes/Setup.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ArgumentsMatcher.html":{"url":"classes/ArgumentsMatcher.html","title":"class - ArgumentsMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArgumentsMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/arguments-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/arguments-matcher.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any[], right: (any | It)[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/arguments-matcher.ts:9\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    (any | It)[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: any[], right: (any|It)[]): boolean{\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        let matched = true;\n        left.forEach((lvalue, index) =>{\n            const rvalue = right[index];\n            matched = this.constantMatcher.matched(lvalue, rvalue) === true ? matched : false;\n        });\n\n        return matched;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallCounter.html":{"url":"classes/CallCounter.html","title":"class - CallCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CallCounter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/call-counter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                count\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/call-counter.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        count(expected: ExpectedExpressions, expressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/call-counter.ts:12\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from './expected-expressions/expected-expressions';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\n\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count(expected: ExpectedExpressions, expressions: Expressions[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true)\n                count += 1;\n        }\n\n        return count;\n    }\n}\n\nexport function callCounterFactory(): CallCounter {\n    return new CallCounter(expressionMatcherFactory());\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantFormatter.html":{"url":"classes/ConstantFormatter.html","title":"class - ConstantFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/constant-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(object: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/constant-formatter.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantFormatter {\n\n    public format(object: any|It): string {\n        if (object instanceof It) return `It.Is(${(object as It).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const index in object)\n                description.push(new ConstantFormatter().format(object[index]));\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantMatcher.html":{"url":"classes/ConstantMatcher.html","title":"class - ConstantMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/constant-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any, right: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/constant-matcher.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantMatcher {\n\n    public matched(left: any, right: any|It): boolean {\n        if (right instanceof It)\n            return (right as It).test(left);\n        return left === right;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefinedSetups.html":{"url":"classes/DefinedSetups.html","title":"class - DefinedSetups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefinedSetups\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/defined-setups.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                setups\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/defined-setups.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            setups\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setups:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/defined-setups.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(key: ExpectedExpressions, setup: ISetupInvoke)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        setup\n                                                        \n                                                                    ISetupInvoke\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetupInvoke\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExpectedExpressions, ExpectedNamedMethodExpression } from \"./expected-expressions/expected-expressions\";\nimport { ExpressionMatcher } from \"./expression-matchers/expression-matcher\";\nimport { Expressions } from \"./expressions\";\nimport { ISetupInvoke } from \"./moq\";\n\nexport class DefinedSetups {\n    private setups: [ExpectedExpressions, ISetupInvoke][] = [];\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public add(key: ExpectedExpressions, setup: ISetupInvoke): void {\n        this.setups.unshift([key, setup]);\n    }\n\n    public get(expression: Expressions): ISetupInvoke {\n        for (const [key, value] of this.setups) {\n            if (this.expressionMatcher.matched(expression, key) === true && value.playable())\n                return value;\n        }\n\n        return undefined;\n    }\n\n    public hasNamedMethod(name: string): boolean {\n        for (const [key] of this.setups) {\n            if (key instanceof ExpectedNamedMethodExpression && (key as ExpectedNamedMethodExpression).name === name)\n                return true;\n        }\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionFormatter.html":{"url":"classes/ExpectedExpressionFormatter.html","title":"class - ExpectedExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expected-expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expected-expression-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expected-expression-formatter.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\n\nexport function expectedExpressionFormatterFactory (): ExpectedExpressionFormatter {\n    return new ExpectedExpressionFormatter(expressionFormatterFactory());\n}\n\nexport class ExpectedExpressionFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\n        const expressionDescription = this.expressionFormatter.format(expected);\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : '';\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionReflector.html":{"url":"classes/ExpectedExpressionReflector.html","title":"class - ExpectedExpressionReflector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionReflector\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                reflectedInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                expressionProxy\n                            \n                            \n                                    Public\n                                reflect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reflectedInfo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reflectedInfo:     \n\n                    \n                \n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            expressionProxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        expressionProxy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reflect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reflect(expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:41\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ExpectedExpressions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedGetPropertyExpression.html":{"url":"classes/ExpectedGetPropertyExpression.html","title":"class - ExpectedGetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedGetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     GetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in GetPropertyExpression:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMethodExpression.html":{"url":"classes/ExpectedMethodExpression.html","title":"class - ExpectedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in MethodExpression:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNamedMethodExpression.html":{"url":"classes/ExpectedNamedMethodExpression.html","title":"class - ExpectedNamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNamedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NamedMethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedSetPropertyExpression.html":{"url":"classes/ExpectedSetPropertyExpression.html","title":"class - ExpectedSetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedSetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionFormatter.html":{"url":"classes/ExpressionFormatter.html","title":"class - ExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyFormatter: GetPropertyExpressionFormatter, setPropertyFormatter: SetPropertyExpressionFormatter, methodFormatter: MethodExpressionFormatter, namedMethodFormatter: NamedMethodExpressionFormatter, constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expression-formatter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getPropertyFormatter\n                                                  \n                                                        \n                                                                    GetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setPropertyFormatter\n                                                  \n                                                        \n                                                                    SetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        methodFormatter\n                                                  \n                                                        \n                                                                    MethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namedMethodFormatter\n                                                  \n                                                        \n                                                                    NamedMethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: Expressions | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expression-formatter.ts:22\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, SetPropertyExpression, NamedMethodExpression,\n    MethodExpression\n} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {GetPropertyExpressionFormatter} from './get.property-formatter';\nimport {SetPropertyExpressionFormatter} from './set.property-formatter';\nimport {MethodExpressionFormatter} from './method-formatter';\nimport {NamedMethodExpressionFormatter} from './named.method-formatter';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: Expressions|It): string {\n        if (expression instanceof GetPropertyExpression) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyExpression) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof MethodExpression) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodExpression) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionMatcher.html":{"url":"classes/ExpressionMatcher.html","title":"class - ExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/expression-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyExpressionMatcher: GetPropertyExpressionMatcher, setPropertyExpressionMatcher: SetPropertyExpressionMatcher, methodExpressionMatcher: MethodExpressionMatcher, namedMethodExpressionMatcher: NamedMethodExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/expression-matcher.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    GetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    SetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        methodExpressionMatcher\n                                                  \n                                                        \n                                                                    MethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        namedMethodExpressionMatcher\n                                                  \n                                                        \n                                                                    NamedMethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: Expressions, right: ExpectedExpressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/expression-matcher.ts:24\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpressionMatcher} from './get.property-matcher';\nimport {SetPropertyExpressionMatcher} from './set.property-matcher';\nimport {MethodExpressionMatcher} from './method-matcher';\nimport {NamedMethodExpressionMatcher} from './named.method-matcher';\nimport {\n    Expressions, GetPropertyExpression, SetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from '../expressions';\nimport {\n    ExpectedExpressions, ExpectedGetPropertyExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression\n} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher) {\n\n    }\n\n    public matched(left: Expressions, right: ExpectedExpressions): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyExpression && (right instanceof ExpectedGetPropertyExpression || right instanceof It))\n            return this.getPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof SetPropertyExpression && (right instanceof ExpectedSetPropertyExpression || right instanceof It))\n            return this.setPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof MethodExpression && (right instanceof ExpectedMethodExpression || right instanceof It))\n            return this.methodExpressionMatcher.matched(left, >right);\n        if (left instanceof NamedMethodExpression && (right instanceof ExpectedNamedMethodExpression || right instanceof It))\n            return this.namedMethodExpressionMatcher.matched(left, >right);\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpression.html":{"url":"classes/GetPropertyExpression.html","title":"class - GetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionFormatter.html":{"url":"classes/GetPropertyExpressionFormatter.html","title":"class - GetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/get.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: GetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/get.property-formatter.ts:5\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\n\nexport class GetPropertyExpressionFormatter{\n\n    public format(expression: GetPropertyExpression): string{\n        return `Getter of \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionMatcher.html":{"url":"classes/GetPropertyExpressionMatcher.html","title":"class - GetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/get.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/get.property-matcher.ts:7\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedGetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ExpectedGetPropertyExpression} from '../expected-expressions/expected-expressions';\n\nexport class GetPropertyExpressionMatcher{\n\n    public matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpectedExpression.html":{"url":"interfaces/IExpectedExpression.html","title":"interface - IExpectedExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpectedExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void | any | It\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacks.html":{"url":"interfaces/IInterceptorCallbacks.html","title":"interface - IInterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n            \n                Extends\n            \n            \n                    IInterceptorCallbacksStrategy\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setBehaviorStrategy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacksStrategy.html":{"url":"interfaces/IInterceptorCallbacksStrategy.html","title":"interface - IInterceptorCallbacksStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacksStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasNamedMethod\n                                \n                                \n                                    intercepted\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:14\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPredicate.html":{"url":"interfaces/IPredicate.html","title":"interface - IPredicate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPredicate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     boolean\n\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptor.html":{"url":"classes/Interceptor.html","title":"class - Interceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _prototype\n                            \n                            \n                                    Private\n                                _proxy\n                            \n                            \n                                    Private\n                                _values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createObject\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(interceptorCallbacks: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        interceptorCallbacks\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _prototype\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _prototype:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _proxy:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _values:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createObject\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createObject()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:35\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:20\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:28\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from './expressions';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks/interceptor-callbacks';\n\ndeclare var Proxy: any;\n\nexport class Interceptor {\n\n\n    private _proxy: T;\n    private _prototype: any;\n    private _values = {};\n\n    constructor(private interceptorCallbacks: IInterceptorCallbacksStrategy) {\n        this._prototype = Function;\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    public prototypeof(prototype?: any): any {\n        if (prototype !== undefined)\n            this._prototype = prototype;\n\n        return this._prototype;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => {\n                const getPropertyExpression = new GetPropertyExpression(name);\n                const getPropertyResult = this.interceptorCallbacks.intercepted(getPropertyExpression);\n\n                if (this._values.hasOwnProperty(name) === true)\n                    return this._values[name];\n\n                if (this.interceptorCallbacks.hasNamedMethod(name, this._prototype) === false)\n                    return getPropertyResult;\n\n                return (...args) => {\n                    const namedMethodExpression = new NamedMethodExpression(name, args);\n                    return this.interceptorCallbacks.intercepted(namedMethodExpression);\n                }\n            },\n\n            set: (target, name, value) => {\n                const expression = new SetPropertyExpression(name, value);\n                const accepted = this.interceptorCallbacks.intercepted(expression);\n                if (accepted === true || accepted === undefined) {\n                    this._values[name] = value;\n                }\n\n                return accepted === undefined ? true : accepted;\n            },\n\n            apply: (target, thisArg, args) => {\n                const expression = new MethodExpression(args);\n                return this.interceptorCallbacks.intercepted(expression);\n            },\n\n            getPrototypeOf: (target) => {\n                if (this._prototype === null)\n                    return null;\n                return this._prototype.prototype;\n            },\n            setPrototypeOf: (target, prototype) => {\n                if (prototype !== undefined)\n                    this._prototype = prototype;\n                return true;\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacks.html":{"url":"classes/InterceptorCallbacks.html","title":"class - InterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacks\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeStrategy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(strictStrategy: IInterceptorCallbacksStrategy, looseStrategy: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        strictStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        looseStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeStrategy:     IInterceptorCallbacksStrategy\n\n                    \n                \n                    \n                        \n                            Type :     IInterceptorCallbacksStrategy\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:41\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:45\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksLooseStrategy.html":{"url":"classes/InterceptorCallbacksLooseStrategy.html","title":"class - InterceptorCallbacksLooseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksLooseStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:32\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksLooseStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const getPropertyExpression = new GetPropertyExpression(methodName);\n        const setup = this.definedSetups.get(getPropertyExpression);\n        return setup !== undefined ? false : true;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksStrictStrategy.html":{"url":"classes/InterceptorCallbacksStrictStrategy.html","title":"class - InterceptorCallbacksStrictStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksStrictStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Expressions, MethodExpression, NamedMethodExpression, SetPropertyExpression} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksStrictStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const hasNamedMethod = this.definedSetups.hasNamedMethod(methodName);\n        if (hasNamedMethod === true) return true;\n\n        if (prototype !== null && prototype[methodName] instanceof Function)\n            return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/It.html":{"url":"classes/It.html","title":"class - It","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  It\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                predicate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Is\n                            \n                            \n                                    Static\n                                IsAny\n                            \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(predicate: IPredicate)\n                    \n                \n                        \n                            \n                                Defined in lib/expected-expressions/expression-predicates.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                  \n                                                        \n                                                                    IPredicate\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            predicate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        predicate:     IPredicate\n\n                    \n                \n                    \n                        \n                            Type :     IPredicate\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Is\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Is(predicate: IPredicate)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:11\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                        \n                                                                    IPredicate\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     It | any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            IsAny\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        IsAny()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:15\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        T\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     It | any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(instance: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:19\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        instance\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpression.html":{"url":"classes/MethodExpression.html","title":"class - MethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionFormatter.html":{"url":"classes/MethodExpressionFormatter.html","title":"class - MethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: MethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/method-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {MethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class MethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: MethodExpression): string{\n        const value = this.constantFormatter.format(expression.arguments);\n        return `(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionMatcher.html":{"url":"classes/MethodExpressionMatcher.html","title":"class - MethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: MethodExpression, right: ExpectedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/method-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {MethodExpression} from '../expressions';\nimport {ExpectedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class MethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: MethodExpression, right: ExpectedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mock.html":{"url":"classes/Mock.html","title":"class - Mock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MockCore\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                interceptor\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                tracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                insequence\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                            \n                                    Public\n                                setup\n                            \n                            \n                                    Public\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/mock.ts:71\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interceptor:     Interceptor\n\n                    \n                \n                    \n                        \n                            Type :     Interceptor\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tracker\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tracker:     Tracker\n\n                    \n                \n                    \n                        \n                            Type :     Tracker\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            insequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        insequence(sequence: ISequenceVerifier, expression: IExpectedExpression)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    ISequenceVerifier\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behaviorStrategy: MockBehavior)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:60\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behaviorStrategy\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setup(expression: IExpectedExpression)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            verify\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        verify(expression: IExpectedExpression, times?: Times)\n                    \n                \n\n\n                            \n                                \n                                    Inherited from     MockCore\n\n                                \n                            \n                        \n                            \n                                    Defined in MockCore:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"./defined-setups\";\nimport { ExpectedExpressionReflector, IExpectedExpression } from \"./expected-expressions/expected-expression-reflector\";\nimport { expressionMatcherFactory } from \"./expression-matchers/factories\";\nimport { Interceptor } from \"./interceptor\";\nimport {\n    IInterceptorCallbacks,\n    interceptorCallbacksFactory,\n    MockBehavior\n} from \"./interceptor-callbacks/interceptor-callbacks\";\nimport { IMock, ISequenceVerifier, ISetup, ISetupInvoke } from \"./moq\";\nimport { Setup } from \"./setup\";\nimport { Times } from \"./times\";\nimport { Tracker, trackerFactory } from \"./tracker\";\nimport { Verifier, verifierFactory } from \"./verifier\";\n\n/**\n * @internal\n * @hidden\n * @private\n */\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n\n    constructor(\n        private expressionReflector: ExpectedExpressionReflector,\n        private interceptorFactory: (callbacks: IInterceptorCallbacks) => Interceptor,\n        private setupFactory: (mock: IMock) => ISetupInvoke,\n        private definedSetups: DefinedSetups,\n        public tracker: Tracker,\n        private verifier: Verifier,\n        private interceptedCallbacks: IInterceptorCallbacks,\n        public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): IMock {\n        times = times === undefined ? Times.Once() : times;\n        const expressions = this.tracker.get().map(record => record.expression);\n        this.verifier.test(expression, times, expressions, this.name);\n        return this;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n\n    public insequence(sequence: ISequenceVerifier, expression: IExpectedExpression): IMock{\n        sequence.add(this, expression);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = trackerFactory();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockCore.html":{"url":"classes/MockCore.html","title":"class - MockCore","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MockCore\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IMock\n            \n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                interceptor\n                            \n                            \n                                    Public\n                                    Optional\n                                name\n                            \n                            \n                                    Public\n                                tracker\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                insequence\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                            \n                                    Public\n                                setup\n                            \n                            \n                                    Public\n                                verify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionReflector: ExpectedExpressionReflector, interceptorFactory: (callbacks: IInterceptorCallbacks) => void, setupFactory: (mock: IMock) => void, definedSetups: DefinedSetups, tracker: Tracker, verifier: Verifier, interceptedCallbacks: IInterceptorCallbacks, name?: string)\n                    \n                \n                        \n                            \n                                Defined in lib/mock.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionReflector\n                                                  \n                                                        \n                                                                    ExpectedExpressionReflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interceptorFactory\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        setupFactory\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        verifier\n                                                  \n                                                        \n                                                                    Verifier\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interceptedCallbacks\n                                                  \n                                                        \n                                                                    IInterceptorCallbacks\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interceptor\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interceptor:     Interceptor\n\n                    \n                \n                    \n                        \n                            Type :     Interceptor\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Optional\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            tracker\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        tracker:     Tracker\n\n                    \n                \n                    \n                        \n                            Type :     Tracker\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/mock.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            insequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        insequence(sequence: ISequenceVerifier, expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:65\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    ISequenceVerifier\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:51\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:55\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behaviorStrategy: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:60\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behaviorStrategy\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setup\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setup(expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:37\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            verify\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        verify(expression: IExpectedExpression, times?: Times)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/mock.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { DefinedSetups } from \"./defined-setups\";\nimport { ExpectedExpressionReflector, IExpectedExpression } from \"./expected-expressions/expected-expression-reflector\";\nimport { expressionMatcherFactory } from \"./expression-matchers/factories\";\nimport { Interceptor } from \"./interceptor\";\nimport {\n    IInterceptorCallbacks,\n    interceptorCallbacksFactory,\n    MockBehavior\n} from \"./interceptor-callbacks/interceptor-callbacks\";\nimport { IMock, ISequenceVerifier, ISetup, ISetupInvoke } from \"./moq\";\nimport { Setup } from \"./setup\";\nimport { Times } from \"./times\";\nimport { Tracker, trackerFactory } from \"./tracker\";\nimport { Verifier, verifierFactory } from \"./verifier\";\n\n/**\n * @internal\n * @hidden\n * @private\n */\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n\n    constructor(\n        private expressionReflector: ExpectedExpressionReflector,\n        private interceptorFactory: (callbacks: IInterceptorCallbacks) => Interceptor,\n        private setupFactory: (mock: IMock) => ISetupInvoke,\n        private definedSetups: DefinedSetups,\n        public tracker: Tracker,\n        private verifier: Verifier,\n        private interceptedCallbacks: IInterceptorCallbacks,\n        public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): IMock {\n        times = times === undefined ? Times.Once() : times;\n        const expressions = this.tracker.get().map(record => record.expression);\n        this.verifier.test(expression, times, expressions, this.name);\n        return this;\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n\n    public insequence(sequence: ISequenceVerifier, expression: IExpectedExpression): IMock{\n        sequence.add(this, expression);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = trackerFactory();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpression.html":{"url":"classes/NamedMethodExpression.html","title":"class - NamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionFormatter.html":{"url":"classes/NamedMethodExpressionFormatter.html","title":"class - NamedMethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/named.method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/named.method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: NamedMethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/named.method-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {NamedMethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class NamedMethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: NamedMethodExpression): string{\n        const formatted: string[] = [];\n\n        expression.arguments.forEach(arg=>{\n            formatted.push(this.constantFormatter.format(arg));\n        });\n\n        const value = formatted.join(', ');\n        return `${expression.name}(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionMatcher.html":{"url":"classes/NamedMethodExpressionMatcher.html","title":"class - NamedMethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/named.method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/named.method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/named.method-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedNamedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {NamedMethodExpression} from '../expressions';\nimport {ExpectedNamedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class NamedMethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name)\n            return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlayTimes.html":{"url":"classes/PlayTimes.html","title":"class - PlayTimes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlayTimes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/play-times.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Exactly\n                            \n                            \n                                    Static\n                                Never\n                            \n                            \n                                    Static\n                                Once\n                            \n                            \n                                    Static\n                                Sequence\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Exactly\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Exactly(count: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:3\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Never()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Once()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:16\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Sequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Sequence(sequence: boolean[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    boolean[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PlayTimes {\n\n    public static Exactly(count: number): () => boolean {\n        let invoked = 0;\n        return () => {\n            if (invoked >= count) return false;\n            invoked++;\n            return true;\n        };\n    }\n\n    public static Never(): () => boolean {\n        return () => false;\n    }\n\n    public static Once(): () => boolean {\n        let played = false;\n        return () => {\n            if (played) return false;\n            played = true;\n            return true;\n        };\n    }\n\n    public static Sequence(sequence: boolean[]): () => boolean {\n        let index = 0;\n        return () => {\n            const value = sequence[index];\n            index++;\n            return value;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequenceId.html":{"url":"classes/SequenceId.html","title":"class - SequenceId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequenceId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/sequence-id.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/sequence-id.ts:2\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            next\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        next()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/sequence-id.ts:4\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class SequenceId {\n    private value: number = 0;\n\n    public next(): number {\n        return this.value++;\n    }\n}\n\nconst instance = new SequenceId();\n\nexport function sequenceIdFactory(): SequenceId {\n    return instance;\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpression.html":{"url":"classes/SetPropertyExpression.html","title":"class - SetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpression\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionFormatter.html":{"url":"classes/SetPropertyExpressionFormatter.html","title":"class - SetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/set.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/set.property-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/set.property-formatter.ts:10\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {SetPropertyExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class SetPropertyExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: SetPropertyExpression): string{\n        const value = this.constantFormatter.format(expression.value);\n        return `Assignment of ${value} to property \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionMatcher.html":{"url":"classes/SetPropertyExpressionMatcher.html","title":"class - SetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionMatcher\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/set.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/set.property-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/set.property-matcher.ts:12\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedSetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedSetPropertyExpression} from '../expected-expressions/expected-expressions';\nimport {SetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class SetPropertyExpressionMatcher{\n\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Setup.html":{"url":"classes/Setup.html","title":"class - Setup","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Setup\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/setup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ISetupInvoke\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                action\n                            \n                            \n                                    Private\n                                playPredicate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                callback\n                            \n                            \n                                    Public\n                                invoke\n                            \n                            \n                                    Public\n                                play\n                            \n                            \n                                    Public\n                                playable\n                            \n                            \n                                    Public\n                                returns\n                            \n                            \n                                    Public\n                                throws\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mock: IMock)\n                    \n                \n                        \n                            \n                                Defined in lib/setup.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mock\n                                                  \n                                                        \n                                                                    IMock\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            action\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        action:     Function\n\n                    \n                \n                    \n                        \n                            Type :     Function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/setup.ts:5\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            playPredicate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        playPredicate:     function\n\n                    \n                \n                    \n                        \n                            Type :     function\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/setup.ts:6\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            callback\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        callback(callback: (args: any[]) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:28\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TValue\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            invoke\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        invoke(args?: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:12\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TResult\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        args\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     TResult\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            play\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        play(predicate: () => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:39\n                            \n                        \n\n\n                \n                    \n                            Plays the setup when predicate returns true otherwise the setup will be ignored.\nAs predicate PlayTimes could be used.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetup\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            playable\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        playable()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            returns\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        returns(value: TValue)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:16\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TValue\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    TValue\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            throws\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        throws(exception: TException)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/setup.ts:21\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TException\n                                \n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        exception\n                                                        \n                                                                    TException\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     IMock\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { IMock, ISetup, ISetupInvoke } from \"./moq\";\n\nexport class Setup implements ISetupInvoke {\n\n    private action: Function;\n    private playPredicate: () => boolean;\n\n    constructor(private mock: IMock) {\n\n    }\n\n    public invoke(args?: any[]): TResult {\n        return this.action(args);\n    }\n\n    public returns(value: TValue): IMock {\n        this.action = () => value;\n        return this.mock;\n    }\n\n    public throws(exception: TException): IMock {\n        this.action = () => {\n            throw exception;\n        };\n        return this.mock;\n    }\n\n    public callback(callback: (args: any[]) => TValue): IMock {\n        this.action = (args?: any[]) => callback.apply(undefined, args);\n        return this.mock;\n    }\n\n    /**\n     * Plays the setup when predicate returns true otherwise the setup will be ignored.\n     * As predicate {@link PlayTimes} could be used.\n     * @param {() => boolean} predicate\n     * @returns {ISetup}\n     */\n    public play(predicate: () => boolean): ISetup {\n        this.playPredicate = predicate;\n        return this;\n    }\n\n    public playable(): boolean {\n        if (this.playPredicate === undefined) return true;\n        return this.playPredicate();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Times.html":{"url":"classes/Times.html","title":"class - Times","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Times\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/times.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _atLeastOnce\n                            \n                            \n                                    Private\n                                    Static\n                                _atMostOnce\n                            \n                            \n                                    Private\n                                    Static\n                                _never\n                            \n                            \n                                    Private\n                                    Static\n                                _once\n                            \n                            \n                                    Public\n                                message\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                AtLeast\n                            \n                            \n                                    Static\n                                AtLeastOnce\n                            \n                            \n                                    Static\n                                AtMost\n                            \n                            \n                                    Static\n                                AtMostOnce\n                            \n                            \n                                    Static\n                                Between\n                            \n                            \n                                    Static\n                                Exactly\n                            \n                            \n                                    Static\n                                Never\n                            \n                            \n                                    Static\n                                Once\n                            \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(evaluator: (callCount: number) => void, message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/times.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        evaluator\n                                                  \n                                                        \n                                                                    function\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _atLeastOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _atLeastOnce:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected >= 1, `Should be called at least once`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _atMostOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _atMostOnce:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected \n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:9\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _never:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected === 0, `Should be called never`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Static\n                            _once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _once:     Times\n\n                    \n                \n                    \n                        \n                            Type :     Times\n\n                        \n                    \n                    \n                        \n                            Default value : new Times(expected => expected === 1, `Should be called once`)\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:7\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            message\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        message:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/times.ts:13\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtLeast\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtLeast(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:17\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtLeastOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtLeastOnce()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:21\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtMost\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtMost(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:25\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            AtMostOnce\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        AtMostOnce()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:29\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Between\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Between(callCountFrom: number, callCountTo: number, range: Range)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:33\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCountFrom\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        callCountTo\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        range\n                                                        \n                                                                    Range\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Exactly\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Exactly(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:40\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Times\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Never()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:44\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Once()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:48\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     Times\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(callCount: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/times.ts:52\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        callCount\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export enum Range{\n    Exclusive,\n    Inclusive\n}\n\nexport class Times {\n    private static _once: Times =  new Times(expected => expected === 1, `Should be called once`);\n    private static _never: Times =  new Times(expected => expected === 0, `Should be called never`);\n    private static _atMostOnce: Times =  new Times(expected => expected  expected >= 1, `Should be called at least once`);\n\n    constructor(private evaluator: (callCount: number)=>boolean,\n                public message: string) {\n\n    }\n\n    public static AtLeast(callCount: number): Times {\n        return new Times(expected => expected >= callCount, `Should be called at least ${callCount} time(s)`);\n    }\n\n    public static AtLeastOnce(): Times {\n        return Times._atLeastOnce;\n    }\n\n    public static AtMost(callCount: number): Times {\n        return new Times(expected => expected  expected > callCountFrom && expected  expected >= callCountFrom && expected  expected === callCount, `Should be called exactly ${callCount} time(s)`);\n    }\n\n    public static Never(): Times {\n        return Times._never;\n    }\n\n    public static Once(): Times {\n        return Times._once;\n    }\n\n    public test(callCount: number): boolean {\n        return this.evaluator(callCount);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackedExpressionsFormatter.html":{"url":"classes/TrackedExpressionsFormatter.html","title":"class - TrackedExpressionsFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackedExpressionsFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/tracked-expressions-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/tracked-expressions-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(trackedExpressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/tracked-expressions-formatter.ts:15\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\nimport {Expressions} from '../expressions';\n\nexport function trackedExpressionsFormatterFactory (): TrackedExpressionsFormatter {\n    return new TrackedExpressionsFormatter(expressionFormatterFactory());\n}\n\nexport class TrackedExpressionsFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expressions[]): string {\n        let result: string = '';\n        for (const expression of trackedExpressions) {\n            result += `${this.expressionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tracker.html":{"url":"classes/Tracker.html","title":"class - Tracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tracker\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/tracker.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sequenceId: SequenceId)\n                    \n                \n                        \n                            \n                                Defined in lib/tracker.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequenceId\n                                                  \n                                                        \n                                                                    SequenceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            log\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        log:     TrackedAction[]\n\n                    \n                \n                    \n                        \n                            Type :     TrackedAction[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/tracker.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:13\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                        \n                                                                    MethodExpression | GetPropertyExpression | SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                Returns :     TrackedAction[]\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetPropertyExpression, MethodExpression, SetPropertyExpression } from \"./expressions\";\nimport { SequenceId, sequenceIdFactory } from \"./sequence-id\";\n\nexport type TrackedAction = { id: number, expression: MethodExpression | GetPropertyExpression | SetPropertyExpression };\n\nexport class Tracker {\n    private log: TrackedAction[] = [];\n\n    constructor(private sequenceId: SequenceId) {\n\n    }\n\n    public add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression): void {\n        const record = {id: this.sequenceId.next(), expression: action};\n        this.log.push(record);\n    }\n\n    public get(): TrackedAction[] {\n        return this.log;\n    }\n}\n\nexport function trackerFactory(): Tracker {\n    return new Tracker(sequenceIdFactory());\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Verifier.html":{"url":"classes/Verifier.html","title":"class - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Verifier\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: ExpectedExpressionReflector, callCounter: CallCounter, verifyFormatter: VerifyFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    ExpectedExpressionReflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        callCounter\n                                                  \n                                                        \n                                                                    CallCounter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        verifyFormatter\n                                                  \n                                                        \n                                                                    VerifyFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/verifier.ts:26\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyError.html":{"url":"classes/VerifyError.html","title":"class - VerifyError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyFormatter.html":{"url":"classes/VerifyFormatter.html","title":"class - VerifyFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyFormatter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/verify-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expectedExpressionFormatter: ExpectedExpressionFormatter, trackedExpressionsFormatter: TrackedExpressionsFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/verify-formatter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expectedExpressionFormatter\n                                                  \n                                                        \n                                                                    ExpectedExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        trackedExpressionsFormatter\n                                                  \n                                                        \n                                                                    TrackedExpressionsFormatter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/verify-formatter.ts:18\n                            \n                        \n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {Expressions} from '../expressions';\nimport {ExpectedExpressionFormatter, expectedExpressionFormatterFactory} from './expected-expression-formatter';\nimport {TrackedExpressionsFormatter, trackedExpressionsFormatterFactory} from './tracked-expressions-formatter';\n\nexport function verifyFormatterFactory(): VerifyFormatter {\n    return new VerifyFormatter(expectedExpressionFormatterFactory(), trackedExpressionsFormatterFactory());\n}\n\nexport class VerifyFormatter {\n\n    constructor(\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string): string {\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\n        const delimiter = '-------------------------------------';\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`\n    }\n}\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nv2.1.0\n\nMock behaviours (strict and loose) have been introduced.\n\nv2.3.0\n\nMock prototype has been introduced. Now it is possible to set/read prototype of mock with prototypeof function.\nAlso mock object supports Object.getPrototypeOf and Object.setPrototypeOf functions. You may need it to make work \ninstanceof operator.\n\nv2.3.1\n\nThe NPM package is compiled as es5 code.\nv2.4.0\n\nIt.IsAny predicate has been introduced.\nv2.5.0\n\nIn case of false assertion the dump of the tracked expressions is printed.\nv2.5.1\n\nThe latest setup has precedence\nv2.6.0\n\nThe play setup has been introduced\n\nv2.6.1\n\nThe verify methods can be used in fluent call\n\nv2.6.2\n\nDump function that dumps into console.log all interactions with the mocked object has been added\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/call-counter.ts\n            \n            \n                class\n            \n            \n                CallCounter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/call-counter.ts\n            \n            \n                function\n            \n            \n                callCounterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/defined-setups.ts\n            \n            \n                class\n            \n            \n                DefinedSetups\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                lib/dump.ts\n            \n            \n                function\n            \n            \n                dump\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                class\n            \n            \n                ExpectedExpressionReflector\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                interface\n            \n            \n                IExpectedExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                variable\n            \n            \n                Proxy\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedGetPropertyExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedMethodExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedNamedMethodExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedSetPropertyExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expression-predicates.ts\n            \n            \n                class\n            \n            \n                It\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                lib/expected-expressions/expression-predicates.ts\n            \n            \n                interface\n            \n            \n                IPredicate\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/arguments-matcher.ts\n            \n            \n                class\n            \n            \n                ArgumentsMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/constant-matcher.ts\n            \n            \n                class\n            \n            \n                ConstantMatcher\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/expression-matcher.ts\n            \n            \n                class\n            \n            \n                ExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                argumentsMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                expressionMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                methodMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                namedMethodMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/factories.ts\n            \n            \n                function\n            \n            \n                setPropertyMatcherFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/expression-matchers/get.property-matcher.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpressionMatcher\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/expression-matchers/method-matcher.ts\n            \n            \n                class\n            \n            \n                MethodExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/named.method-matcher.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expression-matchers/set.property-matcher.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                MethodExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpression\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpression\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/format-string.ts\n            \n            \n                function\n            \n            \n                format\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/constant-formatter.ts\n            \n            \n                class\n            \n            \n                ConstantFormatter\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/formatters/expected-expression-formatter.ts\n            \n            \n                class\n            \n            \n                ExpectedExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/expected-expression-formatter.ts\n            \n            \n                function\n            \n            \n                expectedExpressionFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/expression-formatter.ts\n            \n            \n                class\n            \n            \n                ExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                expressionFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                methodFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                namedMethodFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/factories.ts\n            \n            \n                function\n            \n            \n                setPropertyFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/get.property-formatter.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpressionFormatter\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/formatters/method-formatter.ts\n            \n            \n                class\n            \n            \n                MethodExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/named.method-formatter.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/set.property-formatter.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/tracked-expressions-formatter.ts\n            \n            \n                class\n            \n            \n                TrackedExpressionsFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/tracked-expressions-formatter.ts\n            \n            \n                function\n            \n            \n                trackedExpressionsFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/formatters/verify-formatter.ts\n            \n            \n                class\n            \n            \n                VerifyFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/formatters/verify-formatter.ts\n            \n            \n                function\n            \n            \n                verifyFormatterFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacksLooseStrategy\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacksStrictStrategy\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacks\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                interface\n            \n            \n                IInterceptorCallbacks\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                interface\n            \n            \n                IInterceptorCallbacksStrategy\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                function\n            \n            \n                interceptorCallbacksFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/interceptor.ts\n            \n            \n                class\n            \n            \n                Interceptor\n            \n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                lib/interceptor.ts\n            \n            \n                variable\n            \n            \n                Proxy\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/mock.ts\n            \n            \n                class\n            \n            \n                Mock\n            \n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                lib/mock.ts\n            \n            \n                class\n            \n            \n                MockCore\n            \n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                lib/play-times.ts\n            \n            \n                class\n            \n            \n                PlayTimes\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                class\n            \n            \n                SequenceId\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                function\n            \n            \n                sequenceIdFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/sequence-id.ts\n            \n            \n                variable\n            \n            \n                instance\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/setup.ts\n            \n            \n                class\n            \n            \n                Setup\n            \n            \n                10 %\n                (1/10)\n            \n        \n        \n            \n                \n                lib/times.ts\n            \n            \n                class\n            \n            \n                Times\n            \n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                lib/tracker.ts\n            \n            \n                class\n            \n            \n                Tracker\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                lib/tracker.ts\n            \n            \n                function\n            \n            \n                trackerFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                class\n            \n            \n                Verifier\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                class\n            \n            \n                VerifyError\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                lib/verifier.ts\n            \n            \n                function\n            \n            \n                verifierFactory\n            \n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockBehavior   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            Range   (lib/.../times.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n        \n            \n                \n                    \n                        \n                        MockBehavior\n                    \n                \n                        \n                            \n                                 Strict\n                            \n                        \n                        \n                            \n                                 Loose\n                            \n                        \n            \n        \n\n    lib/times.ts\n    \n        \n            \n                \n                    \n                        \n                        Range\n                    \n                \n                        \n                            \n                                 Exclusive\n                            \n                        \n                        \n                            \n                                 Inclusive\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            argumentsMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            callCounterFactory   (lib/.../call-counter.ts)\n                        \n                        \n                            dump   (lib/.../dump.ts)\n                        \n                        \n                            expectedExpressionFormatterFactory   (lib/.../expected-expression-formatter.ts)\n                        \n                        \n                            expressionFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            expressionMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            format   (lib/.../format-string.ts)\n                        \n                        \n                            interceptorCallbacksFactory   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            methodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            methodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            sequenceIdFactory   (lib/.../sequence-id.ts)\n                        \n                        \n                            setPropertyFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            setPropertyMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            trackedExpressionsFormatterFactory   (lib/.../tracked-expressions-formatter.ts)\n                        \n                        \n                            trackerFactory   (lib/.../tracker.ts)\n                        \n                        \n                            verifierFactory   (lib/.../verifier.ts)\n                        \n                        \n                            verifyFormatterFactory   (lib/.../verify-formatter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expression-matchers/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            argumentsMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nargumentsMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expressionMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyMatcherFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/call-counter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            callCounterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ncallCounterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/dump.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dump\n                            \n                            \n                        \n                    \n                \n                \n                    \ndump(mock: undefined)\n                    \n                \n\n\n\n\n                \n                    \n                            *\nThis function dumps into console.log all interactions with the mocked object\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mock\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/formatters/expected-expression-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expectedExpressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpectedExpressionFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/format-string.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \nformat(template: undefined, ...args: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        template\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            interceptorCallbacksFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ninterceptorCallbacksFactory(definedSetups: undefined, tracker: undefined)\n                    \n                \n\n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        tracker\n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/sequence-id.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sequenceIdFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsequenceIdFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/tracked-expressions-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackedExpressionsFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackedExpressionsFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/tracker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackerFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackerFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/verifier.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifierFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifierFactory()\n                    \n                \n\n\n\n\n            \n        \n\n    lib/formatters/verify-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifyFormatterFactory()\n                    \n                \n\n\n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nmoq.ts\nMoq for Typescript. Inspired by c# Moq library.\nDocumentation https://dvabuzyarov.github.io/moq.ts/\nImportant\nThis implementation depends on Proxy object.\nSo if your production code is not compatible with this I would recommend you separate you production code and testing code into dedicated projects.\nIf you need help with this then ask me.\nInstall\nnpm install moq.ts --save-dev\nQuick start\nmoq.ts as the original Moq library is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).\nYou can find a pretty full set of usages in the integration tests. Check out tests.integration folder.\nMocking property of objects\n-\nmock-get.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedGetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property1: number;\n    property2: number;\n    property3: number;\n    property4: number;\n    method(): void;\n}\n\nconst property4Name = 'property4';\nconst mockName = 'mock name is optional';\nconst mock = new Mock(mockName)\n    .setup(instance => instance.property1)\n    .returns(1)\n\n    .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property2'))\n    .returns(100)\n\n    //let's deny any write operation on the property for all values\n    .setup(instance => {instance.property2 = It.Is(() => true)})\n    .returns(false)\n\n    .setup(instance => instance.property3)\n    .callback(()=> 10 + 10)\n\n    .setup(instance => instance[property4Name])\n    .throws(new Error('property4 access'))\n\n    //since a method is a property that holds a pointer to a function\n    .setup(instance => instance.method)\n    .returns(()=>{console.log('The method was called')});\n\nconst object = mock.object();\nobject.method();\n\nmock.verify(instance=> instance.property1, Times.Never());Mocking property setting\n-\nThe documentation on returned value from 'set hook' on Proxy object\nmock-set.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedSetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property: number|any;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => {instance.property = 1})\n    //true - allows the write operation\n    .returns(true)\n\n    .setup(instance => It.Is((expression: ExpectedSetPropertyExpression) => expression.name === 'property' && expression.value === 2))\n    //false - denies the write operation\n    .returns(false)\n\n    .setup(instance => {instance.property = It.Is(value => value === 3)})\n    // allows the write operation\n    .callback(()=> true)\n\n    .setup(instance => {instance.property = value})\n    .throws(new Error('an object has been written into property'));\n\n\nconst object = mock.object();\nobject.property = 1;\n\nmock.verify(instance=> {instance.property = 1}, Times.Once());Mocking functions\n-\nmock-method.property.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestFunction {\n    (arg: number|any): string;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => instance(1))\n    .returns('called with 1')\n\n    .setup(instance => instance(2))\n    .callback((argument)=> argument === 2 ? 'called with 2' : `called with ${argument}`)\n\n    .setup(instance => instance(value))\n    .throws(new Error('Argument is object with date'))\n\n    .setup(instance => instance(It.Is(value => value === 4)))\n    .returns('called with 4');\n\nconst method = mock.object();\nconst actual = method(1);\n\nmock.verify(instance => instance(1), Times.Once());\nmock.verify(instance => instance(It.Is(value=> value === 1)), Times.Exactly(1));\n\n Mocking functions of objects\n -\nmock-named.method.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestObject {\n    method(arg1: number, arg2: string): Date;\n}\n\nconst values = ['a', 'b', 'c'];\n\nconst mock = new Mock()\n    .setup(instance => instance.method(1, values[0]))\n    .returns(new Date(2016))\n\n    .setup(instance => instance.method(It.Is(value => value === 2), values[1]))\n    .callback((arg1, arg2)=> new Date(2017 + arg1))\n\n    .setup(instance => instance.method(3, It.Is(value => value === values[2])))\n    .throws(new Error('Invoking method with 3 and c'));\n\nconst object = mock.object();\nconst actual = object.method(1, 'a');\n\nmock.verify(instance => instance.method(2, 'a'), Times.Never());Mock behavior\nYou can control mock behavior when accessing to a property without a corresponding setup. \n    mock = new Mock()\n    .setBehaviorStrategy(MockBehavior.Loose)\n    //or\n    .setBehaviorStrategy(MockBehavior.Strict);The default behavior is strict.\nMockBehavior.Strict\nAccessing to an unset property will return undefined value;\nAccessing to an unset method of an object will throw TypeError exception; It does not matter if a method is a part of mocked type.\nIf you want to track a method you can define a default setup:\nconst mock = new Mock()\n    .setup(instance => instance.method(It.Is(()=>true), It.Is(()=>true)))\n    .returns(undefined);MockBehavior.Loose\nAccessing to an unset property or a method will return a pointer to a spy function;\nYou can call this function and it will be tracked.\nMock prototype\nIf you need to make work instanceof operator or you need to deal with prototype of the mock object you can \nuse prototypeof function of Mock class. Or you can use Object.getPrototypeOf or Object.setPrototypeOf functions\non mock object.\nclass TestObject implements ITestObject {\n\n}\n\nconst mock = new Mock()\n                .prototypeof(TestObject)\n                .object();\n\nmock.object() instanceof TestObject;// trueSponsored by 2BIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    41 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpectedExpressions   (lib/.../expected-expressions.ts)\n                        \n                        \n                            Expressions   (lib/.../expressions.ts)\n                        \n                        \n                            TrackedAction   (lib/.../tracker.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expected-expressions/expected-expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        ExpectedExpressions\n                    \n                \n                \n                    \n                        ExpectedExpressions:     ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It\n\n                    \n                \n            \n        \n\n    lib/expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        Expressions\n                    \n                \n                \n                    \n                        Expressions:     MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression\n\n                    \n                \n            \n        \n\n    lib/tracker.ts\n    \n        \n            \n                \n                    \n                        \n                        TrackedAction\n                    \n                \n                \n                    \n                        TrackedAction:     literal type\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            instance   (lib/.../sequence-id.ts)\n                        \n                        \n                            Proxy   (lib/.../interceptor.ts)\n                        \n                        \n                            Proxy   (lib/.../expected-expression-reflector.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/sequence-id.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            instance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        instance:     \n\n                    \n                \n                    \n                        \n                            Default value : new SequenceId()\n                        \n                    \n\n\n            \n        \n\n    lib/interceptor.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    lib/expected-expressions/expected-expression-reflector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
