var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.1.5","fields":["title","body"],"fieldVectors":[["title/index.html",[0,2.454,1,2.168,2,0.201]],["body/index.html",[1,1.034,3,4.58,4,2.566,5,1.377,6,1.377,7,3.019,8,2.325,9,2.325,10,1.377,11,0.379,12,1.323,13,1.377,14,1.574,15,3.777,16,2.325,17,2.566,18,1.377,19,1.377,20,1.377,21,1.746,22,1.377,23,1.377,24,2.566,25,1.377,26,1.377,27,2.325,28,1.17,29,1.377,30,1.377,31,1.377,32,1.377,33,1.377,34,1.377,35,3.019,36,1.377,37,0.107,38,1.377,39,0.656,40,1.377,41,2.325,42,1.17,43,0.851,44,1.377,45,1.377,46,1.377,47,1.377,48,1.377,49,1.931,50,1.377,51,1.377,52,2.267,53,1.377,54,1.377,55,1.377,56,1.377,57,1.377,58,1.377,59,4.413,60,2.079,61,1.377,62,2.402,63,0.933,64,1.336,65,3.548,66,0.023,67,1.377,68,2.684,69,2.325,70,1.377,71,2.325,72,0.78,73,0.63,74,0.991,75,1.377,76,0.851,77,0.119,78,0.119,79,1.624,80,1.377,81,6.003,82,2.325,83,1.377,84,2.325,85,1.746,86,1.377,87,1.377,88,2.325,89,3.548,90,3.37,91,2.191,92,1.377,93,1.377,94,1.137,95,2.325,96,1.377,97,1.574,98,2.325,99,1.377,100,3.548,101,1.377,102,3.965,103,1.377,104,2.325,105,1.377,106,1.377,107,2.402,108,3.965,109,1.377,110,3.965,111,2.325,112,0.345,113,1.377,114,1.377,115,0.933,116,2.325,117,2.325,118,3.548,119,3.548,120,2.977,121,2.325,122,1.377,123,1.377,124,3.548,125,0.487,126,2.325,127,2.325,128,1.377,129,1.377,130,1.377,131,1.377,132,1.377,133,1.377,134,0.725,135,2.325,136,2.325,137,1.377,138,1.377,139,1.225,140,1.377,141,1.377,142,2.325,143,1.976,144,2.325,145,1.377,146,1.17,147,1.377,148,1.377,149,1.377,150,2.325,151,1.377,152,1.377,153,1.377,154,1.377,155,1.377,156,1.377,157,1.377,158,1.377,159,1.377,160,1.377,161,1.377,162,1.377,163,1.377,164,1.377,165,1.377,166,2.267,167,1.377,168,1.377,169,1.377,170,1.225,171,1.377,172,1.377,173,1.976,174,0.851,175,1.034,176,3.019,177,0.552,178,1.034,179,1.377,180,1.377,181,1.377,182,1.377,183,1.377,184,1.746,185,0.108,186,1.377,187,1.377,188,1.377,189,1.377,190,1.323,191,1.17,192,1.17,193,0.774,194,1.377,195,1.17,196,0.22,197,1.17,198,1.17,199,2.325,200,1.377,201,1.377,202,1.377,203,0.008,204,0.008]],["title/overview.html",[205,4.023]],["body/overview.html",[64,2.032,66,0.021,143,4.586,196,0.51,203,0.021,204,0.021,205,4.586,206,5.396]],["title/changelog.html",[0,2.454,1,2.168,207,2.888]],["body/changelog.html",[15,2.909,17,3.652,24,3.652,28,3.652,42,3.652,49,2.19,59,4.274,66,0.018,90,3.652,125,1.521,170,2.264,174,2.656,184,3.227,190,3.106,191,3.652,192,3.652,193,1.431,195,3.652,197,3.652,198,3.652,203,0.018,204,0.018,208,4.298,209,4.298,210,2.909,211,6,212,4.298,213,4.298,214,4.298,215,4.298,216,4.298,217,4.298,218,4.298,219,4.298,220,4.298,221,4.298,222,1.123,223,4.298,224,4.298,225,4.298,226,4.298,227,0.3,228,4.298,229,4.298,230,4.298,231,4.298]],["title/modules.html",[232,4.023]],["body/modules.html",[66,0.021,203,0.021,204,0.021,232,4.692]],["title/classes/ArgumentsMatcher.html",[196,0.327,233,2.344]],["body/classes/ArgumentsMatcher.html",[2,0.33,11,0.453,37,0.217,66,0.023,72,0.738,74,0.579,77,0.411,78,0.411,94,2.033,112,0.663,125,1.677,185,0.37,196,0.448,203,0.016,204,0.021,222,0.906,233,3.208,234,0.186,235,0.186,236,0.186,237,2.844,238,5.398,239,1.826,240,0.468,241,0.662,242,2.946,243,4.246,244,3.466,245,0.497,246,2.496,247,3.057,248,3.466,249,2.496,250,1.677,251,0.963,252,1.39,253,1.972,254,1.972,255,0.186,256,1.023,257,2.603,258,3.466,259,3.466,260,3.466,261,4.738,262,3.466,263,3.466]],["title/classes/CallCounter.html",[196,0.327,264,2.344]],["body/classes/CallCounter.html",[2,0.238,11,0.552,37,0.215,49,1.37,66,0.023,68,3.176,72,0.73,74,0.571,77,0.407,78,0.407,79,1.071,94,1.287,112,0.613,120,2.565,185,0.366,196,0.444,203,0.015,204,0.015,227,0.478,234,0.183,235,0.183,236,0.183,240,0.465,241,0.653,245,0.492,251,1.488,254,1.944,255,0.251,256,1.008,264,3.627,265,5.357,266,3.416,267,6.044,268,3.416,269,4.689,270,3.416,271,4.691,272,2.172,273,3.416,274,0.84,275,2.903,276,2.903,277,2.903,278,3.416,279,3.416,280,2.565,281,3.416]],["title/classes/ConstantFormatter.html",[196,0.327,282,1.97]],["body/classes/ConstantFormatter.html",[2,0.353,11,0.366,15,4.526,37,0.176,39,1.312,66,0.023,72,0.789,74,0.846,77,0.332,78,0.332,112,0.719,185,0.299,193,1.89,196,0.479,203,0.017,204,0.017,222,1.001,234,0.205,235,0.205,236,0.205,240,0.493,245,0.402,251,1.063,252,1.536,255,0.205,257,2.876,282,2.882,283,5.066,284,1.751,285,2.317,286,5.066,287,3.255,288,3.83,289,3.83,290,3.83,291,3.83,292,5.066,293,3.83,294,3.83]],["title/classes/ConstantMatcher.html",[196,0.327,243,2.344]],["body/classes/ConstantMatcher.html",[2,0.289,11,0.397,37,0.19,66,0.023,72,0.831,77,0.36,78,0.36,112,0.675,185,0.324,193,1.381,196,0.505,203,0.018,204,0.02,222,1.084,234,0.222,235,0.222,236,0.222,237,2.811,239,2.185,240,0.512,243,3.613,245,0.435,246,2.811,247,3.476,249,2.811,250,1.889,251,1.152,252,1.664,255,0.222,257,3.114,295,5.337,296,4.147,297,2.563]],["title/classes/ExpectedExpressionFormatter.html",[196,0.327,298,2.6]],["body/classes/ExpectedExpressionFormatter.html",[2,0.225,11,0.498,37,0.207,39,1.395,49,1.296,66,0.023,68,3.521,72,0.703,74,0.754,76,3.661,77,0.392,78,0.392,79,1.012,107,2.187,112,0.595,177,1.296,185,0.353,196,0.427,203,0.015,204,0.015,227,0.413,234,0.173,235,0.173,236,0.173,240,0.451,241,0.617,245,0.473,251,1.253,255,0.242,256,0.953,272,2.12,274,0.794,284,1.477,285,2.064,298,3.905,299,5.201,300,2.745,301,4.154,302,2.745,303,3.835,304,4.42,305,4.784,306,2.745,307,2.187,308,1.477,309,2.745,310,2.745,311,2.745,312,3.231,313,3.231,314,3.231,315,3.231,316,3.231,317,3.231,318,3.231]],["title/classes/ExpectedExpressionReflector.html",[196,0.327,319,1.97]],["body/classes/ExpectedExpressionReflector.html",[2,0.192,11,0.385,14,1.864,37,0.126,52,2.067,60,1.615,63,1.104,64,1.037,66,0.024,72,0.627,73,1.259,74,0.795,77,0.413,78,0.413,79,1.745,91,1.615,94,1.037,112,0.665,115,1.104,134,2.507,177,1.104,185,0.372,193,0.917,196,0.381,203,0.013,204,0.013,222,1.368,227,0.419,234,0.148,235,0.148,236,0.148,240,0.413,245,0.289,251,0.764,255,0.216,272,1.792,274,1.287,319,2.29,320,2.24,321,2.067,322,2.059,323,4.448,324,4.448,325,4.025,326,2.753,327,3.421,328,2.978,329,2.753,330,2.753,331,1.178,332,1.178,333,1.864,334,1.701,335,2.34,336,2.34,337,2.34,338,4.043,339,4.943,340,2.34,341,2.34,342,2.34,343,2.34,344,2.34,345,2.34,346,2.34,347,2.34,348,2.34]],["title/classes/ExpectedGetPropertyExpression.html",[63,1.389,196,0.327]],["body/classes/ExpectedGetPropertyExpression.html",[11,0.509,37,0.189,63,2.362,66,0.023,115,2.135,196,0.609,203,0.017,204,0.017,222,1.079,227,0.371,234,0.221,235,0.221,236,0.221,255,0.345,272,1.555,274,1.015,320,1.767,331,2.277,332,2.277,349,2.552,350,2.944,351,1.737,352,1.478,353,1.478,354,1.478]],["title/classes/ExpectedMethodExpression.html",[196,0.327,332,1.482]],["body/classes/ExpectedMethodExpression.html",[11,0.509,37,0.189,63,2.135,66,0.023,115,2.135,196,0.609,203,0.017,204,0.017,222,1.079,227,0.371,234,0.221,235,0.221,236,0.221,255,0.345,272,1.555,274,1.015,320,1.767,331,2.277,332,2.52,349,2.552,350,2.944,351,1.57,352,1.478,353,1.635,354,1.478]],["title/classes/ExpectedNamedMethodExpression.html",[196,0.327,331,1.482]],["body/classes/ExpectedNamedMethodExpression.html",[11,0.509,37,0.189,63,2.135,66,0.023,115,2.135,196,0.609,203,0.017,204,0.017,222,1.079,227,0.371,234,0.221,235,0.221,236,0.221,255,0.345,272,1.555,274,1.015,320,1.767,331,2.52,332,2.277,349,2.552,350,2.944,351,1.57,352,1.478,353,1.478,354,1.635]],["title/classes/ExpectedSetPropertyExpression.html",[115,1.389,196,0.327]],["body/classes/ExpectedSetPropertyExpression.html",[11,0.509,37,0.189,63,2.135,66,0.023,115,2.362,196,0.609,203,0.017,204,0.017,222,1.079,227,0.371,234,0.221,235,0.221,236,0.221,255,0.345,272,1.555,274,1.015,320,1.767,331,2.277,332,2.277,349,2.552,350,2.944,351,1.57,352,1.635,353,1.478,354,1.478]],["title/classes/ExpressionFormatter.html",[196,0.327,301,2.344]],["body/classes/ExpressionFormatter.html",[2,0.208,11,0.589,37,0.196,39,0.927,66,0.022,72,0.776,77,0.37,78,0.37,112,0.704,177,1.198,185,0.334,193,1.915,196,0.404,203,0.014,204,0.014,222,0.781,227,0.453,234,0.16,235,0.16,236,0.16,240,0.432,241,0.571,245,0.448,251,0.829,252,1.198,253,1.699,255,0.16,256,0.881,282,3.503,284,1.366,285,1.952,301,2.89,308,2.63,322,1.925,351,1.259,352,1.186,353,1.186,354,1.186,355,4.983,356,2.987,357,4.082,358,4.983,359,4.082,360,4.983,361,4.082,362,4.983,363,4.082,364,2.987,365,4.269,366,2.638,367,2.987,368,2.538,369,2.538,370,2.538,371,2.987,372,2.987,373,2.987,374,2.987,375,2.987,376,2.987]],["title/classes/ExpressionMatcher.html",[196,0.327,269,2.6]],["body/classes/ExpressionMatcher.html",[2,0.182,11,0.566,37,0.178,63,1.555,66,0.023,72,0.719,77,0.336,78,0.336,94,1.46,112,0.694,115,1.555,125,0.926,177,1.05,185,0.303,193,2.157,196,0.367,203,0.013,204,0.017,222,0.684,227,0.398,234,0.14,235,0.14,236,0.14,237,2.433,239,1.378,240,0.401,241,0.5,245,0.407,246,2.043,247,3.553,249,3.009,250,1.372,251,1.077,252,1.05,254,2.906,255,0.14,256,0.772,269,2.911,272,1.924,274,0.643,275,3.925,322,1.635,331,1.659,332,1.659,351,1.144,352,1.077,353,1.077,354,1.077,368,2.224,369,2.224,370,2.224,377,2.617,378,4.289,379,4.439,380,4.439,381,4.439,382,2.617,383,2.617,384,2.617,385,2.617,386,2.617,387,2.617]],["title/classes/GetPropertyExpression.html",[196,0.327,351,1.021]],["body/classes/GetPropertyExpression.html",[2,0.25,37,0.252,39,1.406,60,1.944,66,0.024,77,0.572,78,0.311,91,1.438,134,2.893,139,2.553,185,0.379,196,0.581,203,0.016,204,0.016,227,0.25,234,0.192,235,0.192,236,0.192,240,0.533,241,0.685,245,0.376,255,0.329,351,1.62,352,1.346,353,1.346,354,1.346,388,2.215,389,2.426,390,3.584,391,3.584,392,3.124,393,3.281,394,2.426]],["title/classes/GetPropertyExpressionFormatter.html",[196,0.327,357,2.6]],["body/classes/GetPropertyExpressionFormatter.html",[2,0.308,11,0.423,37,0.203,39,1.206,66,0.022,72,0.865,77,0.383,78,0.383,85,3.317,112,0.635,185,0.345,196,0.525,203,0.018,204,0.018,227,0.387,234,0.237,235,0.237,236,0.237,240,0.527,245,0.463,255,0.237,284,2.02,285,2.54,287,3.754,351,1.881,357,4.171,366,3.433,395,5.555,396,4.417]],["title/classes/GetPropertyExpressionMatcher.html",[196,0.327,378,2.6]],["body/classes/GetPropertyExpressionMatcher.html",[2,0.267,11,0.543,37,0.176,63,2.424,66,0.022,72,0.789,74,0.64,77,0.332,78,0.332,94,1.442,112,0.691,125,1.356,185,0.299,193,1.275,196,0.479,203,0.017,204,0.02,222,1.001,227,0.353,234,0.205,235,0.205,236,0.205,237,2.669,239,2.018,240,0.493,245,0.402,246,2.669,247,3.401,249,2.018,250,1.793,251,1.407,252,1.536,255,0.205,274,0.942,297,2.367,351,1.782,378,3.804,397,5.066,398,3.83,399,3.83,400,2.593,401,2.876,402,2.876]],["title/classes/InterceptorCallbacksLooseStrategy.html",[196,0.327,403,2.344]],["body/classes/InterceptorCallbacksLooseStrategy.html",[2,0.197,11,0.507,12,2.334,37,0.222,39,1.049,66,0.023,72,0.639,74,0.807,77,0.419,78,0.419,79,0.886,94,1.065,97,1.914,112,0.71,125,1.001,170,2.965,177,1.938,185,0.414,190,2.748,193,1.608,196,0.388,203,0.013,204,0.013,227,0.441,234,0.152,235,0.152,236,0.152,240,0.509,241,0.54,245,0.507,250,1.453,255,0.152,256,0.834,322,1.001,351,1.21,352,1.139,353,1.139,354,1.139,403,2.778,404,3.275,405,3.015,406,2.827,407,2.985,408,3.081,409,3.081,410,2.402,411,3.628,412,3.269,413,2.827,414,2.778,415,2.827,416,2.123,417,2.778,418,2.827,419,1.747,420,2.402,421,2.402,422,3.487,423,2.402,424,2.402,425,2.827,426,2.827]],["title/classes/InterceptorCallbacksStrictStrategy.html",[196,0.327,427,2.344]],["body/classes/InterceptorCallbacksStrictStrategy.html",[2,0.197,11,0.507,12,2.334,37,0.222,39,1.049,49,1.134,66,0.023,72,0.639,74,0.685,77,0.419,78,0.419,94,1.819,97,1.914,112,0.735,125,1.001,170,2.545,177,1.646,185,0.414,190,3.015,193,1.765,196,0.388,203,0.013,204,0.013,227,0.441,234,0.152,235,0.152,236,0.152,240,0.509,241,0.54,245,0.507,250,1.453,255,0.152,256,0.834,322,1.001,352,1.139,353,1.139,354,1.139,404,3.275,405,3.015,407,2.985,408,3.98,409,3.081,410,2.402,411,3.628,412,3.269,414,2.778,416,2.123,417,2.778,419,1.747,420,2.402,421,2.402,422,3.487,423,2.402,424,2.402,427,2.778,428,2.827,429,2.827,430,2.827,431,2.827,432,2.827,433,2.827,434,2.827]],["title/classes/It.html",[196,0.409]],["body/classes/It.html",[2,0.204,21,3.163,37,0.247,60,1.69,64,1.104,66,0.024,72,0.656,74,0.49,77,0.428,78,0.428,79,1.32,94,1.587,112,0.7,125,1.038,177,1.176,185,0.446,196,0.398,203,0.019,204,0.014,222,1.554,234,0.157,235,0.157,236,0.157,240,0.531,241,0.56,245,0.517,250,1.745,252,2.384,255,0.226,320,2.543,333,2.852,334,3.331,392,1.668,435,2.491,436,5.052,437,4.581,438,2.931,439,4.792,440,2.931,441,3.58,442,2.931,443,2.931,444,3.58,445,2.931,446,2.931,447,2.491,448,2.491,449,2.491,450,2.491,451,2.491]],["title/classes/MethodExpression.html",[196,0.327,353,0.962]],["body/classes/MethodExpression.html",[2,0.254,37,0.254,39,1.202,60,1.964,66,0.024,77,0.514,78,0.316,91,1.46,134,3.118,139,3.254,185,0.383,196,0.584,203,0.016,204,0.016,227,0.254,234,0.195,235,0.195,236,0.195,240,0.536,241,0.695,245,0.382,255,0.331,351,1.444,352,1.36,353,1.537,354,1.36,388,2.249,392,3.148,393,3.315,394,3.315,452,4.897]],["title/classes/MethodExpressionFormatter.html",[196,0.327,361,2.6]],["body/classes/MethodExpressionFormatter.html",[2,0.277,11,0.497,37,0.238,39,1.127,66,0.022,72,0.808,74,0.664,77,0.45,78,0.45,91,2.082,112,0.594,185,0.406,196,0.491,203,0.017,204,0.017,227,0.362,234,0.213,235,0.213,236,0.213,240,0.502,241,0.759,245,0.544,253,2.261,255,0.213,256,1.172,282,3.711,284,1.817,285,2.374,308,1.817,353,1.702,361,3.898,366,3.208,453,5.781,454,2.984,455,2.984,456,2.69,457,3.974]],["title/classes/MethodExpressionMatcher.html",[196,0.327,380,2.6]],["body/classes/MethodExpressionMatcher.html",[2,0.249,11,0.562,37,0.222,66,0.022,72,0.753,74,0.596,77,0.419,78,0.419,112,0.627,139,1.881,185,0.378,193,1.189,196,0.457,203,0.016,204,0.019,222,0.933,227,0.337,233,4.284,234,0.191,235,0.191,236,0.191,237,2.887,239,1.881,240,0.476,241,0.682,245,0.507,246,2.547,247,3.333,249,1.881,250,1.711,251,1.342,252,1.432,254,2.031,255,0.191,256,1.053,274,0.878,297,2.207,332,2.513,353,1.631,380,3.63,400,2.417,458,5.481,459,3.034,460,2.681,461,2.681,462,3.571,463,3.034,464,3.034]],["title/classes/Mock.html",[59,2.344,196,0.327]],["body/classes/Mock.html",[4,2.049,11,0.591,12,1.371,15,1.632,37,0.111,39,1.065,43,3.03,59,3.32,62,4.011,66,0.023,73,1.102,74,0.879,77,0.425,78,0.209,79,1.65,97,3.565,112,0.561,146,2.049,170,2.918,177,0.967,185,0.285,196,0.416,203,0.012,204,0.012,227,0.254,234,0.129,235,0.129,236,0.129,240,0.499,241,0.697,245,0.253,251,0.669,255,0.195,272,0.908,274,0.593,276,2.049,277,2.049,307,1.632,319,2.502,322,2.097,328,2.502,334,1.49,350,1.668,389,2.469,405,1.371,411,3.255,412,3.121,419,3.424,465,2.411,466,4.398,467,2.411,468,5.54,469,3.647,470,3.647,471,1.81,472,2.738,473,3.32,474,2.411,475,2.469,476,2.411,477,2.411,478,2.411,479,2.411,480,2.411,481,2.411,482,2.411,483,2.411,484,2.411,485,2.411,486,2.411,487,2.411,488,2.411,489,2.411,490,2.411,491,2.411,492,2.411,493,2.411,494,2.411,495,2.411,496,2.411,497,2.411,498,1.81,499,2.411,500,2.411,501,2.411]],["title/classes/NamedMethodExpression.html",[196,0.327,354,0.962]],["body/classes/NamedMethodExpression.html",[2,0.24,37,0.265,39,1.391,60,1.891,66,0.024,77,0.566,78,0.299,91,1.38,134,3.192,139,3.192,185,0.42,196,0.573,203,0.015,204,0.015,227,0.24,234,0.184,235,0.184,236,0.184,240,0.556,241,0.657,245,0.361,255,0.325,351,1.391,352,1.309,353,1.309,354,1.493,388,2.127,389,2.33,392,3.059,393,3.192,394,2.33,502,4.714,503,3.441]],["title/classes/NamedMethodExpressionFormatter.html",[196,0.327,363,2.6]],["body/classes/NamedMethodExpressionFormatter.html",[2,0.267,11,0.485,37,0.232,39,1.233,66,0.023,72,0.789,74,0.846,77,0.44,78,0.44,91,1.536,112,0.579,185,0.396,196,0.479,203,0.017,204,0.017,227,0.353,234,0.205,235,0.205,236,0.205,240,0.493,241,0.732,245,0.531,253,2.179,255,0.205,256,1.13,282,3.673,284,1.751,285,2.596,308,1.751,354,1.678,363,3.804,366,3.131,454,2.876,455,2.876,456,2.593,504,5.678,505,3.83,506,3.83,507,3.83,508,3.83]],["title/classes/NamedMethodExpressionMatcher.html",[196,0.327,381,2.6]],["body/classes/NamedMethodExpressionMatcher.html",[2,0.244,11,0.558,37,0.219,66,0.022,72,0.743,74,0.585,77,0.414,78,0.414,112,0.667,125,1.241,139,1.846,185,0.373,193,1.167,196,0.451,203,0.016,204,0.019,222,0.916,227,0.333,233,4.26,234,0.188,235,0.188,236,0.188,237,2.86,239,1.846,240,0.471,241,0.669,245,0.501,246,2.515,247,3.315,249,1.846,250,1.69,251,1.326,252,1.406,254,1.994,255,0.188,256,1.034,274,0.862,297,2.166,331,2.494,354,1.619,381,3.584,400,2.373,401,2.632,402,2.632,459,2.978,460,2.632,461,2.632,463,2.978,464,2.978,509,5.429,510,3.505]],["title/classes/SetPropertyExpression.html",[196,0.327,352,0.962]],["body/classes/SetPropertyExpression.html",[2,0.24,37,0.265,39,1.391,60,1.891,66,0.024,77,0.566,78,0.299,91,2.51,134,2.833,139,2.484,185,0.42,196,0.573,203,0.015,204,0.015,227,0.24,234,0.184,235,0.184,236,0.184,240,0.556,241,0.657,245,0.361,255,0.325,351,1.391,352,1.493,353,1.309,354,1.309,388,2.127,389,2.33,392,3.059,393,3.192,394,2.33,511,3.441,512,3.441,513,3.441]],["title/classes/SetPropertyExpressionFormatter.html",[196,0.327,359,2.6]],["body/classes/SetPropertyExpressionFormatter.html",[2,0.274,11,0.493,37,0.236,39,1.118,60,1.574,66,0.022,72,0.802,74,0.655,77,0.447,78,0.447,85,2.947,91,2.065,112,0.589,185,0.402,196,0.487,203,0.017,204,0.017,227,0.359,234,0.21,235,0.21,236,0.21,240,0.499,241,0.75,245,0.54,253,2.233,255,0.21,256,1.158,282,3.698,284,1.795,285,2.355,308,1.795,352,1.694,359,3.866,366,3.182,454,2.947,455,2.947,456,2.657,514,5.746,515,3.925,516,3.925]],["title/classes/SetPropertyExpressionMatcher.html",[196,0.327,379,2.6]],["body/classes/SetPropertyExpressionMatcher.html",[2,0.243,11,0.556,37,0.218,66,0.023,72,0.739,74,0.581,77,0.412,78,0.412,94,1.31,112,0.664,115,2.331,125,1.232,185,0.371,193,1.158,196,0.449,203,0.016,204,0.019,222,0.909,227,0.331,234,0.186,235,0.186,236,0.186,237,2.849,239,1.833,240,0.469,241,0.665,242,2.957,243,4.25,245,0.498,246,2.502,247,3.308,249,1.833,250,1.681,251,1.319,252,1.396,253,1.979,254,1.979,255,0.186,256,1.026,274,0.855,297,2.15,352,1.614,379,3.566,400,2.355,401,2.612,402,2.612,460,2.612,461,2.612,517,5.408,518,3.479,519,3.479,520,3.479]],["title/classes/TrackedExpressionsFormatter.html",[196,0.327,521,2.6]],["body/classes/TrackedExpressionsFormatter.html",[2,0.247,11,0.522,37,0.221,39,1.186,49,1.422,66,0.023,72,0.749,74,0.592,77,0.417,78,0.417,79,1.111,112,0.624,120,2.661,185,0.376,196,0.455,203,0.019,204,0.016,227,0.47,234,0.19,235,0.19,236,0.19,240,0.474,241,0.677,245,0.504,255,0.258,256,1.045,284,1.621,285,2.2,300,3.012,301,4.274,302,3.012,306,3.012,308,1.621,309,3.012,310,3.012,521,4.1,522,5.46,523,4.81,524,4.087,525,3.012,526,3.544,527,3.544,528,3.544,529,3.544]],["title/classes/Tracker.html",[196,0.327,412,1.824]],["body/classes/Tracker.html",[2,0.252,11,0.346,37,0.223,60,1.954,66,0.023,72,0.758,73,2.228,77,0.313,78,0.313,91,1.449,112,0.63,173,3.069,185,0.431,196,0.461,203,0.016,204,0.016,227,0.443,234,0.194,235,0.194,236,0.194,240,0.551,245,0.379,255,0.194,322,1.951,351,1.741,352,1.639,353,1.639,354,1.003,412,2.566,530,3.611,531,5.901,532,4.872,533,4.872,534,3.611,535,3.611,536,3.611,537,3.611,538,3.611,539,3.611]],["title/classes/Verifier.html",[43,2.14,196,0.327]],["body/classes/Verifier.html",[2,0.199,11,0.541,21,3.108,37,0.19,39,1.157,43,3.006,49,1.148,62,4.215,66,0.023,72,0.644,73,1.893,74,0.89,76,3.294,77,0.359,78,0.359,79,1.297,107,1.937,112,0.473,125,1.013,178,2.148,185,0.323,196,0.46,203,0.014,204,0.014,227,0.46,234,0.153,235,0.153,236,0.153,240,0.422,241,0.791,245,0.434,251,1.149,255,0.261,264,4.295,274,0.703,280,3.108,307,1.937,308,1.308,319,3.217,322,1.722,328,3.032,350,1.308,471,3.652,472,2.148,540,2.431,541,2.861,542,4.116,543,2.861,544,3.517,545,2.861,546,2.431,547,3.108,548,2.431,549,2.148,550,2.431,551,2.431,552,2.431,553,2.431,554,2.431,555,2.431,556,3.517,557,2.431,558,2.431,559,2.431,560,2.431,561,2.431]],["title/classes/VerifyError.html",[196,0.327,549,2.6]],["body/classes/VerifyError.html",[11,0.568,37,0.149,39,1.226,43,2.802,49,1.305,62,3.823,66,0.023,73,1.487,74,0.943,76,2.802,77,0.282,78,0.282,79,1.421,107,2.202,112,0.372,125,1.151,178,2.442,185,0.254,196,0.494,203,0.015,204,0.015,227,0.449,234,0.174,235,0.174,236,0.174,240,0.282,241,0.866,245,0.341,251,0.903,255,0.28,264,4.02,274,0.8,280,3.405,308,1.487,319,2.969,322,1.848,328,2.579,350,2.074,471,3.405,472,2.442,540,2.764,542,3.534,544,2.764,546,2.764,547,3.405,548,2.764,549,3.405,550,3.853,551,3.853,552,2.764,553,2.764,554,2.764,555,2.764,556,3.853,557,2.764,558,3.853,559,2.764,560,2.764,561,2.764,562,3.253]],["title/classes/VerifyFormatter.html",[196,0.327,542,2.344]],["body/classes/VerifyFormatter.html",[2,0.213,11,0.525,37,0.199,39,1.376,49,1.225,66,0.023,68,3.415,72,0.675,74,0.842,76,3.394,77,0.376,78,0.376,79,0.957,112,0.577,184,2.293,185,0.339,196,0.41,203,0.014,204,0.014,227,0.442,234,0.164,235,0.164,236,0.164,240,0.438,241,0.829,245,0.455,251,1.401,255,0.233,272,2.068,274,0.751,284,1.397,285,1.984,298,4.525,303,3.686,304,4.667,305,4.667,307,2.068,308,1.984,311,2.595,322,1.535,456,2.068,521,4.654,524,4.287,525,3.686,542,3.415,547,2.293,563,5.044,564,3.054,565,3.054,566,3.054,567,3.054,568,3.054,569,3.054,570,3.054,571,3.054,572,3.054,573,3.054]],["title/interfaces/IExpectedExpression.html",[64,1.304,328,1.97]],["body/interfaces/IExpectedExpression.html",[2,0.21,11,0.41,14,2.035,52,2.257,60,2.006,63,1.206,64,1.615,66,0.024,73,1.961,74,0.835,77,0.372,78,0.372,79,1.807,91,1.72,94,1.132,112,0.659,115,1.206,134,2.634,177,1.206,185,0.235,193,1.001,196,0.284,203,0.014,204,0.014,222,1.425,227,0.38,234,0.161,235,0.161,236,0.161,240,0.261,251,0.835,255,0.23,272,1.615,274,1.054,319,1.71,320,1.835,321,2.257,322,1.518,323,2.554,324,2.554,327,2.554,328,2.844,331,1.286,332,1.286,333,2.903,334,2.65,335,2.554,336,2.554,337,2.554,338,4.249,339,5.094,340,2.554,341,2.554,342,2.554,343,2.554,344,2.554,345,2.554,346,2.554,347,2.554,348,2.554,574,2.554,575,2.554,576,3.006]],["title/interfaces/IInterceptorCallbacks.html",[64,1.304,473,2.344]],["body/interfaces/IInterceptorCallbacks.html",[2,0.202,11,0.544,12,1.647,37,0.133,39,0.907,49,1.162,64,1.844,66,0.023,72,0.65,73,2.239,74,0.697,77,0.251,78,0.251,79,1.535,112,0.613,166,3.677,170,1.525,174,1.79,175,2.174,185,0.326,190,2.786,196,0.274,203,0.014,204,0.014,210,1.96,227,0.374,234,0.155,235,0.155,236,0.155,240,0.425,245,0.304,250,1.478,255,0.305,256,0.854,322,1.478,350,1.909,403,1.96,404,2.58,405,2.375,407,3.658,411,2.58,412,3.119,414,2.827,417,2.827,419,2.58,427,1.96,473,3.315,475,3.847,498,2.174,577,2.174,578,4.176,579,4.162,580,2.896,581,2.461,582,2.461,583,2.461,584,3.548,585,4.162,586,2.461,587,4.162,588,2.461,589,2.461,590,2.461,591,4.162,592,2.461,593,2.461,594,2.461,595,2.461,596,2.461]],["title/interfaces/IInterceptorCallbacksStrategy.html",[64,1.304,407,2.14]],["body/interfaces/IInterceptorCallbacksStrategy.html",[2,0.192,11,0.533,12,1.566,37,0.185,39,1.137,49,1.104,64,1.792,66,0.023,72,0.627,73,1.841,74,0.672,77,0.349,78,0.349,79,1.491,112,0.637,166,3.022,170,1.45,174,1.701,175,2.067,185,0.372,190,3.168,196,0.26,203,0.013,204,0.013,210,1.864,227,0.419,234,0.148,235,0.148,236,0.148,240,0.413,245,0.422,250,1.684,255,0.299,256,0.812,322,1.425,350,1.259,403,1.864,404,2.94,405,2.707,407,3.595,408,3.022,409,3.022,411,2.488,412,3.064,414,3.221,416,2.067,417,3.221,419,2.488,427,1.864,473,2.725,475,3.221,498,2.067,577,2.067,579,3.421,581,2.34,582,2.34,583,2.34,584,3.421,585,4.043,586,2.34,587,4.043,588,2.34,589,2.34,590,2.34,591,4.043,592,2.34,593,2.34,594,2.34,595,2.34,596,2.34,597,2.753,598,2.753]],["title/interfaces/IPredicate.html",[64,1.304,439,2.6]],["body/interfaces/IPredicate.html",[2,0.256,60,2.229,64,1.854,66,0.024,74,0.612,79,1.542,94,1.854,112,0.708,125,1.298,177,1.471,185,0.286,196,0.347,203,0.02,204,0.016,222,0.958,234,0.197,235,0.197,236,0.197,240,0.482,250,1.967,252,1.974,255,0.264,320,2.106,333,3.332,334,3.433,392,2.086,435,3.116,436,4.183,437,3.116,439,4.459,441,3.116,444,3.116,447,3.116,448,3.116,449,3.116,450,3.116,451,3.116,574,3.116,575,3.116,599,3.667]],["title/miscellaneous/variables.html",[600,1.643,601,3.541]],["body/miscellaneous/variables.html",[2,0.35,14,4.684,37,0.276,66,0.022,203,0.02,204,0.02,227,0.35,274,1.236,320,2.15,321,3.773,600,2.859,601,4.27,602,5.025]],["title/miscellaneous/typealiases.html",[600,1.643,603,4.167]],["body/miscellaneous/typealiases.html",[2,0.331,37,0.218,63,1.905,66,0.023,115,1.905,203,0.019,204,0.019,227,0.438,272,2.364,274,1.168,320,2.032,331,2.032,332,2.032,349,2.935,351,1.401,352,1.319,353,1.319,354,1.319,388,2.935,600,2.701,604,4.749]],["title/miscellaneous/enumerations.html",[600,1.643,605,3.541]],["body/miscellaneous/enumerations.html",[2,0.356,66,0.02,174,3.156,203,0.02,204,0.02,210,3.457,404,3.156,405,2.905,475,4.109,577,3.834,600,2.905,605,4.339,606,6.07,607,5.106,608,5.106,609,5.106]]],"invertedIndex":[["",{"_index":66,"title":{},"body":{"index.html":{},"overview.html":{},"changelog.html":{},"modules.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["0",{"_index":278,"title":{},"body":{"classes/CallCounter.html":{}}}],["1",{"_index":120,"title":{},"body":{"index.html":{},"classes/CallCounter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["10",{"_index":98,"title":{},"body":{"index.html":{}}}],["2",{"_index":124,"title":{},"body":{"index.html":{}}}],["2bit",{"_index":202,"title":{},"body":{"index.html":{}}}],["3",{"_index":127,"title":{},"body":{"index.html":{}}}],["39",{"_index":206,"title":{},"body":{"overview.html":{}}}],["4",{"_index":143,"title":{},"body":{"index.html":{},"overview.html":{}}}],["access",{"_index":102,"title":{},"body":{"index.html":{}}}],["action",{"_index":535,"title":{},"body":{"classes/Tracker.html":{}}}],["activestrategi",{"_index":590,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["actual",{"_index":144,"title":{},"body":{"index.html":{}}}],["add",{"_index":532,"title":{},"body":{"classes/Tracker.html":{}}}],["add(act",{"_index":533,"title":{},"body":{"classes/Tracker.html":{}}}],["alias",{"_index":604,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":121,"title":{},"body":{"index.html":{}}}],["any|it",{"_index":257,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{}}}],["appli",{"_index":343,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["arg",{"_index":134,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{}}}],["arg1",{"_index":160,"title":{},"body":{"index.html":{}}}],["arg2",{"_index":150,"title":{},"body":{"index.html":{}}}],["argument",{"_index":139,"title":{},"body":{"index.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{}}}],["argumentsmatch",{"_index":233,"title":{"classes/ArgumentsMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["array",{"_index":291,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["ask",{"_index":26,"title":{},"body":{"index.html":{}}}],["assert",{"_index":225,"title":{},"body":{"changelog.html":{}}}],["assign",{"_index":516,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["b",{"_index":151,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":166,"title":{},"body":{"index.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["behaviour",{"_index":209,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":250,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["c",{"_index":7,"title":{},"body":{"index.html":{}}}],["call",{"_index":107,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["callback",{"_index":97,"title":{},"body":{"index.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{}}}],["callback((arg1",{"_index":158,"title":{},"body":{"index.html":{}}}],["callback((argu",{"_index":138,"title":{},"body":{"index.html":{}}}],["callbacks.loose.strategi",{"_index":582,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.loose.strategy.t",{"_index":406,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:16",{"_index":418,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:32",{"_index":415,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:9",{"_index":413,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.strict.strategi",{"_index":581,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.strict.strategy.t",{"_index":428,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:13",{"_index":431,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:29",{"_index":430,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:6",{"_index":429,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.t",{"_index":577,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["callbacks.ts:13",{"_index":598,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:14",{"_index":597,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:18",{"_index":580,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["callbacks/interceptor",{"_index":405,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["callcount",{"_index":264,"title":{"classes/CallCounter.html":{}},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["callcounter(expressionmatcherfactori",{"_index":281,"title":{},"body":{"classes/CallCounter.html":{}}}],["callcounterfactori",{"_index":280,"title":{},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n",{"_index":573,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["case",{"_index":224,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":450,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["changelog",{"_index":207,"title":{"changelog.html":{}},"body":{}}],["check",{"_index":55,"title":{},"body":{"index.html":{}}}],["class",{"_index":196,"title":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}},"body":{"index.html":{},"overview.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["code",{"_index":17,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["compat",{"_index":18,"title":{},"body":{"index.html":{}}}],["compil",{"_index":42,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["const",{"_index":74,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["constant",{"_index":253,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constantformatt",{"_index":282,"title":{"classes/ConstantFormatter.html":{}},"body":{"classes/ConstantFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constantformatter().format(object[index",{"_index":294,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["constantmatch",{"_index":243,"title":{"classes/ConstantMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor",{"_index":241,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["constructor(arg",{"_index":394,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(argumentsmatch",{"_index":459,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["constructor(constantformatt",{"_index":454,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constructor(constantmatch",{"_index":242,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor(definedsetup",{"_index":410,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["constructor(expectedexpressionformatt",{"_index":564,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["constructor(expressionformatt",{"_index":300,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["constructor(expressionmatch",{"_index":268,"title":{},"body":{"classes/CallCounter.html":{}}}],["constructor(getpropertyexpressionmatch",{"_index":377,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["constructor(getpropertyformatt",{"_index":356,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["constructor(messag",{"_index":551,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["constructor(nam",{"_index":389,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(pred",{"_index":438,"title":{},"body":{"classes/It.html":{}}}],["constructor(priv",{"_index":256,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["constructor(publ",{"_index":392,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"interfaces/IPredicate.html":{}}}],["constructor(reflector",{"_index":541,"title":{},"body":{"classes/Verifier.html":{}}}],["control",{"_index":167,"title":{},"body":{"index.html":{}}}],["correspond",{"_index":169,"title":{},"body":{"index.html":{}}}],["count",{"_index":267,"title":{},"body":{"classes/CallCounter.html":{}}}],["count(expect",{"_index":271,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter",{"_index":546,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["counter.t",{"_index":266,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:12",{"_index":273,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:6",{"_index":270,"title":{},"body":{"classes/CallCounter.html":{}}}],["date",{"_index":118,"title":{},"body":{"index.html":{}}}],["date(2016",{"_index":155,"title":{},"body":{"index.html":{}}}],["date(2017",{"_index":159,"title":{},"body":{"index.html":{}}}],["deal",{"_index":194,"title":{},"body":{"index.html":{}}}],["declar",{"_index":335,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["dedic",{"_index":22,"title":{},"body":{"index.html":{}}}],["default",{"_index":173,"title":{},"body":{"index.html":{},"classes/Tracker.html":{}}}],["defin",{"_index":185,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["definedsetup",{"_index":411,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["definedsetups(expressionmatcherfactori",{"_index":497,"title":{},"body":{"classes/Mock.html":{}}}],["delimit",{"_index":571,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["deni",{"_index":88,"title":{},"body":{"index.html":{}}}],["depend",{"_index":13,"title":{},"body":{"index.html":{}}}],["descript",{"_index":292,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["description.push(new",{"_index":293,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["dev",{"_index":30,"title":{},"body":{"index.html":{}}}],["document",{"_index":9,"title":{},"body":{"index.html":{}}}],["dump",{"_index":226,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":451,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["enum",{"_index":583,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["enumer",{"_index":605,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":550,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["error('an",{"_index":128,"title":{},"body":{"index.html":{}}}],["error('argu",{"_index":141,"title":{},"body":{"index.html":{}}}],["error('invok",{"_index":163,"title":{},"body":{"index.html":{}}}],["error('property4",{"_index":101,"title":{},"body":{"index.html":{}}}],["es5",{"_index":219,"title":{},"body":{"changelog.html":{}}}],["except",{"_index":180,"title":{},"body":{"index.html":{}}}],["exclus",{"_index":608,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["expect",{"_index":251,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedexpress",{"_index":272,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/Mock.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectedexpressionformatt",{"_index":298,"title":{"classes/ExpectedExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpressionformatter(expressionformatterfactori",{"_index":312,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expectedexpressionformatterfactori",{"_index":311,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessag",{"_index":567,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessage}\\n${delimiter}\\ntrack",{"_index":572,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionreflector",{"_index":319,"title":{"classes/ExpectedExpressionReflector.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpress",{"_index":63,"title":{"classes/ExpectedGetPropertyExpression.html":{}},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectedgetpropertyexpression(nam",{"_index":340,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpression|it",{"_index":399,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["expectedmethodexpress",{"_index":332,"title":{"classes/ExpectedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmethodexpression(arg",{"_index":345,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedmethodexpression|it",{"_index":462,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["expectednamedmethodexpress",{"_index":331,"title":{"classes/ExpectedNamedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectednamedmethodexpression(nam",{"_index":341,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectednamedmethodexpression|it",{"_index":510,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["expectedsetpropertyexpress",{"_index":115,"title":{"classes/ExpectedSetPropertyExpression.html":{}},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expectedsetpropertyexpression(nam",{"_index":342,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedsetpropertyexpression|it",{"_index":518,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["export",{"_index":255,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["express",{"_index":227,"title":{},"body":{"changelog.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{}}}],["expression(proxi",{"_index":348,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expression.arguments.foreach(arg",{"_index":505,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.nam",{"_index":85,"title":{},"body":{"index.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["expression.name}(${valu",{"_index":508,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.valu",{"_index":123,"title":{},"body":{"index.html":{}}}],["expressiondescript",{"_index":313,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressiondescription}${mockdescript",{"_index":316,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressionformatt",{"_index":301,"title":{"classes/ExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["expressionformatterfactori",{"_index":309,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["expressionmatch",{"_index":269,"title":{"classes/ExpressionMatcher.html":{}},"body":{"classes/CallCounter.html":{},"classes/ExpressionMatcher.html":{}}}],["expressionmatcherfactori",{"_index":276,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{}}}],["expressionproxi",{"_index":324,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expressionreflector",{"_index":478,"title":{},"body":{"classes/Mock.html":{}}}],["expressions.t",{"_index":349,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/expect",{"_index":274,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/express",{"_index":252,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{}}}],["expressions|it",{"_index":371,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["extend",{"_index":350,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["factori",{"_index":310,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["fals",{"_index":125,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/ArgumentsMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IPredicate.html":{}}}],["field",{"_index":117,"title":{},"body":{"index.html":{}}}],["file",{"_index":236,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["find",{"_index":50,"title":{},"body":{"index.html":{}}}],["folder",{"_index":58,"title":{},"body":{"index.html":{}}}],["format",{"_index":285,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(expect",{"_index":303,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(express",{"_index":366,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["format(object",{"_index":286,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["format(trackedexpress",{"_index":523,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["formatt",{"_index":308,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["formatted.join",{"_index":507,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatted.push(this.constantformatter.format(arg",{"_index":506,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatter.t",{"_index":284,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:10",{"_index":456,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:12",{"_index":364,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:15",{"_index":306,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatter.ts:18",{"_index":565,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["formatter.ts:22",{"_index":367,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:4",{"_index":455,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["formatter.ts:5",{"_index":287,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["formatter.ts:9",{"_index":302,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatters/verifi",{"_index":548,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["friendli",{"_index":45,"title":{},"body":{"index.html":{}}}],["full",{"_index":41,"title":{},"body":{"index.html":{}}}],["fulli",{"_index":48,"title":{},"body":{"index.html":{}}}],["function",{"_index":49,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["get",{"_index":0,"title":{"index.html":{},"changelog.html":{}},"body":{}}],["get.properti",{"_index":368,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["get.property.integrationtests.t",{"_index":61,"title":{},"body":{"index.html":{}}}],["getpropertyexpress",{"_index":351,"title":{"classes/GetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["getpropertyexpression(methodnam",{"_index":425,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["getpropertyexpressionformatt",{"_index":357,"title":{"classes/GetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["getpropertyexpressionmatch",{"_index":378,"title":{"classes/GetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{}}}],["getpropertyformatt",{"_index":365,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["getter",{"_index":396,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["hasnamedmethod",{"_index":408,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["hasnamedmethod(methodnam",{"_index":414,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["havebeencalledtim",{"_index":305,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["help",{"_index":25,"title":{},"body":{"index.html":{}}}],["hidden",{"_index":477,"title":{},"body":{"classes/Mock.html":{}}}],["hold",{"_index":103,"title":{},"body":{"index.html":{}}}],["hook",{"_index":113,"title":{},"body":{"index.html":{}}}],["https://dvabuzyarov.github.io/moq.t",{"_index":10,"title":{},"body":{"index.html":{}}}],["iexpectedexpress",{"_index":328,"title":{"interfaces/IExpectedExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IExpectedExpression.html":{}}}],["iinterceptorcallback",{"_index":473,"title":{"interfaces/IInterceptorCallbacks.html":{}},"body":{"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["iinterceptorcallbacksstrategi",{"_index":407,"title":{"interfaces/IInterceptorCallbacksStrategy.html":{}},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["imock",{"_index":468,"title":{},"body":{"classes/Mock.html":{}}}],["implement",{"_index":12,"title":{},"body":{"index.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["import",{"_index":11,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["inclus",{"_index":609,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":2,"title":{"index.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["info",{"_index":234,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["inspir",{"_index":6,"title":{},"body":{"index.html":{}}}],["instal",{"_index":27,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":333,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/It.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["instance(1",{"_index":135,"title":{},"body":{"index.html":{}}}],["instance(2",{"_index":137,"title":{},"body":{"index.html":{}}}],["instance(it.is(valu",{"_index":142,"title":{},"body":{"index.html":{}}}],["instance(valu",{"_index":140,"title":{},"body":{"index.html":{}}}],["instance.method",{"_index":105,"title":{},"body":{"index.html":{}}}],["instance.method(1",{"_index":152,"title":{},"body":{"index.html":{}}}],["instance.method(2",{"_index":165,"title":{},"body":{"index.html":{}}}],["instance.method(3",{"_index":161,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(()=>tru",{"_index":186,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(valu",{"_index":156,"title":{},"body":{"index.html":{}}}],["instance.properti",{"_index":119,"title":{},"body":{"index.html":{}}}],["instance.property1",{"_index":82,"title":{},"body":{"index.html":{}}}],["instance.property2",{"_index":92,"title":{},"body":{"index.html":{}}}],["instance.property3",{"_index":96,"title":{},"body":{"index.html":{}}}],["instance[property4nam",{"_index":99,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":193,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{}}}],["integr",{"_index":54,"title":{},"body":{"index.html":{}}}],["intend",{"_index":33,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":409,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["intercepted(express",{"_index":417,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptedcallback",{"_index":481,"title":{},"body":{"classes/Mock.html":{}}}],["interceptor",{"_index":419,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptor(callback",{"_index":500,"title":{},"body":{"classes/Mock.html":{}}}],["interceptorcallback",{"_index":584,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacks(strictstrategi",{"_index":589,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksfactori",{"_index":474,"title":{},"body":{"classes/Mock.html":{}}}],["interceptorcallbacksfactory(definedsetup",{"_index":498,"title":{},"body":{"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksloosestrategi",{"_index":403,"title":{"classes/InterceptorCallbacksLooseStrategy.html":{}},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksloosestrategy(definedsetup",{"_index":588,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksstrictstrategi",{"_index":427,"title":{"classes/InterceptorCallbacksStrictStrategy.html":{}},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorcallbacksstrictstrategy(definedsetup",{"_index":586,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["interceptorfactori",{"_index":479,"title":{},"body":{"classes/Mock.html":{}}}],["interceptorfactory(interceptedcallback",{"_index":483,"title":{},"body":{"classes/Mock.html":{}}}],["interfac",{"_index":64,"title":{"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}},"body":{"index.html":{},"overview.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/It.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["intern",{"_index":476,"title":{},"body":{"classes/Mock.html":{}}}],["introduc",{"_index":211,"title":{},"body":{"changelog.html":{}}}],["ipred",{"_index":439,"title":{"interfaces/IPredicate.html":{}},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["is(pred",{"_index":441,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["isani",{"_index":437,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["isetup",{"_index":470,"title":{},"body":{"classes/Mock.html":{}}}],["isetupinvok",{"_index":469,"title":{},"body":{"classes/Mock.html":{}}}],["it(pred",{"_index":447,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["it).pred",{"_index":289,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it).test(left",{"_index":297,"title":{},"body":{"classes/ConstantMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["it.i",{"_index":93,"title":{},"body":{"index.html":{}}}],["it.is(${(object",{"_index":288,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it.is(()=>tru",{"_index":187,"title":{},"body":{"index.html":{}}}],["it.is((express",{"_index":84,"title":{},"body":{"index.html":{}}}],["it.is(valu",{"_index":126,"title":{},"body":{"index.html":{}}}],["it.isani",{"_index":221,"title":{},"body":{"changelog.html":{}}}],["itestfunct",{"_index":133,"title":{},"body":{"index.html":{}}}],["itestobject",{"_index":65,"title":{},"body":{"index.html":{}}}],["latest",{"_index":230,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":249,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["left.foreach((lvalu",{"_index":260,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.length",{"_index":258,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.nam",{"_index":401,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["let'",{"_index":87,"title":{},"body":{"index.html":{}}}],["lib/cal",{"_index":265,"title":{},"body":{"classes/CallCounter.html":{}}}],["lib/expect",{"_index":320,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/It.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{}}}],["lib/express",{"_index":237,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["lib/expressions.t",{"_index":388,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["lib/expressions.ts:11",{"_index":452,"title":{},"body":{"classes/MethodExpression.html":{}}}],["lib/expressions.ts:18",{"_index":390,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:19",{"_index":391,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:2",{"_index":502,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/expressions.ts:24",{"_index":511,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:25",{"_index":512,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:26",{"_index":513,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:4",{"_index":503,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/formatters/const",{"_index":283,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["lib/formatters/expect",{"_index":299,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["lib/formatters/express",{"_index":355,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["lib/formatters/get.properti",{"_index":395,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["lib/formatters/method",{"_index":453,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["lib/formatters/named.method",{"_index":504,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["lib/formatters/set.properti",{"_index":514,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["lib/formatters/track",{"_index":522,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["lib/formatters/verifi",{"_index":563,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["lib/interceptor",{"_index":404,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["lib/interceptor.t",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/mock.t",{"_index":465,"title":{},"body":{"classes/Mock.html":{}}}],["lib/mock.ts:62",{"_index":467,"title":{},"body":{"classes/Mock.html":{}}}],["lib/times.t",{"_index":607,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/tracker.t",{"_index":530,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:13",{"_index":536,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:7",{"_index":537,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:9",{"_index":534,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/verifier.t",{"_index":540,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["lib/verifier.ts:17",{"_index":543,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:26",{"_index":545,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:7",{"_index":562,"title":{},"body":{"classes/VerifyError.html":{}}}],["librari",{"_index":8,"title":{},"body":{"index.html":{}}}],["log",{"_index":531,"title":{},"body":{"classes/Tracker.html":{}}}],["loos",{"_index":210,"title":{},"body":{"changelog.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["loosestrategi",{"_index":587,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["magic",{"_index":38,"title":{},"body":{"index.html":{}}}],["make",{"_index":191,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["match",{"_index":204,"title":{},"body":{"index.html":{},"overview.html":{},"changelog.html":{},"modules.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["matched(left",{"_index":246,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher",{"_index":254,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.t",{"_index":239,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:12",{"_index":461,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:15",{"_index":382,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:24",{"_index":383,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:4",{"_index":244,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matcher.ts:5",{"_index":296,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matcher.ts:6",{"_index":460,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:7",{"_index":398,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matcher.ts:9",{"_index":248,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/argu",{"_index":238,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/const",{"_index":295,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matchers/express",{"_index":275,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpressionMatcher.html":{}}}],["matchers/factori",{"_index":277,"title":{},"body":{"classes/CallCounter.html":{},"classes/Mock.html":{}}}],["matchers/get.properti",{"_index":397,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matchers/method",{"_index":458,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["matchers/named.method",{"_index":509,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["matchers/set.properti",{"_index":517,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["matter",{"_index":181,"title":{},"body":{"index.html":{}}}],["messag",{"_index":558,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["method",{"_index":72,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["method(1",{"_index":145,"title":{},"body":{"index.html":{}}}],["method(arg1",{"_index":149,"title":{},"body":{"index.html":{}}}],["method.property.integrationtests.t",{"_index":132,"title":{},"body":{"index.html":{}}}],["methodexpress",{"_index":353,"title":{"classes/MethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["methodexpressionformatt",{"_index":361,"title":{"classes/MethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{}}}],["methodexpressionmatch",{"_index":380,"title":{"classes/MethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{}}}],["methodformatt",{"_index":360,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["methodnam",{"_index":416,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["minimalist",{"_index":46,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":600,"title":{"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["mock",{"_index":59,"title":{"classes/Mock.html":{}},"body":{"index.html":{},"changelog.html":{},"classes/Mock.html":{}}}],["mock(mocknam",{"_index":80,"title":{},"body":{"index.html":{}}}],["mock.object",{"_index":108,"title":{},"body":{"index.html":{}}}],["mock.verify(inst",{"_index":110,"title":{},"body":{"index.html":{}}}],["mockbehavior",{"_index":475,"title":{},"body":{"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["mockbehavior.loos",{"_index":595,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["mockbehavior.strict",{"_index":175,"title":{},"body":{"index.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["mockcor",{"_index":466,"title":{},"body":{"classes/Mock.html":{}}}],["mockdescript",{"_index":315,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["mocknam",{"_index":76,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["modul",{"_index":232,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moq",{"_index":4,"title":{},"body":{"index.html":{},"classes/Mock.html":{}}}],["moq.t",{"_index":3,"title":{},"body":{"index.html":{}}}],["name",{"_index":77,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["named.method",{"_index":370,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["named.method.integrationtests.t",{"_index":148,"title":{},"body":{"index.html":{}}}],["namedmethodexpress",{"_index":354,"title":{"classes/NamedMethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["namedmethodexpressionformatt",{"_index":363,"title":{"classes/NamedMethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{}}}],["namedmethodexpressionmatch",{"_index":381,"title":{"classes/NamedMethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["namedmethodformatt",{"_index":362,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["need",{"_index":24,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["new",{"_index":79,"title":{},"body":{"index.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["now",{"_index":213,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":28,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["null",{"_index":433,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["number",{"_index":68,"title":{},"body":{"index.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["number|ani",{"_index":116,"title":{},"body":{"index.html":{}}}],["object",{"_index":15,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/ConstantFormatter.html":{},"classes/Mock.html":{}}}],["object.getprototypeof",{"_index":197,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["object.method",{"_index":109,"title":{},"body":{"index.html":{}}}],["object.method(1",{"_index":164,"title":{},"body":{"index.html":{}}}],["object.properti",{"_index":130,"title":{},"body":{"index.html":{}}}],["object.setprototypeof",{"_index":198,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["oper",{"_index":90,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["option",{"_index":78,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["origin",{"_index":32,"title":{},"body":{"index.html":{}}}],["out",{"_index":56,"title":{},"body":{"index.html":{}}}],["overview",{"_index":205,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":218,"title":{},"body":{"changelog.html":{}}}],["paramet",{"_index":245,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["part",{"_index":182,"title":{},"body":{"index.html":{}}}],["pass",{"_index":556,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["pointer",{"_index":104,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":214,"title":{},"body":{"changelog.html":{}}}],["preced",{"_index":231,"title":{},"body":{"changelog.html":{}}}],["predic",{"_index":222,"title":{},"body":{"changelog.html":{},"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["predicates.t",{"_index":435,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["predicates.ts:1",{"_index":599,"title":{},"body":{"interfaces/IPredicate.html":{}}}],["predicates.ts:11",{"_index":442,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:15",{"_index":443,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:19",{"_index":445,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:6",{"_index":440,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:7",{"_index":446,"title":{},"body":{"classes/It.html":{}}}],["pretti",{"_index":51,"title":{},"body":{"index.html":{}}}],["print",{"_index":228,"title":{},"body":{"changelog.html":{}}}],["privat",{"_index":322,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["product",{"_index":16,"title":{},"body":{"index.html":{}}}],["project",{"_index":23,"title":{},"body":{"index.html":{}}}],["properti",{"_index":60,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Tracker.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["property1",{"_index":67,"title":{},"body":{"index.html":{}}}],["property2",{"_index":69,"title":{},"body":{"index.html":{}}}],["property3",{"_index":70,"title":{},"body":{"index.html":{}}}],["property4",{"_index":71,"title":{},"body":{"index.html":{}}}],["property4nam",{"_index":75,"title":{},"body":{"index.html":{}}}],["prototyp",{"_index":190,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["prototype[methodnam",{"_index":434,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["prototypeof",{"_index":195,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["prototypeof(prototyp",{"_index":493,"title":{},"body":{"classes/Mock.html":{}}}],["prototypeof(testobject",{"_index":200,"title":{},"body":{"index.html":{}}}],["proxi",{"_index":14,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/variables.html":{}}}],["proxy(funct",{"_index":346,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["proxy:ani",{"_index":337,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["public",{"_index":240,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["quick",{"_index":31,"title":{},"body":{"index.html":{}}}],["rang",{"_index":606,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["recommend",{"_index":19,"title":{},"body":{"index.html":{}}}],["refactor",{"_index":44,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":325,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflect(express",{"_index":327,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflectedinfo",{"_index":323,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflector",{"_index":471,"title":{},"body":{"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["reflector.t",{"_index":321,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/variables.html":{}}}],["reflector.ts:15",{"_index":330,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:17",{"_index":326,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:41",{"_index":329,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:7",{"_index":576,"title":{},"body":{"interfaces/IExpectedExpression.html":{}}}],["result",{"_index":203,"title":{},"body":{"index.html":{},"overview.html":{},"changelog.html":{},"modules.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/enumerations.html":{}}}],["result.length",{"_index":529,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["result.substr(0",{"_index":528,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["return",{"_index":112,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["returns('cal",{"_index":136,"title":{},"body":{"index.html":{}}}],["returns(()=>{console.log('th",{"_index":106,"title":{},"body":{"index.html":{}}}],["returns(1",{"_index":83,"title":{},"body":{"index.html":{}}}],["returns(100",{"_index":86,"title":{},"body":{"index.html":{}}}],["returns(fals",{"_index":95,"title":{},"body":{"index.html":{}}}],["returns(new",{"_index":154,"title":{},"body":{"index.html":{}}}],["returns(tru",{"_index":122,"title":{},"body":{"index.html":{}}}],["returns(undefined);mockbehavior.loos",{"_index":188,"title":{},"body":{"index.html":{}}}],["right",{"_index":247,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["right.length",{"_index":259,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["right[index",{"_index":262,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["rightexpress",{"_index":400,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.argu",{"_index":464,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["rightexpression.nam",{"_index":402,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.valu",{"_index":520,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["rvalu",{"_index":261,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["save",{"_index":29,"title":{},"body":{"index.html":{}}}],["separ",{"_index":20,"title":{},"body":{"index.html":{}}}],["set",{"_index":52,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["set.properti",{"_index":369,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["set.property.integrationtests.t",{"_index":114,"title":{},"body":{"index.html":{}}}],["set/read",{"_index":215,"title":{},"body":{"changelog.html":{}}}],["setbehaviorstrategi",{"_index":578,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["setbehaviorstrategy(behavior",{"_index":579,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["setbehaviorstrategy(behaviorstrategi",{"_index":495,"title":{},"body":{"classes/Mock.html":{}}}],["setbehaviorstrategy(mockbehavior.loos",{"_index":171,"title":{},"body":{"index.html":{}}}],["setbehaviorstrategy(mockbehavior.strict);th",{"_index":172,"title":{},"body":{"index.html":{}}}],["setpropertyexpress",{"_index":352,"title":{"classes/SetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["setpropertyexpressionformatt",{"_index":359,"title":{"classes/SetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["setpropertyexpressionmatch",{"_index":379,"title":{"classes/SetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["setpropertyformatt",{"_index":358,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["setup",{"_index":170,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["setup(express",{"_index":484,"title":{},"body":{"classes/Mock.html":{}}}],["setup(inst",{"_index":81,"title":{},"body":{"index.html":{}}}],["setup(mock",{"_index":501,"title":{},"body":{"classes/Mock.html":{}}}],["setup.invok",{"_index":424,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke((expression).argu",{"_index":422,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke([(expression).valu",{"_index":423,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setupfactori",{"_index":480,"title":{},"body":{"classes/Mock.html":{}}}],["signatur",{"_index":575,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["simpl",{"_index":34,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":235,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}}}],["spi",{"_index":189,"title":{},"body":{"index.html":{}}}],["start",{"_index":1,"title":{"index.html":{},"changelog.html":{}},"body":{"index.html":{}}}],["static",{"_index":436,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["still",{"_index":47,"title":{},"body":{"index.html":{}}}],["strict",{"_index":174,"title":{},"body":{"index.html":{},"changelog.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["strictstrategi",{"_index":585,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["string",{"_index":39,"title":{},"body":{"index.html":{},"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["strongli",{"_index":36,"title":{},"body":{"index.html":{}}}],["super",{"_index":499,"title":{},"body":{"classes/Mock.html":{}}}],["super(messag",{"_index":552,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["support",{"_index":216,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":334,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/It.html":{},"classes/Mock.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["target",{"_index":338,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["test",{"_index":21,"title":{},"body":{"index.html":{},"classes/It.html":{},"classes/Verifier.html":{}}}],["test(expect",{"_index":544,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["test(inst",{"_index":444,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["testobject",{"_index":199,"title":{},"body":{"index.html":{}}}],["tests.integr",{"_index":57,"title":{},"body":{"index.html":{}}}],["therefor",{"_index":40,"title":{},"body":{"index.html":{}}}],["this.activestrategi",{"_index":591,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.activestrategy.hasnamedmethod(methodnam",{"_index":593,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.activestrategy.intercepted(express",{"_index":592,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.argu",{"_index":393,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["this.argumentsmatcher.matched(left.argu",{"_index":463,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["this.callcounter.count(express",{"_index":555,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.constantformatter.format(express",{"_index":376,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.argu",{"_index":457,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.valu",{"_index":515,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["this.constantmatcher.matched(left.valu",{"_index":519,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["this.constantmatcher.matched(lvalu",{"_index":263,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["this.definedsetups.add(expectedexpress",{"_index":487,"title":{},"body":{"classes/Mock.html":{}}}],["this.definedsetups.get(express",{"_index":421,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.definedsetups.get(getpropertyexpress",{"_index":426,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["this.definedsetups.hasnamedmethod(methodnam",{"_index":432,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.expectedexpressionformatter.format(expect",{"_index":568,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.expressionformatter.format(expect",{"_index":314,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["this.expressionformatter.format(expression)}\\n",{"_index":527,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["this.expressionmatcher.matched(express",{"_index":279,"title":{},"body":{"classes/CallCounter.html":{}}}],["this.expressionproxi",{"_index":347,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.expressionreflector.reflect(express",{"_index":486,"title":{},"body":{"classes/Mock.html":{}}}],["this.getpropertyexpressionmatcher.matched(left",{"_index":384,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.getpropertyformatter.format(express",{"_index":372,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.interceptedcallbacks.setbehaviorstrategy(behaviorstrategi",{"_index":496,"title":{},"body":{"classes/Mock.html":{}}}],["this.interceptor",{"_index":482,"title":{},"body":{"classes/Mock.html":{}}}],["this.interceptor.object",{"_index":492,"title":{},"body":{"classes/Mock.html":{}}}],["this.interceptor.prototypeof(prototyp",{"_index":494,"title":{},"body":{"classes/Mock.html":{}}}],["this.log",{"_index":539,"title":{},"body":{"classes/Tracker.html":{}}}],["this.log.push(act",{"_index":538,"title":{},"body":{"classes/Tracker.html":{}}}],["this.loosestrategi",{"_index":596,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.methodexpressionmatcher.matched(left",{"_index":386,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.methodformatter.format(express",{"_index":374,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.nam",{"_index":491,"title":{},"body":{"classes/Mock.html":{}}}],["this.namedmethodexpressionmatcher.matched(left",{"_index":387,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.namedmethodformatter.format(express",{"_index":375,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.predicate(inst",{"_index":449,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["this.reflectedinfo",{"_index":339,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.reflector.reflect(expect",{"_index":554,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.setpropertyexpressionmatcher.matched(left",{"_index":385,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.setpropertyformatter.format(express",{"_index":373,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.setupfactory(thi",{"_index":485,"title":{},"body":{"classes/Mock.html":{}}}],["this.strictstrategi",{"_index":594,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["this.trackedexpressionsformatter.format(trackedexpress",{"_index":570,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.tracker.add(express",{"_index":420,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.tracker.get",{"_index":490,"title":{},"body":{"classes/Mock.html":{}}}],["this.verifier.test(express",{"_index":489,"title":{},"body":{"classes/Mock.html":{}}}],["this.verifyformatter.format(express",{"_index":559,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["thisarg",{"_index":344,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["throw",{"_index":178,"title":{},"body":{"index.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["throws(new",{"_index":100,"title":{},"body":{"index.html":{}}}],["time",{"_index":62,"title":{},"body":{"index.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["time(",{"_index":318,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["times.exactly(1",{"_index":147,"title":{},"body":{"index.html":{}}}],["times.messag",{"_index":560,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.never());mock",{"_index":111,"title":{},"body":{"index.html":{}}}],["times.onc",{"_index":146,"title":{},"body":{"index.html":{},"classes/Mock.html":{}}}],["times.once());mock",{"_index":131,"title":{},"body":{"index.html":{}}}],["times.test(callcount",{"_index":557,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["timesmessag",{"_index":304,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["timesmessage.tolowercas",{"_index":317,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["track",{"_index":184,"title":{},"body":{"index.html":{},"changelog.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpress",{"_index":524,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatt",{"_index":521,"title":{"classes/TrackedExpressionsFormatter.html":{}},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatter(expressionformatterfactori",{"_index":526,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["trackedexpressionsformatterfactori",{"_index":525,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsmessag",{"_index":569,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["tracker",{"_index":412,"title":{"classes/Tracker.html":{}},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Mock.html":{},"classes/Tracker.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["tri",{"_index":448,"title":{},"body":{"classes/It.html":{},"interfaces/IPredicate.html":{}}}],["true",{"_index":94,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/SetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["truesponsor",{"_index":201,"title":{},"body":{"index.html":{}}}],["type",{"_index":37,"title":{},"body":{"index.html":{},"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/Mock.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"miscellaneous/variables.html":{},"miscellaneous/typealiases.html":{}}}],["typealias",{"_index":603,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror",{"_index":179,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":290,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["typescript",{"_index":5,"title":{},"body":{"index.html":{}}}],["unam",{"_index":574,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["undefin",{"_index":177,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/Mock.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["unset",{"_index":176,"title":{},"body":{"index.html":{}}}],["us",{"_index":35,"title":{},"body":{"index.html":{}}}],["usag",{"_index":53,"title":{},"body":{"index.html":{}}}],["v2.1.0",{"_index":208,"title":{},"body":{"changelog.html":{}}}],["v2.3.0",{"_index":212,"title":{},"body":{"changelog.html":{}}}],["v2.3.1",{"_index":217,"title":{},"body":{"changelog.html":{}}}],["v2.4.0",{"_index":220,"title":{},"body":{"changelog.html":{}}}],["v2.5.0",{"_index":223,"title":{},"body":{"changelog.html":{}}}],["v2.5.1",{"_index":229,"title":{},"body":{"changelog.html":{}}}],["valu",{"_index":91,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Tracker.html":{},"interfaces/IExpectedExpression.html":{}}}],["values[0",{"_index":153,"title":{},"body":{"index.html":{}}}],["values[1",{"_index":157,"title":{},"body":{"index.html":{}}}],["values[2",{"_index":162,"title":{},"body":{"index.html":{}}}],["var",{"_index":336,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["variabl",{"_index":601,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifi",{"_index":43,"title":{"classes/Verifier.html":{}},"body":{"index.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifier(new",{"_index":553,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifierfactori",{"_index":472,"title":{},"body":{"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verify(express",{"_index":488,"title":{},"body":{"classes/Mock.html":{}}}],["verifyerror",{"_index":549,"title":{"classes/VerifyError.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyerror(messag",{"_index":561,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyformatt",{"_index":542,"title":{"classes/VerifyFormatter.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["verifyformatter(expectedexpressionformatterfactori",{"_index":566,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["verifyformatterfactori",{"_index":547,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["void",{"_index":73,"title":{},"body":{"index.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/Mock.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["want",{"_index":183,"title":{},"body":{"index.html":{}}}],["without",{"_index":168,"title":{},"body":{"index.html":{}}}],["work",{"_index":192,"title":{},"body":{"index.html":{},"changelog.html":{}}}],["write",{"_index":89,"title":{},"body":{"index.html":{}}}],["written",{"_index":129,"title":{},"body":{"index.html":{}}}],["ye",{"_index":307,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Mock.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nmoq.ts\nMoq for Typescript. Inspired by c# Moq library.\nDocumentation https://dvabuzyarov.github.io/moq.ts/\nImportant\nThis implementation depends on Proxy object.\nSo if your production code is not compatible with this I would recommend you separate you production code and testing code into dedicated projects.\nIf you need help with this then ask me.\nInstall\nnpm install moq.ts --save-dev\nQuick start\nmoq.ts as the original Moq library is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).\nYou can find a pretty full set of usages in the integration tests. Check out tests.integration folder.\nMocking property of objects\n-\nmock-get.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedGetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property1: number;\n    property2: number;\n    property3: number;\n    property4: number;\n    method(): void;\n}\n\nconst property4Name = 'property4';\nconst mockName = 'mock name is optional';\nconst mock = new Mock(mockName)\n    .setup(instance => instance.property1)\n    .returns(1)\n\n    .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property2'))\n    .returns(100)\n\n    //let's deny any write operation on the property for all values\n    .setup(instance => {instance.property2 = It.Is(() => true)})\n    .returns(false)\n\n    .setup(instance => instance.property3)\n    .callback(()=> 10 + 10)\n\n    .setup(instance => instance[property4Name])\n    .throws(new Error('property4 access'))\n\n    //since a method is a property that holds a pointer to a function\n    .setup(instance => instance.method)\n    .returns(()=>{console.log('The method was called')});\n\nconst object = mock.object();\nobject.method();\n\nmock.verify(instance=> instance.property1, Times.Never());Mocking property setting\n-\nThe documentation on returned value from 'set hook' on Proxy object\nmock-set.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedSetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property: number|any;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => {instance.property = 1})\n    //true - allows the write operation\n    .returns(true)\n\n    .setup(instance => It.Is((expression: ExpectedSetPropertyExpression) => expression.name === 'property' && expression.value === 2))\n    //false - denies the write operation\n    .returns(false)\n\n    .setup(instance => {instance.property = It.Is(value => value === 3)})\n    // allows the write operation\n    .callback(()=> true)\n\n    .setup(instance => {instance.property = value})\n    .throws(new Error('an object has been written into property'));\n\n\nconst object = mock.object();\nobject.property = 1;\n\nmock.verify(instance=> {instance.property = 1}, Times.Once());Mocking functions\n-\nmock-method.property.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestFunction {\n    (arg: number|any): string;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => instance(1))\n    .returns('called with 1')\n\n    .setup(instance => instance(2))\n    .callback((argument)=> argument === 2 ? 'called with 2' : `called with ${argument}`)\n\n    .setup(instance => instance(value))\n    .throws(new Error('Argument is object with date'))\n\n    .setup(instance => instance(It.Is(value => value === 4)))\n    .returns('called with 4');\n\nconst method = mock.object();\nconst actual = method(1);\n\nmock.verify(instance => instance(1), Times.Once());\nmock.verify(instance => instance(It.Is(value=> value === 1)), Times.Exactly(1)); Mocking functions of objects\n -\nmock-named.method.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestObject {\n    method(arg1: number, arg2: string): Date;\n}\n\nconst values = ['a', 'b', 'c'];\n\nconst mock = new Mock()\n    .setup(instance => instance.method(1, values[0]))\n    .returns(new Date(2016))\n\n    .setup(instance => instance.method(It.Is(value => value === 2), values[1]))\n    .callback((arg1, arg2)=> new Date(2017 + arg1))\n\n    .setup(instance => instance.method(3, It.Is(value => value === values[2])))\n    .throws(new Error('Invoking method with 3 and c'));\n\nconst object = mock.object();\nconst actual = object.method(1, 'a');\n\nmock.verify(instance => instance.method(2, 'a'), Times.Never());Mock behavior\nYou can control mock behavior when accessing to a property without a corresponding setup. \n    mock = new Mock()\n    .setBehaviorStrategy(MockBehavior.Loose)\n    //or\n    .setBehaviorStrategy(MockBehavior.Strict);The default behavior is strict.\nMockBehavior.Strict\nAccessing to an unset property will return undefined value;\nAccessing to an unset method of an object will throw TypeError exception; It does not matter if a method is a part of mocked type.\nIf you want to track a method you can define a default setup:\nconst mock = new Mock()\n    .setup(instance => instance.method(It.Is(()=>true), It.Is(()=>true)))\n    .returns(undefined);MockBehavior.Loose\nAccessing to an unset property or a method will return a pointer to a spy function;\nYou can call this function and it will be tracked.\nMock prototype\nIf you need to make work instanceof operator or you need to deal with prototype of the mock object you can \nuse prototypeof function of Mock class. Or you can use Object.getPrototypeOf or Object.setPrototypeOf functions\non mock object.\nclass TestObject implements ITestObject {\n\n}\n\nconst mock = new Mock()\n                .prototypeof(TestObject)\n                .object();\n\nmock.object() instanceof TestObject;// trueSponsored by 2BIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        39 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nv2.1.0\n\nMock behaviours (strict and loose) have been introduced.\n\nv2.3.0\n\nMock prototype has been introduced. Now it is possible to set/read prototype of mock with prototypeof function.\nAlso mock object supports Object.getPrototypeOf and Object.setPrototypeOf functions. You may need it to make work \ninstanceof operator.\n\nv2.3.1\n\nThe NPM package is compiled as es5 code.\nv2.4.0\n\nIt.IsAny predicate has been introduced.\nv2.5.0\n\nIn case of false assertion the dump of the tracked expressions is printed.\nv2.5.1\n\nThe latest setup has precedence\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArgumentsMatcher.html":{"url":"classes/ArgumentsMatcher.html","title":"class - ArgumentsMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArgumentsMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/arguments-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantMatcher: ConstantMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/arguments-matcher.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantMatcher\n                                                              \n                                                                    \n                                                                                ConstantMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: any[], right: any | It[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/arguments-matcher.ts:9\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                any[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                any | It[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: any[], right: (any|It)[]): boolean{\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        let matched = true;\n        left.forEach((lvalue, index) =>{\n            const rvalue = right[index];\n            matched = this.constantMatcher.matched(lvalue, rvalue) === true ? matched : false;\n        });\n\n        return matched;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallCounter.html":{"url":"classes/CallCounter.html","title":"class - CallCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CallCounter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/call-counter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        count\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(expressionMatcher: ExpressionMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/call-counter.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expressionMatcher\n                                                              \n                                                                    \n                                                                                ExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        count\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    count(expected: ExpectedExpressions, expressions: Expressions[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/call-counter.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expected\n                                                                \n                                                                    \n                                                                                ExpectedExpressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                expressions\n                                                                \n                                                                    \n                                                                                Expressions[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     number\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from './expected-expressions/expected-expressions';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\n\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count(expected: ExpectedExpressions, expressions: Expressions[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true)\n                count += 1;\n        }\n\n        return count;\n    }\n}\n\nexport function callCounterFactory(): CallCounter {\n    return new CallCounter(expressionMatcherFactory());\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantFormatter.html":{"url":"classes/ConstantFormatter.html","title":"class - ConstantFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/constant-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(object: any | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/constant-formatter.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                object\n                                                                \n                                                                    \n                                                                                any | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantFormatter {\n\n    public format(object: any|It): string {\n        if (object instanceof It) return `It.Is(${(object as It).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const index in object)\n                description.push(new ConstantFormatter().format(object[index]));\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantMatcher.html":{"url":"classes/ConstantMatcher.html","title":"class - ConstantMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/constant-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: any, right: any | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/constant-matcher.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                any\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                any | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantMatcher {\n\n    public matched(left: any, right: any|It): boolean {\n        if (right instanceof It)\n            return (right as It).test(left);\n        return left === right;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionFormatter.html":{"url":"classes/ExpectedExpressionFormatter.html","title":"class - ExpectedExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expected-expression-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(expressionFormatter: ExpressionFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/expected-expression-formatter.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expressionFormatter\n                                                              \n                                                                    \n                                                                                ExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/expected-expression-formatter.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expected\n                                                                \n                                                                    \n                                                                                ExpectedExpressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                timesMessage\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                haveBeenCalledTimes\n                                                                \n                                                                    \n                                                                                number\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                mockName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        yes\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\n\nexport function expectedExpressionFormatterFactory (): ExpectedExpressionFormatter {\n    return new ExpectedExpressionFormatter(expressionFormatterFactory());\n}\n\nexport class ExpectedExpressionFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\n        const expressionDescription = this.expressionFormatter.format(expected);\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : '';\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionReflector.html":{"url":"classes/ExpectedExpressionReflector.html","title":"class - ExpectedExpressionReflector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionReflector\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Private\n                                        reflectedInfo\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Private\n                                        expressionProxy\n                                    \n                                    \n                                            Public\n                                        reflect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Private\n                                        expressionProxy\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    expressionProxy()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:17\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     any\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        reflect\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    reflect(expression: IExpectedExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:41\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                IExpectedExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     ExpectedExpressions\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Private\n                                        reflectedInfo\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    reflectedInfo:     \n            \n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:15\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedGetPropertyExpression.html":{"url":"classes/ExpectedGetPropertyExpression.html","title":"class - ExpectedGetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedGetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GetPropertyExpression\n            \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMethodExpression.html":{"url":"classes/ExpectedMethodExpression.html","title":"class - ExpectedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MethodExpression\n            \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNamedMethodExpression.html":{"url":"classes/ExpectedNamedMethodExpression.html","title":"class - ExpectedNamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NamedMethodExpression\n            \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedSetPropertyExpression.html":{"url":"classes/ExpectedSetPropertyExpression.html","title":"class - ExpectedSetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedSetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SetPropertyExpression\n            \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionFormatter.html":{"url":"classes/ExpressionFormatter.html","title":"class - ExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expression-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(getPropertyFormatter: GetPropertyExpressionFormatter, setPropertyFormatter: SetPropertyExpressionFormatter, methodFormatter: MethodExpressionFormatter, namedMethodFormatter: NamedMethodExpressionFormatter, constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/expression-formatter.ts:12\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                getPropertyFormatter\n                                                              \n                                                                    \n                                                                                GetPropertyExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                setPropertyFormatter\n                                                              \n                                                                    \n                                                                                SetPropertyExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                methodFormatter\n                                                              \n                                                                    \n                                                                                MethodExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                namedMethodFormatter\n                                                              \n                                                                    \n                                                                                NamedMethodExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                constantFormatter\n                                                              \n                                                                    \n                                                                                ConstantFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: Expressions | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/expression-formatter.ts:22\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                Expressions | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, SetPropertyExpression, NamedMethodExpression,\n    MethodExpression\n} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {GetPropertyExpressionFormatter} from './get.property-formatter';\nimport {SetPropertyExpressionFormatter} from './set.property-formatter';\nimport {MethodExpressionFormatter} from './method-formatter';\nimport {NamedMethodExpressionFormatter} from './named.method-formatter';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: Expressions|It): string {\n        if (expression instanceof GetPropertyExpression) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyExpression) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof MethodExpression) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodExpression) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionMatcher.html":{"url":"classes/ExpressionMatcher.html","title":"class - ExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/expression-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(getPropertyExpressionMatcher: GetPropertyExpressionMatcher, setPropertyExpressionMatcher: SetPropertyExpressionMatcher, methodExpressionMatcher: MethodExpressionMatcher, namedMethodExpressionMatcher: NamedMethodExpressionMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/expression-matcher.ts:15\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                getPropertyExpressionMatcher\n                                                              \n                                                                    \n                                                                                GetPropertyExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                setPropertyExpressionMatcher\n                                                              \n                                                                    \n                                                                                SetPropertyExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                methodExpressionMatcher\n                                                              \n                                                                    \n                                                                                MethodExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                namedMethodExpressionMatcher\n                                                              \n                                                                    \n                                                                                NamedMethodExpressionMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: Expressions, right: ExpectedExpressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/expression-matcher.ts:24\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                Expressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedExpressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {GetPropertyExpressionMatcher} from './get.property-matcher';\nimport {SetPropertyExpressionMatcher} from './set.property-matcher';\nimport {MethodExpressionMatcher} from './method-matcher';\nimport {NamedMethodExpressionMatcher} from './named.method-matcher';\nimport {\n    Expressions, GetPropertyExpression, SetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from '../expressions';\nimport {\n    ExpectedExpressions, ExpectedGetPropertyExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression\n} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher) {\n\n    }\n\n    public matched(left: Expressions, right: ExpectedExpressions): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyExpression && (right instanceof ExpectedGetPropertyExpression || right instanceof It))\n            return this.getPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof SetPropertyExpression && (right instanceof ExpectedSetPropertyExpression || right instanceof It))\n            return this.setPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof MethodExpression && (right instanceof ExpectedMethodExpression || right instanceof It))\n            return this.methodExpressionMatcher.matched(left, >right);\n        if (left instanceof NamedMethodExpression && (right instanceof ExpectedNamedMethodExpression || right instanceof It))\n            return this.namedMethodExpressionMatcher.matched(left, >right);\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpression.html":{"url":"classes/GetPropertyExpression.html","title":"class - GetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        name\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(name: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:18\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                name\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        name\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:19\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionFormatter.html":{"url":"classes/GetPropertyExpressionFormatter.html","title":"class - GetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/get.property-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: GetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/get.property-formatter.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                GetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\n\nexport class GetPropertyExpressionFormatter{\n\n    public format(expression: GetPropertyExpression): string{\n        return `Getter of \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionMatcher.html":{"url":"classes/GetPropertyExpressionMatcher.html","title":"class - GetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/get.property-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/get.property-matcher.ts:7\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                GetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedGetPropertyExpression | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ExpectedGetPropertyExpression} from '../expected-expressions/expected-expressions';\n\nexport class GetPropertyExpressionMatcher{\n\n    public matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksLooseStrategy.html":{"url":"classes/InterceptorCallbacksLooseStrategy.html","title":"class - InterceptorCallbacksLooseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksLooseStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        hasNamedMethod\n                                    \n                                    \n                                            Public\n                                        intercepted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(definedSetups: DefinedSetups, tracker: Tracker)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                definedSetups\n                                                              \n                                                                    \n                                                                                DefinedSetups\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                tracker\n                                                              \n                                                                    \n                                                                                Tracker\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        hasNamedMethod\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:32\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                methodName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                prototype\n                                                                \n                                                                    \n                                                                                any\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        intercepted\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:16\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                Expressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksLooseStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const getPropertyExpression = new GetPropertyExpression(methodName);\n        const setup = this.definedSetups.get(getPropertyExpression);\n        return setup !== undefined ? false : true;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksStrictStrategy.html":{"url":"classes/InterceptorCallbacksStrictStrategy.html","title":"class - InterceptorCallbacksStrictStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksStrictStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        hasNamedMethod\n                                    \n                                    \n                                            Public\n                                        intercepted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(definedSetups: DefinedSetups, tracker: Tracker)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                definedSetups\n                                                              \n                                                                    \n                                                                                DefinedSetups\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                tracker\n                                                              \n                                                                    \n                                                                                Tracker\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        hasNamedMethod\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:29\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                methodName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                prototype\n                                                                \n                                                                    \n                                                                                any\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        intercepted\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                Expressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {Expressions, MethodExpression, NamedMethodExpression, SetPropertyExpression} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksStrictStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const hasNamedMethod = this.definedSetups.hasNamedMethod(methodName);\n        if (hasNamedMethod === true) return true;\n\n        if (prototype !== null && prototype[methodName] instanceof Function)\n            return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/It.html":{"url":"classes/It.html","title":"class - It","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  It\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        predicate\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Static\n                                        Is\n                                    \n                                    \n                                            Static\n                                        IsAny\n                                    \n                                    \n                                            Public\n                                        test\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(predicate: IPredicate)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                predicate\n                                                              \n                                                                    \n                                                                                IPredicate\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Static\n                                        Is\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    Is(predicate: IPredicate)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:11\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                predicate\n                                                                \n                                                                    \n                                                                                IPredicate\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     It | any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Static\n                                        IsAny\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    IsAny()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     It | any\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        test\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    test(instance: T)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:19\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                instance\n                                                                \n                                                                    \n                                                                                T\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        predicate\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    predicate:     IPredicate\n            \n                                \n                            \n                                \n                                    \n                                        Type :     IPredicate\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:7\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpression.html":{"url":"classes/MethodExpression.html","title":"class - MethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        arguments\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(args: any[])\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:11\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                args\n                                                              \n                                                                    \n                                                                                any[]\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        arguments\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    arguments:     any[]\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any[]\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:11\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionFormatter.html":{"url":"classes/MethodExpressionFormatter.html","title":"class - MethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/method-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/method-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantFormatter\n                                                              \n                                                                    \n                                                                                ConstantFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: MethodExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/method-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                MethodExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {MethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class MethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: MethodExpression): string{\n        const value = this.constantFormatter.format(expression.arguments);\n        return `(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionMatcher.html":{"url":"classes/MethodExpressionMatcher.html","title":"class - MethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/method-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(argumentsMatcher: ArgumentsMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/method-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                argumentsMatcher\n                                                              \n                                                                    \n                                                                                ArgumentsMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: MethodExpression, right: ExpectedMethodExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/method-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                MethodExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedMethodExpression | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {MethodExpression} from '../expressions';\nimport {ExpectedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class MethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: MethodExpression, right: ExpectedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mock.html":{"url":"classes/Mock.html","title":"class - Mock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Mock\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MockCore\n            \n\n\n\n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(name?: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/mock.ts:62\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                name\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        yes\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n\n    \n\n\n    \n        import {IMock, ISetupInvoke, ISetup} from './moq';\nimport {Interceptor} from './interceptor';\nimport {ExpectedExpressionReflector, IExpectedExpression} from './expected-expressions/expected-expression-reflector';\nimport {Tracker} from './tracker';\nimport {DefinedSetups} from './defined-setups';\nimport {Setup} from './setup';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\nimport {Times} from './times';\nimport {Verifier, verifierFactory} from './verifier';\nimport {\n    IInterceptorCallbacks, interceptorCallbacksFactory,\n    MockBehavior\n} from './interceptor-callbacks/interceptor-callbacks';\n\n/**\n * @internal\n * @hidden\n * @private\n */\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n    constructor(\n                private expressionReflector: ExpectedExpressionReflector,\n                private interceptorFactory: (callbacks: IInterceptorCallbacks)=> Interceptor,\n                private setupFactory: (mock: IMock)=> ISetupInvoke,\n                private definedSetups: DefinedSetups,\n                public tracker: Tracker,\n                private verifier: Verifier,\n                private interceptedCallbacks: IInterceptorCallbacks,\n                public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): void {\n        times = times === undefined ? Times.Once() : times;\n        this.verifier.test(expression, times, this.tracker.get(), this.name);\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = new Tracker();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpression.html":{"url":"classes/NamedMethodExpression.html","title":"class - NamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        arguments\n                                    \n                                    \n                                            Public\n                                        name\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(name: string, args: any[])\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:2\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                name\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                args\n                                                              \n                                                                    \n                                                                                any[]\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        arguments\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    arguments:     any[]\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any[]\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:2\n                                        \n                                    \n            \n            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        name\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:4\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionFormatter.html":{"url":"classes/NamedMethodExpressionFormatter.html","title":"class - NamedMethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/named.method-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/named.method-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantFormatter\n                                                              \n                                                                    \n                                                                                ConstantFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: NamedMethodExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/named.method-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                NamedMethodExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {NamedMethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class NamedMethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: NamedMethodExpression): string{\n        const formatted: string[] = [];\n\n        expression.arguments.forEach(arg=>{\n            formatted.push(this.constantFormatter.format(arg));\n        });\n\n        const value = formatted.join(', ');\n        return `${expression.name}(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionMatcher.html":{"url":"classes/NamedMethodExpressionMatcher.html","title":"class - NamedMethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/named.method-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(argumentsMatcher: ArgumentsMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/named.method-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                argumentsMatcher\n                                                              \n                                                                    \n                                                                                ArgumentsMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/named.method-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                NamedMethodExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedNamedMethodExpression | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {NamedMethodExpression} from '../expressions';\nimport {ExpectedNamedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class NamedMethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name)\n            return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpression.html":{"url":"classes/SetPropertyExpression.html","title":"class - SetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        name\n                                    \n                                    \n                                            Public\n                                        value\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(name: string, value: any)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:24\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                name\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                value\n                                                              \n                                                                    \n                                                                                any\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        name\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:25\n                                        \n                                    \n            \n            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        value\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    value:     any\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:26\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionFormatter.html":{"url":"classes/SetPropertyExpressionFormatter.html","title":"class - SetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/set.property-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/set.property-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantFormatter\n                                                              \n                                                                    \n                                                                                ConstantFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: SetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/set.property-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                SetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {SetPropertyExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class SetPropertyExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: SetPropertyExpression): string{\n        const value = this.constantFormatter.format(expression.value);\n        return `Assignment of ${value} to property \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionMatcher.html":{"url":"classes/SetPropertyExpressionMatcher.html","title":"class - SetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/set.property-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(constantMatcher: ConstantMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/set.property-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                constantMatcher\n                                                              \n                                                                    \n                                                                                ConstantMatcher\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        matched\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/set.property-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                left\n                                                                \n                                                                    \n                                                                                SetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                right\n                                                                \n                                                                    \n                                                                                ExpectedSetPropertyExpression | It\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpectedSetPropertyExpression} from '../expected-expressions/expected-expressions';\nimport {SetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class SetPropertyExpressionMatcher{\n\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackedExpressionsFormatter.html":{"url":"classes/TrackedExpressionsFormatter.html","title":"class - TrackedExpressionsFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackedExpressionsFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/tracked-expressions-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(expressionFormatter: ExpressionFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/tracked-expressions-formatter.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expressionFormatter\n                                                              \n                                                                    \n                                                                                ExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(trackedExpressions: Expressions[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/tracked-expressions-formatter.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                trackedExpressions\n                                                                \n                                                                    \n                                                                                Expressions[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\nimport {Expressions} from '../expressions';\n\nexport function trackedExpressionsFormatterFactory (): TrackedExpressionsFormatter {\n    return new TrackedExpressionsFormatter(expressionFormatterFactory());\n}\n\nexport class TrackedExpressionsFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expressions[]): string {\n        let result: string = '';\n        for (const expression of trackedExpressions) {\n            result += `${this.expressionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tracker.html":{"url":"classes/Tracker.html","title":"class - Tracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tracker\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/tracker.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Private\n                                        log\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        add\n                                    \n                                    \n                                            Public\n                                        get\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        add\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/tracker.ts:9\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                action\n                                                                \n                                                                    \n                                                                                MethodExpression | GetPropertyExpression | SetPropertyExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        get\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    get()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/tracker.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     []\n            \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Private\n                                        log\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                    log:     Expressions[]\n            \n                                \n                            \n                                \n                                    \n                                        Type :     Expressions[]\n            \n                                    \n                                \n                                \n                                    \n                                        Default value : []\n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/tracker.ts:7\n                                        \n                                    \n            \n            \n                        \n                    \n            \n\n    \n\n\n    \n        import {\n    Expressions, SetPropertyExpression, GetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from './expressions';\n\nexport class Tracker{\n    private log: Expressions[] = [];\n\n    public add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression): void{\n        this.log.push(action);\n    }\n\n    public get(): Expressions[]{\n        return this.log;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Verifier.html":{"url":"classes/Verifier.html","title":"class - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Verifier\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        test\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(reflector: ExpectedExpressionReflector, callCounter: CallCounter, verifyFormatter: VerifyFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:17\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                reflector\n                                                              \n                                                                    \n                                                                                ExpectedExpressionReflector\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                callCounter\n                                                              \n                                                                    \n                                                                                CallCounter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                verifyFormatter\n                                                              \n                                                                    \n                                                                                VerifyFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        test\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:26\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expected\n                                                                \n                                                                    \n                                                                                IExpectedExpression\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                times\n                                                                \n                                                                    \n                                                                                Times\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                expressions\n                                                                \n                                                                    \n                                                                                Expressions[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                mockName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        yes\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyError.html":{"url":"classes/VerifyError.html","title":"class - VerifyError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyError\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(message: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:7\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                message\n                                                              \n                                                                    \n                                                                                string\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyFormatter.html":{"url":"classes/VerifyFormatter.html","title":"class - VerifyFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/verify-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                            Public\n                                        format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n            constructor(expectedExpressionFormatter: ExpectedExpressionFormatter, trackedExpressionsFormatter: TrackedExpressionsFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/verify-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expectedExpressionFormatter\n                                                              \n                                                                    \n                                                                                ExpectedExpressionFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                            \n                                                                trackedExpressionsFormatter\n                                                              \n                                                                    \n                                                                                TrackedExpressionsFormatter\n                                                                    \n                                                              \n                                                                \n                                                                        no\n                                                                \n                                                                \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                            Public\n                                        format\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n                                        \n                                    format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/verify-formatter.ts:18\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expected\n                                                                \n                                                                    \n                                                                                ExpectedExpressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                timesMessage\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                haveBeenCalledTimes\n                                                                \n                                                                    \n                                                                                number\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                trackedExpressions\n                                                                \n                                                                    \n                                                                                Expressions[]\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                mockName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        yes\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {Expressions} from '../expressions';\nimport {ExpectedExpressionFormatter, expectedExpressionFormatterFactory} from './expected-expression-formatter';\nimport {TrackedExpressionsFormatter, trackedExpressionsFormatterFactory} from './tracked-expressions-formatter';\n\nexport function verifyFormatterFactory(): VerifyFormatter {\n    return new VerifyFormatter(expectedExpressionFormatterFactory(), trackedExpressionsFormatterFactory());\n}\n\nexport class VerifyFormatter {\n\n    constructor(\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string): string {\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\n        const delimiter = '-------------------------------------';\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpectedExpression.html":{"url":"interfaces/IExpectedExpression.html","title":"interface - IExpectedExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpectedExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void | any | It\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:7\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacks.html":{"url":"interfaces/IInterceptorCallbacks.html","title":"interface - IInterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacks\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n            \n                Extends\n            \n            \n                    IInterceptorCallbacksStrategy\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setBehaviorStrategy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                        setBehaviorStrategy\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n            setBehaviorStrategy(behavior: MockBehavior)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:18\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                behavior\n                                                                \n                                                                    \n                                                                                MockBehavior\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacksStrategy.html":{"url":"interfaces/IInterceptorCallbacksStrategy.html","title":"interface - IInterceptorCallbacksStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacksStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasNamedMethod\n                                \n                                \n                                    intercepted\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                        hasNamedMethod\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n            hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:14\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                methodName\n                                                                \n                                                                    \n                                                                                string\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                            \n                                                                prototype\n                                                                \n                                                                    \n                                                                                any\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    \n                                        \n                                        intercepted\n                                        \n                                        \n                                    \n                                \n                            \n                            \n                                \n            intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                                Type\n                                                            Optional\n                                                        \n                                                    \n                                                    \n                                                            \n                                                                expression\n                                                                \n                                                                    \n                                                                                Expressions\n                                                                    \n                                                                \n                                                                \n                                                                        no\n                                                                \n                                                                \n            \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPredicate.html":{"url":"interfaces/IPredicate.html","title":"interface - IPredicate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPredicate\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     boolean\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:1\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Proxy\n                        \n                        \n                            Proxy\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor.ts\n    \n                \n                \n                    \n                        \n                            \n                            \n                                \n                                Proxy\n                                \n                                \n                            \n                        \n                    \n                    \n                        \n                            Proxy:     any\n    \n                        \n                    \n                        \n                            \n                                Type :     any\n    \n                            \n                        \n    \n    \n                \n            \n    \n    lib/expected-expressions/expected-expression-reflector.ts\n    \n                \n                \n                    \n                        \n                            \n                            \n                                \n                                Proxy\n                                \n                                \n                            \n                        \n                    \n                    \n                        \n                            Proxy:     any\n    \n                        \n                    \n                        \n                            \n                                Type :     any\n    \n                            \n                        \n    \n    \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpectedExpressions\n                        \n                        \n                            Expressions\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expected-expressions/expected-expressions.ts\n    \n            \n                \n                    \n                        \n                            \n                            ExpectedExpressions\n                        \n                    \n                    \n                        \n                            ExpectedExpressions:     ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It\n    \n                        \n                    \n                \n            \n    \n    lib/expressions.ts\n    \n            \n                \n                    \n                        \n                            \n                            Expressions\n                        \n                    \n                    \n                        \n                            Expressions:     MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression\n    \n                        \n                    \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockBehavior\n                        \n                        \n                            Range\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n            \n                \n                    \n                        \n                            \n                            MockBehavior\n                        \n                    \n                            \n                                \n                                     Strict\n                                \n                            \n                            \n                                \n                                     Loose\n                                \n                            \n                \n            \n    \n    lib/times.ts\n    \n            \n                \n                    \n                        \n                            \n                            Range\n                        \n                    \n                            \n                                \n                                     Exclusive\n                                \n                            \n                            \n                                \n                                     Inclusive\n                                \n                            \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
