var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.1.6","fields":["title","body"],"fieldVectors":[["title/classes/ArgumentsMatcher.html",[0,0.328,1,2.457]],["body/classes/ArgumentsMatcher.html",[0,0.457,1,3.429,2,0.196,3,0.196,4,0.196,5,2.859,6,5.659,7,1.997,8,0.134,9,0.613,10,0.301,11,0.019,12,0.668,13,3.153,14,4.483,15,0.231,16,3.691,17,0.488,18,0.021,19,0.3,20,0.231,21,0.41,22,2.701,23,3.28,24,3.691,25,2.701,26,0.642,27,1.579,28,0.528,29,1.105,30,1.547,31,1.047,32,2.148,33,1.997,34,0.196,35,0.939,36,2.799,37,1.89,38,3.691,39,3.691,40,1.579,41,3.691,42,0.52,43,4.993,44,3.691,45,3.691,46,0.014]],["title/classes/CallCounter.html",[0,0.328,47,2.457]],["body/classes/CallCounter.html",[0,0.453,2,0.193,3,0.193,4,0.193,8,0.098,9,0.608,10,0.299,11,0.014,12,0.659,15,0.229,17,0.483,18,0.021,19,0.297,20,0.229,21,0.406,26,0.595,28,0.638,29,1.682,33,1.97,34,0.263,35,0.926,37,1.216,42,0.513,46,0.014,47,3.858,48,4.8,49,3.11,50,5.385,51,3.11,52,4.465,53,3.641,54,4.947,55,2.383,56,0.529,57,3.641,58,2.676,59,0.978,60,2.761,61,3.11,62,3.641,63,2.761,64,3.11,65,2.761,66,1.09,67,2.5,68,0.978,69,3.641]],["title/classes/ConstantFormatter.html",[0,0.328,70,2.082]],["body/classes/ConstantFormatter.html",[0,0.487,2,0.216,3,0.216,4,0.216,8,0.143,9,0.653,10,0.315,11,0.015,15,0.188,17,0.396,18,0.021,19,0.244,20,0.188,21,0.333,26,0.692,28,0.429,29,1.215,30,1.7,31,1.15,34,0.216,36,3.077,42,0.75,46,0.015,70,3.094,71,5.317,72,1.806,73,2.367,74,5.317,75,3.466,76,4.761,77,1.209,78,1.981,79,4.057,80,4.057,81,4.057,82,4.057,83,5.317,84,4.057,85,4.057]],["title/classes/ConstantMatcher.html",[0,0.328,14,2.457]],["body/classes/ConstantMatcher.html",[0,0.511,2,0.232,3,0.232,4,0.232,5,2.821,7,2.366,8,0.118,9,0.686,10,0.327,11,0.019,14,3.833,15,0.203,17,0.427,18,0.021,19,0.263,20,0.203,21,0.359,22,3.02,23,3.702,25,3.02,26,0.651,27,1.765,28,0.463,29,1.309,30,1.833,31,1.24,34,0.232,36,3.317,46,0.016,78,1.461,86,5.582,87,4.374,88,2.753]],["title/classes/DefinedSetups.html",[0,0.328,89,1.808]],["body/classes/DefinedSetups.html",[0,0.376,2,0.148,3,0.148,4,0.148,8,0.075,9,0.504,10,0.343,11,0.012,12,0.505,15,0.264,17,0.523,18,0.021,19,0.358,20,0.264,21,0.439,26,0.652,27,1.296,28,0.567,29,0.836,33,1.51,34,0.148,35,0.71,37,1.369,40,0.882,42,0.578,46,0.012,51,2.384,52,4.094,55,2.254,56,0.471,59,0.749,60,2.117,64,2.384,77,0.933,78,0.932,89,2.071,90,5.962,91,2.791,92,1.101,93,1.536,94,3.194,95,3.502,96,2.58,97,4.099,98,1.624,99,1.454,100,4.099,101,6.162,102,2.791,103,5.962,104,1.824,105,4.099,106,2.791,107,4.099,108,2.791,109,1.718,110,2.384,111,2.791,112,4.099,113,2.791,114,1.042,115,2.791]],["title/classes/ExpectedExpressionFormatter.html",[0,0.328,116,2.713]],["body/classes/ExpectedExpressionFormatter.html",[0,0.437,2,0.183,3,0.183,4,0.183,8,0.093,9,0.586,10,0.29,11,0.014,12,0.625,15,0.221,17,0.466,18,0.021,19,0.287,20,0.221,21,0.391,26,0.578,28,0.578,29,1.428,34,0.253,35,0.878,42,0.672,46,0.014,55,2.33,56,0.461,58,2.957,59,0.927,66,1.033,68,0.927,72,1.536,73,2.123,77,1.283,114,1.289,116,4.144,117,4.669,118,2.949,119,4.393,120,2.949,121,4.075,122,4.669,123,5.036,124,3.894,125,2.949,126,2.37,127,1.635,128,2.618,129,2.949,130,2.618,131,3.452,132,3.452,133,3.452,134,3.452,135,3.452,136,3.452,137,2.173,138,3.452]],["title/classes/ExpectedExpressionReflector.html",[0,0.328,139,2.252]],["body/classes/ExpectedExpressionReflector.html",[0,0.392,2,0.157,3,0.157,4,0.157,8,0.08,9,0.526,10,0.267,11,0.012,15,0.233,17,0.289,18,0.021,19,0.302,20,0.137,21,0.412,26,0.644,28,0.453,29,0.887,31,1.561,34,0.227,37,0.989,42,0.709,46,0.012,55,1.987,56,0.468,59,1.478,68,1.568,78,0.989,92,1.149,93,1.924,99,1.282,104,1.318,109,1.241,114,1.106,139,2.694,140,2.45,141,2.246,142,4.704,143,4.704,144,4.28,145,2.962,146,2.962,147,3.657,148,3.466,149,2.962,150,1.241,151,1.241,152,1.318,153,1.106,154,1.723,155,1.864,156,2.246,157,2.246,158,2.53,159,3.812,160,5.2,161,2.53,162,2.38,163,2.53,164,2.034,165,2.53,166,2.246,167,2.246,168,2.53,169,2.246,170,1.864,171,2.53,172,2.53]],["title/classes/ExpectedGetPropertyExpression.html",[0,0.328,150,1.499]],["body/classes/ExpectedGetPropertyExpression.html",[0,0.6,2,0.217,3,0.217,4,0.217,8,0.11,10,0.284,11,0.015,15,0.189,18,0.021,19,0.358,20,0.248,28,0.566,31,1.159,34,0.348,46,0.015,55,1.616,56,0.398,59,1.098,77,1.026,92,1.435,109,2.24,140,1.819,150,2.495,151,2.24,152,2.379,173,2.573,174,3.103,175,1.89,176,2.807,177,4.088,178,1.515,179,1.515,180,1.6]],["title/classes/ExpectedMethodExpression.html",[0,0.328,152,1.592]],["body/classes/ExpectedMethodExpression.html",[0,0.602,2,0.219,3,0.219,4,0.219,8,0.111,10,0.285,11,0.015,15,0.191,18,0.021,20,0.249,28,0.568,31,1.168,34,0.349,46,0.015,55,1.629,56,0.4,59,1.106,92,1.442,109,2.251,140,1.834,150,2.251,151,2.251,152,2.66,173,2.593,174,3.111,175,1.608,176,2.829,178,1.523,179,1.796,180,1.608,181,2.83,182,4.12]],["title/classes/ExpectedNamedMethodExpression.html",[0,0.328,109,1.499]],["body/classes/ExpectedNamedMethodExpression.html",[0,0.592,2,0.208,3,0.208,4,0.208,8,0.105,10,0.33,11,0.015,15,0.241,18,0.021,19,0.351,20,0.27,28,0.55,31,1.112,34,0.344,46,0.015,55,1.551,56,0.388,59,1.053,77,0.999,92,1.397,109,2.445,140,1.746,150,2.18,151,2.18,152,2.315,173,2.469,174,3.062,175,1.557,176,3.571,178,1.475,179,1.475,180,1.935,181,2.763,183,3.922,184,3.922]],["title/classes/ExpectedSetPropertyExpression.html",[0,0.328,151,1.499]],["body/classes/ExpectedSetPropertyExpression.html",[0,0.592,2,0.208,3,0.208,4,0.208,8,0.105,10,0.33,11,0.015,15,0.241,18,0.021,19,0.351,20,0.27,28,0.55,31,1.112,34,0.344,46,0.015,55,1.551,56,0.388,59,1.053,77,0.999,92,1.397,99,1.747,109,2.18,140,1.746,150,2.18,151,2.445,152,2.315,173,2.469,174,3.062,175,1.557,176,3.571,178,1.833,179,1.475,180,1.557,185,3.922,186,3.922]],["title/classes/ExpressionFormatter.html",[0,0.328,119,2.457]],["body/classes/ExpressionFormatter.html",[0,0.415,2,0.17,3,0.17,4,0.17,8,0.086,9,0.645,10,0.279,11,0.013,12,0.58,15,0.21,17,0.442,18,0.02,19,0.272,20,0.21,21,0.371,26,0.68,28,0.68,29,0.959,30,1.342,31,0.908,32,1.863,34,0.17,35,0.814,46,0.013,56,0.504,70,3.736,72,1.425,73,2.014,77,0.869,78,2.01,93,1.804,114,1.196,119,3.108,127,2.85,175,1.355,178,1.283,179,1.283,180,1.355,187,5.249,188,3.203,189,4.327,190,5.249,191,4.327,192,5.249,193,4.327,194,5.249,195,4.327,196,3.203,197,4.526,198,2.849,199,3.203,200,2.736,201,2.736,202,2.736,203,3.203,204,3.203,205,3.203,206,3.203,207,3.203,208,3.203]],["title/classes/ExpressionMatcher.html",[0,0.328,52,2.457]],["body/classes/ExpressionMatcher.html",[0,0.378,2,0.15,3,0.15,4,0.15,5,2.47,7,1.526,8,0.076,9,0.6,10,0.26,11,0.015,12,0.511,15,0.191,17,0.403,18,0.021,19,0.248,20,0.191,21,0.339,22,2.235,23,3.787,25,3.238,26,0.671,27,1.306,28,0.654,29,1.237,30,1.182,31,0.8,33,2.911,34,0.15,35,0.717,37,1.38,40,0.892,46,0.012,52,2.837,55,2.127,56,0.446,59,0.757,60,3.707,78,2.251,93,1.545,109,1.731,114,1.053,150,1.731,151,1.731,152,1.839,175,1.237,178,1.171,179,1.171,180,1.237,200,2.41,201,2.41,202,2.41,209,2.821,210,4.538,211,4.688,212,4.688,213,4.688,214,2.821,215,2.821,216,2.821,217,2.821,218,2.821,219,2.821]],["title/classes/GetPropertyExpression.html",[0,0.328,175,1.071]],["body/classes/GetPropertyExpression.html",[0,0.587,2,0.202,3,0.202,4,0.202,8,0.102,10,0.34,11,0.015,12,0.69,15,0.236,17,0.372,18,0.021,19,0.411,20,0.267,21,0.313,34,0.34,46,0.015,56,0.284,77,1.292,92,1.37,99,1.141,162,2.723,175,1.722,178,1.446,179,1.446,180,1.527,181,2.416,220,2.398,221,2.889,222,3.81,223,3.81,224,3.346,225,3.503,226,2.616]],["title/classes/GetPropertyExpressionFormatter.html",[0,0.328,189,2.713]],["body/classes/GetPropertyExpressionFormatter.html",[0,0.531,2,0.247,3,0.247,4,0.247,8,0.125,9,0.712,10,0.336,11,0.017,15,0.215,17,0.453,18,0.02,19,0.279,20,0.215,21,0.381,26,0.613,28,0.491,34,0.247,46,0.017,56,0.432,72,2.065,73,2.579,75,3.965,77,1.113,175,1.981,189,4.395,198,3.648,227,5.795,228,4.641,229,3.519]],["title/classes/GetPropertyExpressionMatcher.html",[0,0.328,210,2.713]],["body/classes/GetPropertyExpressionMatcher.html",[0,0.487,2,0.216,3,0.216,4,0.216,5,2.687,7,2.195,8,0.109,9,0.653,10,0.315,11,0.018,15,0.188,17,0.396,18,0.02,19,0.244,20,0.188,21,0.333,22,2.877,23,3.628,25,2.195,26,0.666,27,1.681,28,0.628,29,1.592,30,1.7,31,1.15,34,0.216,37,1.355,40,1.283,42,0.572,46,0.015,56,0.396,59,1.089,78,1.355,88,2.554,150,2.639,175,1.885,210,4.033,230,5.317,231,4.057,232,4.057,233,2.786,234,3.077,235,3.077]],["title/interfaces/IExpectedExpression.html",[148,2.252,153,1.336]],["body/interfaces/IExpectedExpression.html",[0,0.295,2,0.171,3,0.171,4,0.171,8,0.087,10,0.171,11,0.013,15,0.149,18,0.021,19,0.273,21,0.373,26,0.638,28,0.481,29,0.965,31,1.622,34,0.242,37,1.076,42,0.742,46,0.013,55,1.797,56,0.426,59,1.221,68,1.62,78,1.076,92,1.414,93,1.437,99,1.361,104,2.023,109,1.35,114,1.203,139,2.028,140,2.023,141,2.443,142,2.753,143,2.753,147,2.753,148,3.315,150,1.35,151,1.35,152,1.434,153,1.697,154,2.645,155,2.861,156,2.443,157,2.443,158,2.753,159,3.994,160,5.348,161,2.753,162,2.494,163,2.753,164,2.212,165,2.753,166,2.443,167,2.443,168,2.753,169,2.443,170,2.028,171,2.753,172,2.753,236,2.753,237,2.753,238,3.222]],["title/interfaces/IInterceptorCallbacks.html",[153,1.336,239,2.457]],["body/interfaces/IInterceptorCallbacks.html",[0,0.285,2,0.165,3,0.165,4,0.165,8,0.084,9,0.544,10,0.274,11,0.013,15,0.205,17,0.304,18,0.021,19,0.187,20,0.144,21,0.255,26,0.596,27,1.401,28,0.63,34,0.316,35,0.791,42,0.625,46,0.013,56,0.42,66,0.931,68,1.387,77,0.851,89,2.24,93,1.401,94,1.571,104,2.298,153,1.928,174,2.099,239,3.546,240,2.398,241,2.24,242,1.957,243,3.347,244,3.786,245,3.917,246,4.087,247,3.109,248,3.546,249,1.957,250,2.398,251,2.358,252,3.126,253,1.957,254,2.358,255,2.358,256,1.809,257,1.957,258,2.79,259,2.79,260,2.61,261,2.135,262,2.79,263,3.917,264,2.358,265,3.917,266,2.358,267,2.358,268,1.809,269,2.358,270,3.917,271,2.358,272,2.358,273,2.135,274,2.358,275,2.358,276,2.358]],["title/interfaces/IInterceptorCallbacksStrategy.html",[153,1.336,243,1.936]],["body/interfaces/IInterceptorCallbacksStrategy.html",[0,0.271,2,0.157,3,0.157,4,0.157,8,0.08,9,0.526,10,0.267,11,0.012,15,0.233,17,0.418,18,0.021,19,0.257,20,0.198,21,0.351,26,0.618,27,1.589,28,0.618,34,0.31,35,0.753,42,0.603,46,0.012,56,0.468,66,0.887,68,1.35,77,1.057,89,2.163,93,1.353,94,1.497,96,2.694,104,1.905,153,1.877,174,1.403,239,2.939,240,2.719,241,2.54,242,1.864,243,3.293,245,3.246,246,3.451,248,2.939,249,1.864,250,2.316,251,2.246,252,3.076,253,1.864,254,2.246,255,2.246,256,1.723,257,1.864,258,3.164,259,3.164,260,2.951,261,2.034,262,2.694,263,3.812,264,2.246,265,3.812,266,2.246,267,2.246,268,1.723,269,2.246,270,3.812,271,2.246,272,2.246,273,2.034,274,2.246,275,2.246,276,2.246,277,2.939,278,2.962,279,2.034,280,2.962]],["title/interfaces/IPredicate.html",[153,1.336,281,2.713]],["body/interfaces/IPredicate.html",[0,0.357,2,0.207,3,0.207,4,0.207,8,0.105,10,0.309,11,0.015,15,0.18,18,0.021,26,0.682,27,1.838,30,2.169,31,1.104,34,0.275,37,1.729,40,1.231,42,0.549,46,0.018,68,1.39,92,1.561,114,1.454,140,2.303,153,1.932,154,3.011,155,3.659,224,2.265,236,3.326,237,3.326,281,4.698,282,3.326,283,3.894,284,3.925,285,3.326,286,3.326,287,3.326,288,3.326,289,3.326,290,3.326,291,3.326,292,3.326]],["title/classes/Interceptor.html",[0,0.328,250,1.936]],["body/classes/Interceptor.html",[0,0.317,2,0.119,3,0.119,4,0.119,8,0.06,9,0.426,10,0.291,11,0.01,12,0.405,15,0.265,17,0.338,18,0.021,19,0.287,20,0.24,21,0.392,26,0.702,28,0.367,34,0.119,35,0.568,37,1.597,40,0.706,42,0.805,46,0.01,56,0.316,66,0.669,68,1.39,76,3.76,92,0.931,93,2.025,98,1.3,99,1.432,114,1.933,126,1.534,155,3.596,156,1.695,157,1.695,159,3.925,162,2.01,164,1.534,166,1.695,167,1.695,169,1.695,170,1.407,175,1.037,178,0.634,179,0.634,180,1.037,241,1.129,243,2.587,250,2.296,260,2.767,262,2.181,293,1.909,294,4.782,295,4.782,296,4.782,297,4.782,298,2.628,299,2.234,300,3.465,301,2.234,302,2.234,303,2.234,304,2.234,305,3.465,306,2.234,307,1.534,308,5.476,309,4.245,310,2.234,311,2.234,312,3.465,313,2.234,314,2.234,315,3.465,316,2.234,317,2.234,318,2.234,319,2.234,320,5.176,321,3.465,322,2.234,323,2.234,324,2.96,325,2.234,326,2.234]],["title/classes/InterceptorCallbacks.html",[0,0.328,262,2.252]],["body/classes/InterceptorCallbacks.html",[0,0.351,2,0.135,3,0.135,4,0.135,8,0.068,9,0.47,10,0.334,11,0.011,12,0.461,15,0.267,17,0.5,18,0.021,19,0.307,20,0.254,21,0.42,26,0.61,27,1.454,28,0.58,34,0.291,35,0.647,42,0.539,46,0.011,56,0.446,66,0.762,68,1.235,77,0.982,89,1.934,92,1.028,93,1.617,94,1.286,96,2.409,104,2.047,153,1.429,174,1.205,239,3.158,240,3.118,241,2.912,242,1.602,243,3.523,244,3.269,245,3.488,246,3.767,248,3.158,249,1.602,250,2.07,251,1.929,252,2.912,253,1.602,254,1.929,255,1.929,256,1.48,257,1.602,258,2.895,259,2.895,260,2.772,261,1.747,262,2.895,263,3.879,264,1.929,265,4.16,266,1.929,267,1.929,268,2.226,269,3.879,270,3.488,271,1.929,272,1.929,273,1.747,274,1.929,275,1.929,276,1.929,277,2.628,279,1.747,327,2.544,328,3.826,329,2.544,330,2.544,331,2.544]],["title/classes/InterceptorCallbacksLooseStrategy.html",[0,0.328,253,2.252]],["body/classes/InterceptorCallbacksLooseStrategy.html",[0,0.399,2,0.161,3,0.161,4,0.161,8,0.082,9,0.536,10,0.326,11,0.012,12,0.55,15,0.258,17,0.498,18,0.021,19,0.306,20,0.236,21,0.418,26,0.685,27,1.378,28,0.589,34,0.161,35,0.772,37,1.015,40,0.961,42,0.719,46,0.012,56,0.491,68,0.816,77,0.979,78,1.703,89,3.102,93,0.961,94,2.981,96,2.744,114,1.904,175,1.305,178,1.236,179,1.236,180,1.305,240,3.014,241,2.815,243,2.758,250,1.644,252,3.269,253,2.744,258,2.744,259,2.744,260,2.576,268,2.536,277,2.994,279,2.086,307,2.086,332,3.038,333,2.595,334,3.038,335,3.038,336,3.038,337,2.595,338,2.595,339,3.724,340,2.595,341,2.595,342,3.038,343,3.038]],["title/classes/InterceptorCallbacksStrictStrategy.html",[0,0.328,249,2.252]],["body/classes/InterceptorCallbacksStrictStrategy.html",[0,0.399,2,0.161,3,0.161,4,0.161,8,0.082,9,0.536,10,0.326,11,0.012,12,0.55,15,0.258,17,0.498,18,0.021,19,0.306,20,0.236,21,0.418,26,0.707,27,1.378,28,0.589,34,0.161,35,0.772,37,1.703,40,0.961,42,0.615,46,0.012,56,0.491,66,0.91,77,0.979,78,1.861,89,3.102,93,0.961,94,2.576,96,3.507,114,1.628,178,1.236,179,1.236,180,1.305,240,3.014,241,2.815,243,2.758,249,2.744,250,1.644,252,3.269,258,2.744,259,2.744,260,2.815,268,2.536,277,2.994,279,2.086,307,2.086,324,2.595,333,2.595,337,2.595,338,2.595,339,3.724,340,2.595,341,2.595,344,3.038,345,3.038,346,3.038,347,3.038,348,3.038,349,3.038]],["title/classes/It.html",[0,0.409]],["body/classes/It.html",[0,0.409,2,0.167,3,0.167,4,0.167,8,0.085,9,0.549,10,0.339,11,0.013,12,0.57,15,0.277,17,0.508,18,0.021,19,0.312,20,0.262,21,0.426,26,0.676,27,1.643,30,2.603,31,1.761,34,0.237,37,1.493,40,0.995,42,0.443,46,0.017,68,1.2,92,1.2,114,1.175,140,2.764,153,1.175,154,2.6,155,3.563,224,1.83,281,5.037,282,2.687,284,4.71,285,3.818,286,2.687,287,4.835,288,3.818,289,2.687,290,2.687,291,2.687,292,2.687,350,3.389,351,3.146,352,3.146,353,3.146,354,3.146,355,3.146,356,3.146]],["title/classes/MethodExpression.html",[0,0.328,179,1.014]],["body/classes/MethodExpression.html",[0,0.589,2,0.205,3,0.205,4,0.205,8,0.104,10,0.342,11,0.015,12,0.7,15,0.239,17,0.378,18,0.021,19,0.371,20,0.268,21,0.317,34,0.342,46,0.015,56,0.288,77,1.112,92,1.383,99,1.157,162,2.925,175,1.542,178,1.46,179,1.642,180,1.542,181,3.047,220,2.433,224,3.37,225,3.537,226,3.537,357,5.15]],["title/classes/MethodExpressionFormatter.html",[0,0.328,193,2.713]],["body/classes/MethodExpressionFormatter.html",[0,0.498,2,0.223,3,0.223,4,0.223,8,0.113,9,0.668,10,0.321,11,0.016,12,0.761,15,0.252,17,0.531,18,0.02,19,0.327,20,0.252,21,0.446,26,0.576,28,0.576,32,2.444,34,0.223,35,1.068,42,0.592,46,0.016,56,0.405,70,3.939,72,1.87,73,2.421,77,1.045,99,1.629,127,1.99,179,1.809,193,4.125,198,3.424,358,6.033,359,3.186,360,3.186,361,2.885,362,4.201]],["title/classes/MethodExpressionMatcher.html",[0,0.328,212,2.713]],["body/classes/MethodExpressionMatcher.html",[0,0.466,1,4.52,2,0.202,3,0.202,4,0.202,5,2.901,7,2.054,8,0.102,9,0.625,10,0.305,11,0.018,12,0.687,15,0.236,17,0.497,18,0.02,19,0.306,20,0.236,21,0.417,22,2.753,23,3.561,25,2.054,26,0.607,27,1.609,28,0.649,29,1.523,30,1.591,31,1.076,33,2.054,34,0.202,35,0.965,42,0.535,46,0.015,56,0.379,59,1.019,78,1.268,88,2.39,152,2.729,179,1.739,181,1.798,212,3.859,233,2.607,363,5.74,364,3.243,365,2.879,366,2.879,367,3.797,368,3.243,369,3.243]],["title/classes/NamedMethodExpression.html",[0,0.328,180,1.071]],["body/classes/NamedMethodExpression.html",[0,0.579,2,0.195,3,0.195,4,0.195,8,0.099,10,0.354,11,0.014,12,0.664,15,0.261,17,0.358,18,0.021,19,0.407,20,0.28,21,0.301,34,0.336,46,0.014,56,0.273,77,1.279,92,1.335,99,1.097,162,2.993,175,1.488,178,1.409,179,1.409,180,1.688,181,2.993,220,2.307,221,2.78,224,3.281,225,3.413,226,2.517,370,4.97,371,3.666]],["title/classes/NamedMethodExpressionFormatter.html",[0,0.328,195,2.713]],["body/classes/NamedMethodExpressionFormatter.html",[0,0.487,2,0.216,3,0.216,4,0.216,8,0.109,9,0.653,10,0.315,11,0.015,12,0.735,15,0.246,17,0.519,18,0.021,19,0.32,20,0.246,21,0.436,26,0.563,28,0.563,32,2.36,34,0.216,35,1.032,42,0.75,46,0.015,56,0.396,70,3.902,72,1.806,73,2.64,77,1.139,99,1.215,127,1.921,180,1.885,195,4.033,198,3.347,359,3.077,360,3.077,361,2.786,372,5.932,373,4.057,374,4.057,375,4.057,376,4.057]],["title/classes/NamedMethodExpressionMatcher.html",[0,0.328,213,2.713]],["body/classes/NamedMethodExpressionMatcher.html",[0,0.461,1,4.497,2,0.198,3,0.198,4,0.198,5,2.875,7,2.018,8,0.1,9,0.618,10,0.302,11,0.017,12,0.675,15,0.233,17,0.491,18,0.02,19,0.302,20,0.233,21,0.413,22,2.721,23,3.543,25,2.018,26,0.644,27,1.59,28,0.644,29,1.506,30,1.563,31,1.058,33,2.018,34,0.198,35,0.948,40,1.179,42,0.526,46,0.014,56,0.375,59,1.002,78,1.246,88,2.348,109,2.552,180,1.823,181,1.767,213,3.814,233,2.561,234,2.829,235,2.829,364,3.187,365,2.829,366,2.829,368,3.187,369,3.187,377,5.689,378,3.73]],["title/classes/PlayTimes.html",[0,0.328,379,3.056]],["body/classes/PlayTimes.html",[0,0.404,2,0.164,3,0.164,4,0.164,8,0.138,9,0.541,10,0.298,11,0.013,15,0.26,17,0.43,18,0.021,19,0.265,20,0.204,21,0.361,26,0.732,27,2.146,34,0.164,37,1.717,40,1.773,42,0.434,46,0.013,50,3.763,58,2.781,63,3.34,99,1.319,284,5.199,379,3.763,380,5.931,381,3.082,382,4.404,383,5.607,384,5.607,385,4.391,386,4.404,387,3.082,388,3.082,389,3.082,390,4.404,391,3.082,392,5.139,393,4.391,394,3.082]],["title/classes/SequenceId.html",[0,0.328,395,2.457]],["body/classes/SequenceId.html",[0,0.497,2,0.222,3,0.222,4,0.222,8,0.113,9,0.667,10,0.32,11,0.016,15,0.251,18,0.021,20,0.194,26,0.637,34,0.288,42,0.59,46,0.016,58,3.571,63,4.115,66,1.253,68,1.124,92,1.457,93,1.904,98,2.435,99,1.976,154,3.157,395,4.375,396,4.566,397,3.173,398,6.371,399,4.185,400,4.185,401,4.185,402,3.173]],["title/classes/SetPropertyExpression.html",[0,0.328,178,1.014]],["body/classes/SetPropertyExpression.html",[0,0.579,2,0.195,3,0.195,4,0.195,8,0.099,10,0.354,11,0.014,12,0.664,15,0.261,17,0.358,18,0.021,19,0.407,20,0.28,21,0.301,34,0.336,46,0.014,56,0.273,77,1.279,92,1.335,99,1.951,162,2.67,175,1.488,178,1.599,179,1.409,180,1.488,181,2.354,220,2.307,221,2.78,224,3.281,225,3.413,226,2.517,403,3.666,404,3.666,405,3.666]],["title/classes/SetPropertyExpressionFormatter.html",[0,0.328,191,2.713]],["body/classes/SetPropertyExpressionFormatter.html",[0,0.495,2,0.221,3,0.221,4,0.221,8,0.112,9,0.663,10,0.319,11,0.015,12,0.752,15,0.25,17,0.527,18,0.02,19,0.324,20,0.25,21,0.443,26,0.571,28,0.571,32,2.416,34,0.221,35,1.056,42,0.585,46,0.015,56,0.402,70,3.927,72,1.848,73,2.403,77,1.037,92,1.115,99,1.616,127,1.966,178,1.801,191,4.094,198,3.398,229,3.149,359,3.149,360,3.149,361,2.851,406,5.999,407,4.152,408,4.152]],["title/classes/SetPropertyExpressionMatcher.html",[0,0.328,211,2.713]],["body/classes/SetPropertyExpressionMatcher.html",[0,0.459,2,0.197,3,0.197,4,0.197,5,2.864,7,2.004,8,0.1,9,0.615,10,0.301,11,0.017,12,0.671,13,3.164,14,4.488,15,0.232,17,0.489,18,0.02,19,0.301,20,0.232,21,0.411,22,2.708,23,3.536,25,2.004,26,0.642,27,1.582,28,0.642,29,1.498,30,1.552,31,1.05,32,2.155,33,2.004,34,0.197,35,0.942,37,1.237,40,1.171,42,0.522,46,0.014,56,0.373,59,0.995,78,1.237,88,2.332,151,2.545,178,1.721,211,3.796,233,2.544,234,2.809,235,2.809,365,2.809,366,2.809,409,5.669,410,3.704,411,3.704,412,3.704]],["title/classes/TrackedExpressionsFormatter.html",[0,0.328,413,2.713]],["body/classes/TrackedExpressionsFormatter.html",[0,0.464,2,0.2,3,0.2,4,0.2,8,0.101,9,0.622,10,0.304,11,0.015,12,0.683,15,0.235,17,0.495,18,0.021,19,0.304,20,0.235,21,0.415,26,0.605,28,0.605,34,0.269,35,0.958,42,0.531,46,0.018,56,0.521,65,2.859,66,1.129,68,1.012,72,1.678,73,2.254,77,1.098,118,3.22,119,4.511,120,3.22,125,3.22,127,1.785,128,2.859,129,3.22,413,4.337,414,4.886,415,5.064,416,4.327,417,2.859,418,3.77,419,3.77,420,3.77,421,3.77]],["title/classes/Tracker.html",[0,0.328,252,1.808]],["body/classes/Tracker.html",[0,0.415,2,0.17,3,0.17,4,0.17,8,0.086,9,0.556,10,0.332,11,0.013,12,0.58,15,0.264,17,0.442,18,0.021,19,0.272,20,0.264,21,0.371,26,0.604,28,0.479,34,0.279,35,0.814,42,0.451,46,0.013,56,0.391,58,1.733,66,0.959,68,0.86,92,1.215,93,1.66,95,3.867,98,1.863,99,0.959,104,2.014,175,1.802,178,1.707,179,1.707,252,2.653,385,2.736,395,4.29,402,2.429,422,2.429,423,5.705,424,3.203,425,4.526,426,5.142,427,4.526,428,3.203,429,4.526,430,3.203,431,5.249,432,3.203,433,3.203,434,3.203,435,3.203,436,2.736,437,3.203]],["title/classes/Verifier.html",[0,0.328,438,2.252]],["body/classes/Verifier.html",[0,0.47,2,0.163,3,0.163,4,0.163,8,0.083,9,0.54,10,0.273,11,0.013,12,0.796,15,0.204,17,0.429,18,0.021,19,0.264,20,0.204,21,0.361,26,0.465,28,0.627,29,1.316,34,0.273,40,0.972,42,0.789,46,0.013,47,4.536,56,0.511,59,0.825,66,0.92,67,3.018,68,1.18,77,1.075,93,1.622,104,1.956,124,3.525,126,2.11,127,1.455,137,1.934,139,3.729,148,3.525,174,1.455,350,3.333,438,3.23,439,2.331,440,3.073,441,4.357,442,3.073,443,4.384,444,3.755,445,4.921,446,3.073,447,2.625,448,3.018,449,2.625,450,2.331,451,2.625,452,2.625,453,2.625,454,2.331,455,2.625,456,2.625,457,2.625,458,3.755,459,2.625,460,2.625,461,2.625,462,2.625,463,2.331,464,2.625]],["title/classes/VerifyError.html",[0,0.328,450,2.713]],["body/classes/VerifyError.html",[0,0.502,2,0.185,3,0.185,4,0.185,10,0.185,11,0.014,12,0.867,15,0.161,17,0.339,18,0.021,19,0.209,20,0.161,21,0.285,26,0.368,28,0.656,29,1.04,34,0.291,40,1.098,42,0.833,46,0.014,47,4.258,56,0.499,59,0.933,66,1.04,67,3.29,68,1.287,77,1.135,93,1.734,104,1.546,124,3.016,127,1.645,137,2.187,139,3.452,148,3.016,174,2.269,438,3.016,439,2.635,441,3.766,443,4.093,444,2.968,445,4.483,447,2.968,448,3.29,449,2.968,450,3.633,451,4.093,452,4.093,453,2.968,454,2.635,455,2.968,456,2.968,457,2.968,458,4.093,459,2.968,460,4.093,461,2.968,462,2.968,463,2.635,464,2.968,465,3.474]],["title/classes/VerifyFormatter.html",[0,0.328,441,2.457]],["body/classes/VerifyFormatter.html",[0,0.421,2,0.174,3,0.174,4,0.174,8,0.088,9,0.564,10,0.282,11,0.013,12,0.832,15,0.213,17,0.449,18,0.021,19,0.276,20,0.213,21,0.377,26,0.562,28,0.609,29,1.59,34,0.244,42,0.749,46,0.013,55,2.277,56,0.492,58,2.873,59,0.878,66,0.979,68,0.878,72,1.456,73,2.045,77,1.266,93,1.453,116,4.771,121,3.925,122,4.92,123,4.92,124,3.625,126,2.246,127,2.176,130,2.481,361,2.246,413,4.9,416,4.537,417,3.484,441,3.647,448,2.246,466,4.537,467,3.271,468,3.271,469,2.481,470,3.271,471,3.271,472,3.271,473,3.271,474,3.271,475,3.271,476,3.271,477,3.271]],["title/changelog.html",[478,2.55,479,2.264,480,2.985]],["body/changelog.html",[9,0.533,11,0.016,18,0.016,31,1.23,40,1.372,46,0.016,56,0.323,66,1.663,76,2.979,78,1.449,94,2.806,137,2.731,256,2.524,257,2.731,260,2.806,298,3.29,393,3.706,438,2.731,469,3.29,481,4.338,482,5.517,483,4.338,484,6.458,485,4.338,486,4.338,487,4.338,488,4.338,489,4.338,490,3.706,491,3.706,492,3.706,493,3.706,494,3.706,495,3.706,496,4.338,497,3.706,498,4.338,499,3.706,500,4.338,501,3.706,502,4.338,503,4.338,504,4.338,505,4.338,506,4.338,507,4.338,508,4.338,509,4.338,510,4.338,511,4.338,512,4.338,513,4.338,514,3.706,515,4.338]],["title/miscellaneous/enumerations.html",[516,1.508,517,3.677]],["body/miscellaneous/enumerations.html",[8,0.141,11,0.018,18,0.018,46,0.018,240,2.832,241,2.645,242,3.926,246,4.283,256,3.045,257,3.295,516,2.645,517,4.471,518,4.471,519,6.237,520,5.234,521,5.234,522,5.234,523,5.234]],["title/miscellaneous/functions.html",[66,1.289,516,1.508]],["body/miscellaneous/functions.html",[5,1.739,8,0.093,11,0.014,17,0.465,18,0.017,19,0.286,21,0.39,46,0.014,48,2.939,49,4.066,56,0.439,61,4.661,66,1.03,67,3.746,72,2.845,73,2.118,89,1.739,114,2.198,117,2.939,128,4.137,130,4.137,162,2.254,240,1.861,241,1.739,242,2.996,252,2.405,261,2.363,396,2.609,397,3.609,402,4.137,414,2.939,417,4.137,422,2.609,436,4.661,439,2.609,448,3.746,454,4.137,466,2.939,516,1.739,518,2.939,524,5.456,525,6.779,526,3.441,527,2.609,528,3.441,529,4.759,530,4.759,531,5.456,532,5.456,533,5.456,534,5.456,535,2.939,536,5.456,537,5.456,538,3.441,539,2.939,540,3.441,541,3.441,542,3.441,543,3.441,544,3.441,545,3.441,546,3.441]],["title/index.html",[8,0.08,478,2.55,479,2.264]],["body/index.html",[0,0.232,9,0.651,11,0.007,15,0.07,18,0.021,19,0.091,20,0.117,21,0.124,26,0.345,28,0.448,37,1.088,40,0.478,42,0.876,46,0.007,58,2.292,65,3.213,66,1.526,68,1.469,76,4.026,77,0.625,78,0.844,92,1.469,94,1.277,98,1.47,99,1.721,104,0.673,110,2.783,114,0.564,124,0.951,137,2.397,150,1.059,151,1.059,153,1.422,162,0.716,164,2.237,170,1.591,181,1.197,229,1.917,248,2.237,256,0.879,260,1.277,268,1.47,273,1.038,298,1.146,307,1.735,350,1.917,438,0.951,445,2.887,463,1.146,469,1.917,479,1.146,482,5.797,490,1.291,491,1.291,492,2.783,493,1.291,494,1.291,495,3.619,497,1.291,499,1.291,501,2.783,514,2.783,547,4.863,548,1.511,549,1.511,550,3.257,551,2.527,552,2.527,553,1.511,554,1.511,555,2.527,556,1.511,557,1.511,558,1.511,559,1.511,560,1.511,561,1.511,562,1.511,563,2.527,564,1.511,565,1.511,566,1.511,567,1.511,568,1.511,569,1.511,570,1.511,571,1.511,572,1.511,573,2.527,574,1.511,575,1.511,576,1.511,577,1.511,578,1.511,579,1.511,580,1.511,581,1.511,582,1.511,583,1.511,584,1.511,585,1.511,586,1.511,587,1.511,588,3.807,589,1.511,590,2.527,591,1.511,592,2.527,593,1.511,594,1.511,595,6.282,596,2.527,597,1.511,598,2.527,599,1.511,600,1.511,601,2.527,602,3.807,603,1.511,604,1.511,605,2.527,606,1.511,607,2.527,608,1.511,609,3.807,610,1.511,611,4.236,612,1.511,613,2.527,614,1.511,615,1.511,616,4.236,617,1.511,618,4.236,619,2.527,620,1.511,621,1.511,622,2.527,623,2.527,624,3.807,625,3.807,626,2.527,627,1.511,628,1.511,629,3.807,630,2.527,631,2.527,632,1.511,633,1.511,634,1.511,635,1.511,636,1.511,637,1.511,638,2.527,639,2.527,640,1.511,641,1.511,642,1.511,643,1.511,644,2.527,645,2.159,646,2.527,647,1.511,648,1.511,649,1.511,650,1.511,651,1.511,652,2.527,653,1.511,654,1.511,655,1.511,656,1.511,657,1.511,658,1.511,659,1.511,660,1.511,661,1.511,662,1.511,663,1.511,664,1.511,665,1.511,666,1.511,667,1.511,668,1.511,669,1.511,670,1.511,671,1.511,672,1.511,673,3.257,674,1.511,675,1.511,676,1.511,677,1.511,678,1.511,679,1.511,680,1.511,681,1.511,682,1.511,683,1.511,684,2.527,685,1.511,686,1.511,687,1.511]],["title/modules.html",[688,4.176]],["body/modules.html",[11,0.019,18,0.019,46,0.019,688,4.879]],["title/overview.html",[689,4.176]],["body/overview.html",[0,0.512,11,0.019,18,0.019,46,0.019,153,2.088,645,4.777,689,4.777,690,5.591]],["title/miscellaneous/typealiases.html",[516,1.508,691,4.304]],["body/miscellaneous/typealiases.html",[8,0.128,11,0.017,18,0.021,20,0.272,46,0.017,55,2.523,56,0.476,59,1.274,109,1.988,140,2.111,150,1.988,151,1.988,152,2.111,173,3.698,175,1.42,178,1.345,179,1.345,180,1.42,220,2.986,422,3.598,426,5.453,516,2.397,527,3.598,539,4.053,692,4.744,693,4.744,694,4.744]],["title/miscellaneous/variables.html",[516,1.508,695,3.677]],["body/miscellaneous/variables.html",[8,0.131,11,0.017,18,0.02,20,0.276,46,0.017,56,0.444,59,1.303,68,1.303,98,2.823,99,1.453,140,2.16,141,4.518,154,3.751,170,4.421,293,4.145,395,3.332,396,3.68,397,4.518,516,2.452,527,3.68,535,4.145,695,4.145,696,4.852]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":63,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{}}}],["1",{"_index":65,"title":{},"body":{"classes/CallCounter.html":{},"classes/TrackedExpressionsFormatter.html":{},"index.html":{}}}],["10",{"_index":607,"title":{},"body":{"index.html":{}}}],["2",{"_index":629,"title":{},"body":{"index.html":{}}}],["2bit",{"_index":687,"title":{},"body":{"index.html":{}}}],["3",{"_index":631,"title":{},"body":{"index.html":{}}}],["4",{"_index":645,"title":{},"body":{"index.html":{},"overview.html":{}}}],["41",{"_index":690,"title":{},"body":{"overview.html":{}}}],["_prototyp",{"_index":294,"title":{},"body":{"classes/Interceptor.html":{}}}],["_proxi",{"_index":295,"title":{},"body":{"classes/Interceptor.html":{}}}],["_valu",{"_index":296,"title":{},"body":{"classes/Interceptor.html":{}}}],["accept",{"_index":320,"title":{},"body":{"classes/Interceptor.html":{}}}],["access",{"_index":611,"title":{},"body":{"index.html":{}}}],["action",{"_index":429,"title":{},"body":{"classes/Tracker.html":{}}}],["activestrategi",{"_index":269,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["actual",{"_index":646,"title":{},"body":{"index.html":{}}}],["add",{"_index":95,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Tracker.html":{}}}],["add(act",{"_index":427,"title":{},"body":{"classes/Tracker.html":{}}}],["add(key",{"_index":100,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["alias",{"_index":692,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":626,"title":{},"body":{"index.html":{}}}],["any|it",{"_index":36,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{}}}],["appli",{"_index":166,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["arg",{"_index":162,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["arg1",{"_index":662,"title":{},"body":{"index.html":{}}}],["arg2",{"_index":652,"title":{},"body":{"index.html":{}}}],["argument",{"_index":181,"title":{},"body":{"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"index.html":{}}}],["argumentsmatch",{"_index":1,"title":{"classes/ArgumentsMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["argumentsmatcherfactori",{"_index":524,"title":{},"body":{"miscellaneous/functions.html":{}}}],["array",{"_index":82,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["ask",{"_index":562,"title":{},"body":{"index.html":{}}}],["assert",{"_index":506,"title":{},"body":{"changelog.html":{}}}],["assign",{"_index":408,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["b",{"_index":653,"title":{},"body":{"index.html":{}}}],["behavior",{"_index":248,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"index.html":{}}}],["behaviour",{"_index":483,"title":{},"body":{"changelog.html":{}}}],["boolean",{"_index":27,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["c",{"_index":550,"title":{},"body":{"index.html":{}}}],["call",{"_index":137,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["callback",{"_index":307,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"index.html":{}}}],["callback((arg1",{"_index":660,"title":{},"body":{"index.html":{}}}],["callback((argu",{"_index":641,"title":{},"body":{"index.html":{}}}],["callbacks.loose.strategi",{"_index":254,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.loose.strategy.t",{"_index":332,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:16",{"_index":336,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:32",{"_index":335,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.loose.strategy.ts:9",{"_index":334,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["callbacks.strict.strategi",{"_index":251,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["callbacks.strict.strategy.t",{"_index":344,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:13",{"_index":347,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:29",{"_index":346,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.strict.strategy.ts:6",{"_index":345,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["callbacks.t",{"_index":242,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callbacks.ts:13",{"_index":280,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:14",{"_index":278,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{}}}],["callbacks.ts:18",{"_index":247,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{}}}],["callbacks.ts:29",{"_index":328,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:37",{"_index":330,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:41",{"_index":329,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks.ts:45",{"_index":331,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["callbacks/interceptor",{"_index":241,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["callcount",{"_index":47,"title":{"classes/CallCounter.html":{}},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["callcounter(expressionmatcherfactori",{"_index":69,"title":{},"body":{"classes/CallCounter.html":{}}}],["callcounterfactori",{"_index":67,"title":{},"body":{"classes/CallCounter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"miscellaneous/functions.html":{}}}],["calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n",{"_index":477,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["case",{"_index":505,"title":{},"body":{"changelog.html":{}}}],["catch",{"_index":291,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["changelog",{"_index":480,"title":{"changelog.html":{}},"body":{}}],["check",{"_index":583,"title":{},"body":{"index.html":{}}}],["class",{"_index":0,"title":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{},"overview.html":{}}}],["code",{"_index":501,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compat",{"_index":556,"title":{},"body":{"index.html":{}}}],["compil",{"_index":499,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["const",{"_index":42,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["constant",{"_index":32,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constantformatt",{"_index":70,"title":{"classes/ConstantFormatter.html":{}},"body":{"classes/ConstantFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constantformatter().format(object[index",{"_index":85,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["constantmatch",{"_index":14,"title":{"classes/ConstantMatcher.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor",{"_index":12,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["constructor(arg",{"_index":226,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(argumentsmatch",{"_index":364,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["constructor(constantformatt",{"_index":359,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["constructor(constantmatch",{"_index":13,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["constructor(definedsetup",{"_index":333,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["constructor(expectedexpressionformatt",{"_index":467,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["constructor(expressionformatt",{"_index":118,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["constructor(expressionmatch",{"_index":51,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["constructor(getpropertyexpressionmatch",{"_index":209,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["constructor(getpropertyformatt",{"_index":188,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["constructor(interceptorcallback",{"_index":299,"title":{},"body":{"classes/Interceptor.html":{}}}],["constructor(messag",{"_index":452,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["constructor(nam",{"_index":221,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(pred",{"_index":351,"title":{},"body":{"classes/It.html":{}}}],["constructor(priv",{"_index":35,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{}}}],["constructor(publ",{"_index":224,"title":{},"body":{"classes/GetPropertyExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["constructor(reflector",{"_index":440,"title":{},"body":{"classes/Verifier.html":{}}}],["constructor(sequenceid",{"_index":424,"title":{},"body":{"classes/Tracker.html":{}}}],["constructor(strictstrategi",{"_index":327,"title":{},"body":{"classes/InterceptorCallbacks.html":{}}}],["control",{"_index":668,"title":{},"body":{"index.html":{}}}],["correspond",{"_index":670,"title":{},"body":{"index.html":{}}}],["count",{"_index":50,"title":{},"body":{"classes/CallCounter.html":{},"classes/PlayTimes.html":{}}}],["count(expect",{"_index":54,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter",{"_index":447,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["counter.t",{"_index":49,"title":{},"body":{"classes/CallCounter.html":{},"miscellaneous/functions.html":{}}}],["counter.ts:12",{"_index":57,"title":{},"body":{"classes/CallCounter.html":{}}}],["counter.ts:6",{"_index":53,"title":{},"body":{"classes/CallCounter.html":{}}}],["createobject",{"_index":297,"title":{},"body":{"classes/Interceptor.html":{}}}],["date",{"_index":624,"title":{},"body":{"index.html":{}}}],["date(2016",{"_index":657,"title":{},"body":{"index.html":{}}}],["date(2017",{"_index":661,"title":{},"body":{"index.html":{}}}],["deal",{"_index":683,"title":{},"body":{"index.html":{}}}],["declar",{"_index":156,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["dedic",{"_index":559,"title":{},"body":{"index.html":{}}}],["default",{"_index":98,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/Interceptor.html":{},"classes/SequenceId.html":{},"classes/Tracker.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defin",{"_index":15,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["definedsetup",{"_index":89,"title":{"classes/DefinedSetups.html":{}},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"miscellaneous/functions.html":{}}}],["delimit",{"_index":475,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["deni",{"_index":601,"title":{},"body":{"index.html":{}}}],["depend",{"_index":554,"title":{},"body":{"index.html":{}}}],["descript",{"_index":83,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["description.push(new",{"_index":84,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["dev",{"_index":565,"title":{},"body":{"index.html":{}}}],["document",{"_index":552,"title":{},"body":{"index.html":{}}}],["dump",{"_index":507,"title":{},"body":{"changelog.html":{}}}],["e",{"_index":292,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["enum",{"_index":255,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["enumer",{"_index":517,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":451,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["error('an",{"_index":632,"title":{},"body":{"index.html":{}}}],["error('argu",{"_index":643,"title":{},"body":{"index.html":{}}}],["error('invok",{"_index":665,"title":{},"body":{"index.html":{}}}],["error('property4",{"_index":610,"title":{},"body":{"index.html":{}}}],["es5",{"_index":500,"title":{},"body":{"changelog.html":{}}}],["exactli",{"_index":382,"title":{},"body":{"classes/PlayTimes.html":{}}}],["exactly(count",{"_index":386,"title":{},"body":{"classes/PlayTimes.html":{}}}],["except",{"_index":675,"title":{},"body":{"index.html":{}}}],["exclus",{"_index":522,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["expect",{"_index":29,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpress",{"_index":55,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/typealiases.html":{}}}],["expectedexpressionformatt",{"_index":116,"title":{"classes/ExpectedExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["expectedexpressionformatter(expressionformatterfactori",{"_index":131,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expectedexpressionformatterfactori",{"_index":130,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["expectedexpressionmessag",{"_index":471,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionmessage}\\n${delimiter}\\ntrack",{"_index":476,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["expectedexpressionreflector",{"_index":139,"title":{"classes/ExpectedExpressionReflector.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["expectedgetpropertyexpress",{"_index":150,"title":{"classes/ExpectedGetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedgetpropertyexpression(nam",{"_index":161,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedgetpropertyexpression|it",{"_index":232,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["expectedmethodexpress",{"_index":152,"title":{"classes/ExpectedMethodExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"miscellaneous/typealiases.html":{}}}],["expectedmethodexpression(arg",{"_index":168,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedmethodexpression|it",{"_index":367,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["expectednamedmethodexpress",{"_index":109,"title":{"classes/ExpectedNamedMethodExpression.html":{}},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/NamedMethodExpressionMatcher.html":{},"miscellaneous/typealiases.html":{}}}],["expectednamedmethodexpression(nam",{"_index":163,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectednamedmethodexpression).nam",{"_index":115,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["expectednamedmethodexpression|it",{"_index":378,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["expectedsetpropertyexpress",{"_index":151,"title":{"classes/ExpectedSetPropertyExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/SetPropertyExpressionMatcher.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["expectedsetpropertyexpression(nam",{"_index":165,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expectedsetpropertyexpression|it",{"_index":410,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["export",{"_index":34,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["express",{"_index":56,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expression(proxi",{"_index":172,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expression.arguments.foreach(arg",{"_index":373,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.nam",{"_index":229,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"index.html":{}}}],["expression.name}(${valu",{"_index":376,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["expression.valu",{"_index":628,"title":{},"body":{"index.html":{}}}],["expressiondescript",{"_index":132,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressiondescription}${mockdescript",{"_index":135,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["expressionformatt",{"_index":119,"title":{"classes/ExpressionFormatter.html":{}},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["expressionformatterfactori",{"_index":128,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"miscellaneous/functions.html":{}}}],["expressionmatch",{"_index":52,"title":{"classes/ExpressionMatcher.html":{}},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{}}}],["expressionmatcherfactori",{"_index":61,"title":{},"body":{"classes/CallCounter.html":{},"miscellaneous/functions.html":{}}}],["expressionproxi",{"_index":143,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["expressions.t",{"_index":173,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["expressions/expect",{"_index":59,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["expressions/express",{"_index":30,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["expressions|it",{"_index":203,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["extend",{"_index":174,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["factori",{"_index":129,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["fals",{"_index":40,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["field",{"_index":623,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["find",{"_index":579,"title":{},"body":{"index.html":{}}}],["fluent",{"_index":515,"title":{},"body":{"changelog.html":{}}}],["folder",{"_index":586,"title":{},"body":{"index.html":{}}}],["format",{"_index":73,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["format(expect",{"_index":121,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["format(express",{"_index":198,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["format(object",{"_index":74,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["format(templ",{"_index":545,"title":{},"body":{"miscellaneous/functions.html":{}}}],["format(trackedexpress",{"_index":415,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["formatt",{"_index":127,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["formatted.join",{"_index":375,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatted.push(this.constantformatter.format(arg",{"_index":374,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["formatter.t",{"_index":72,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["formatter.ts:10",{"_index":361,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["formatter.ts:12",{"_index":196,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:15",{"_index":125,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatter.ts:18",{"_index":468,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["formatter.ts:22",{"_index":199,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["formatter.ts:4",{"_index":360,"title":{},"body":{"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["formatter.ts:5",{"_index":75,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["formatter.ts:9",{"_index":120,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{}}}],["formatters/verifi",{"_index":449,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["friendli",{"_index":575,"title":{},"body":{"index.html":{}}}],["full",{"_index":573,"title":{},"body":{"index.html":{}}}],["fulli",{"_index":578,"title":{},"body":{"index.html":{}}}],["function",{"_index":66,"title":{"miscellaneous/functions.html":{}},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/SequenceId.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["get",{"_index":478,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["get(express",{"_index":105,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["get.properti",{"_index":200,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["get.property.integrationtests.t",{"_index":587,"title":{},"body":{"index.html":{}}}],["getpropertyexpress",{"_index":175,"title":{"classes/GetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["getpropertyexpression(methodnam",{"_index":342,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["getpropertyexpression(nam",{"_index":311,"title":{},"body":{"classes/Interceptor.html":{}}}],["getpropertyexpression:19",{"_index":177,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{}}}],["getpropertyexpressionformatt",{"_index":189,"title":{"classes/GetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpressionFormatter.html":{}}}],["getpropertyexpressionmatch",{"_index":210,"title":{"classes/GetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{}}}],["getpropertyformatt",{"_index":197,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["getpropertyresult",{"_index":312,"title":{},"body":{"classes/Interceptor.html":{}}}],["getprototypeof",{"_index":323,"title":{},"body":{"classes/Interceptor.html":{}}}],["getter",{"_index":228,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["hasnamedmethod",{"_index":96,"title":{},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(methodnam",{"_index":259,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["hasnamedmethod(nam",{"_index":107,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["havebeencalledtim",{"_index":123,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["help",{"_index":561,"title":{},"body":{"index.html":{}}}],["hold",{"_index":612,"title":{},"body":{"index.html":{}}}],["hook",{"_index":620,"title":{},"body":{"index.html":{}}}],["https://dvabuzyarov.github.io/moq.t",{"_index":553,"title":{},"body":{"index.html":{}}}],["id",{"_index":431,"title":{},"body":{"classes/Tracker.html":{}}}],["id.t",{"_index":397,"title":{},"body":{"classes/SequenceId.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["id.ts:2",{"_index":399,"title":{},"body":{"classes/SequenceId.html":{}}}],["id.ts:4",{"_index":400,"title":{},"body":{"classes/SequenceId.html":{}}}],["iexpectedexpress",{"_index":148,"title":{"interfaces/IExpectedExpression.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["iinterceptorcallback",{"_index":239,"title":{"interfaces/IInterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["iinterceptorcallbacksstrategi",{"_index":243,"title":{"interfaces/IInterceptorCallbacksStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["implement",{"_index":268,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"index.html":{}}}],["import",{"_index":28,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["inclus",{"_index":523,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":8,"title":{"index.html":{}},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["inherit",{"_index":176,"title":{},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{}}}],["inspir",{"_index":549,"title":{},"body":{"index.html":{}}}],["instal",{"_index":563,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":154,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/SequenceId.html":{},"miscellaneous/variables.html":{}}}],["instance(1",{"_index":638,"title":{},"body":{"index.html":{}}}],["instance(2",{"_index":640,"title":{},"body":{"index.html":{}}}],["instance(it.is(valu",{"_index":644,"title":{},"body":{"index.html":{}}}],["instance(valu",{"_index":642,"title":{},"body":{"index.html":{}}}],["instance.method",{"_index":614,"title":{},"body":{"index.html":{}}}],["instance.method(1",{"_index":654,"title":{},"body":{"index.html":{}}}],["instance.method(2",{"_index":667,"title":{},"body":{"index.html":{}}}],["instance.method(3",{"_index":663,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(()=>tru",{"_index":679,"title":{},"body":{"index.html":{}}}],["instance.method(it.is(valu",{"_index":658,"title":{},"body":{"index.html":{}}}],["instance.properti",{"_index":625,"title":{},"body":{"index.html":{}}}],["instance.property1",{"_index":596,"title":{},"body":{"index.html":{}}}],["instance.property2",{"_index":603,"title":{},"body":{"index.html":{}}}],["instance.property3",{"_index":606,"title":{},"body":{"index.html":{}}}],["instance[property4nam",{"_index":608,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":78,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"changelog.html":{},"index.html":{}}}],["integr",{"_index":582,"title":{},"body":{"index.html":{}}}],["intend",{"_index":568,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":277,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["intercepted(express",{"_index":258,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptor",{"_index":250,"title":{"classes/Interceptor.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptorcallback",{"_index":262,"title":{"classes/InterceptorCallbacks.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacks(strictstrategi",{"_index":267,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksfactori",{"_index":530,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interceptorcallbacksfactory(definedsetup",{"_index":261,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"miscellaneous/functions.html":{}}}],["interceptorcallbacksloosestrategi",{"_index":253,"title":{"classes/InterceptorCallbacksLooseStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["interceptorcallbacksloosestrategy(definedsetup",{"_index":266,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interceptorcallbacksstrictstrategi",{"_index":249,"title":{"classes/InterceptorCallbacksStrictStrategy.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["interceptorcallbacksstrictstrategy(definedsetup",{"_index":264,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["interfac",{"_index":153,"title":{"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{}},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"index.html":{},"overview.html":{}}}],["introduc",{"_index":484,"title":{},"body":{"changelog.html":{}}}],["invok",{"_index":392,"title":{},"body":{"classes/PlayTimes.html":{}}}],["ipred",{"_index":281,"title":{"interfaces/IPredicate.html":{}},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["is(pred",{"_index":285,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isani",{"_index":287,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["isetupinvok",{"_index":101,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["it(pred",{"_index":286,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["it).pred",{"_index":80,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it).test(left",{"_index":88,"title":{},"body":{"classes/ConstantMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["it.i",{"_index":604,"title":{},"body":{"index.html":{}}}],["it.is(${(object",{"_index":79,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["it.is(()=>tru",{"_index":680,"title":{},"body":{"index.html":{}}}],["it.is((express",{"_index":598,"title":{},"body":{"index.html":{}}}],["it.is(valu",{"_index":630,"title":{},"body":{"index.html":{}}}],["it.isani",{"_index":503,"title":{},"body":{"changelog.html":{}}}],["itestfunct",{"_index":637,"title":{},"body":{"index.html":{}}}],["itestobject",{"_index":588,"title":{},"body":{"index.html":{}}}],["key",{"_index":103,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["latest",{"_index":510,"title":{},"body":{"changelog.html":{}}}],["left",{"_index":25,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["left.foreach((lvalu",{"_index":41,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.length",{"_index":38,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["left.nam",{"_index":234,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["let'",{"_index":600,"title":{},"body":{"index.html":{}}}],["lib/.../cal",{"_index":526,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../expect",{"_index":527,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/.../expressions.t",{"_index":693,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/.../factories.t",{"_index":525,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../format",{"_index":528,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../interceptor",{"_index":518,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/.../interceptor.t",{"_index":696,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lib/.../sequ",{"_index":535,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lib/.../times.t",{"_index":520,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/.../track",{"_index":538,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../tracker.t",{"_index":539,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lib/.../verifi",{"_index":541,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/.../verifier.t",{"_index":540,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/cal",{"_index":48,"title":{},"body":{"classes/CallCounter.html":{},"miscellaneous/functions.html":{}}}],["lib/defin",{"_index":90,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["lib/expect",{"_index":140,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lib/express",{"_index":5,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"miscellaneous/functions.html":{}}}],["lib/expressions.t",{"_index":220,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["lib/expressions.ts:11",{"_index":357,"title":{},"body":{"classes/MethodExpression.html":{}}}],["lib/expressions.ts:18",{"_index":222,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:19",{"_index":223,"title":{},"body":{"classes/GetPropertyExpression.html":{}}}],["lib/expressions.ts:2",{"_index":370,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/expressions.ts:24",{"_index":403,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:25",{"_index":404,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:26",{"_index":405,"title":{},"body":{"classes/SetPropertyExpression.html":{}}}],["lib/expressions.ts:4",{"_index":371,"title":{},"body":{"classes/NamedMethodExpression.html":{}}}],["lib/format",{"_index":544,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/formatters/const",{"_index":71,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["lib/formatters/expect",{"_index":117,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/express",{"_index":187,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["lib/formatters/factories.t",{"_index":543,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lib/formatters/get.properti",{"_index":227,"title":{},"body":{"classes/GetPropertyExpressionFormatter.html":{}}}],["lib/formatters/method",{"_index":358,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["lib/formatters/named.method",{"_index":372,"title":{},"body":{"classes/NamedMethodExpressionFormatter.html":{}}}],["lib/formatters/set.properti",{"_index":406,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["lib/formatters/track",{"_index":414,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"miscellaneous/functions.html":{}}}],["lib/formatters/verifi",{"_index":466,"title":{},"body":{"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor",{"_index":240,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["lib/interceptor.t",{"_index":293,"title":{},"body":{"classes/Interceptor.html":{},"miscellaneous/variables.html":{}}}],["lib/interceptor.ts:12",{"_index":302,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:13",{"_index":301,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:14",{"_index":300,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:20",{"_index":304,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:28",{"_index":306,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/interceptor.ts:35",{"_index":303,"title":{},"body":{"classes/Interceptor.html":{}}}],["lib/play",{"_index":380,"title":{},"body":{"classes/PlayTimes.html":{}}}],["lib/sequ",{"_index":396,"title":{},"body":{"classes/SequenceId.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["lib/times.t",{"_index":521,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lib/tracker.t",{"_index":422,"title":{},"body":{"classes/Tracker.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["lib/tracker.ts:13",{"_index":428,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:18",{"_index":430,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/tracker.ts:7",{"_index":425,"title":{},"body":{"classes/Tracker.html":{}}}],["lib/verifier.t",{"_index":439,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"miscellaneous/functions.html":{}}}],["lib/verifier.ts:17",{"_index":442,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:26",{"_index":446,"title":{},"body":{"classes/Verifier.html":{}}}],["lib/verifier.ts:7",{"_index":465,"title":{},"body":{"classes/VerifyError.html":{}}}],["librari",{"_index":551,"title":{},"body":{"index.html":{}}}],["liter",{"_index":694,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["log",{"_index":423,"title":{},"body":{"classes/Tracker.html":{}}}],["loos",{"_index":257,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{}}}],["loosestrategi",{"_index":265,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["magic",{"_index":571,"title":{},"body":{"index.html":{}}}],["make",{"_index":493,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["match",{"_index":11,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["matched(left",{"_index":22,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher",{"_index":33,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.t",{"_index":7,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:12",{"_index":366,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:15",{"_index":214,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:24",{"_index":215,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["matcher.ts:4",{"_index":16,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matcher.ts:5",{"_index":87,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matcher.ts:6",{"_index":365,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["matcher.ts:7",{"_index":231,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matcher.ts:9",{"_index":24,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/argu",{"_index":6,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["matchers/const",{"_index":86,"title":{},"body":{"classes/ConstantMatcher.html":{}}}],["matchers/express",{"_index":60,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpressionMatcher.html":{}}}],["matchers/factori",{"_index":62,"title":{},"body":{"classes/CallCounter.html":{}}}],["matchers/factories.t",{"_index":542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["matchers/get.properti",{"_index":230,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{}}}],["matchers/method",{"_index":363,"title":{},"body":{"classes/MethodExpressionMatcher.html":{}}}],["matchers/named.method",{"_index":377,"title":{},"body":{"classes/NamedMethodExpressionMatcher.html":{}}}],["matchers/set.properti",{"_index":409,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["matter",{"_index":676,"title":{},"body":{"index.html":{}}}],["messag",{"_index":460,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["method",{"_index":9,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["method(1",{"_index":647,"title":{},"body":{"index.html":{}}}],["method(arg1",{"_index":651,"title":{},"body":{"index.html":{}}}],["method.property.integrationtests.t",{"_index":636,"title":{},"body":{"index.html":{}}}],["methodexpress",{"_index":179,"title":{"classes/MethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["methodexpression(arg",{"_index":322,"title":{},"body":{"classes/Interceptor.html":{}}}],["methodexpression:11",{"_index":182,"title":{},"body":{"classes/ExpectedMethodExpression.html":{}}}],["methodexpressionformatt",{"_index":193,"title":{"classes/MethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/MethodExpressionFormatter.html":{}}}],["methodexpressionmatch",{"_index":212,"title":{"classes/MethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{}}}],["methodformatt",{"_index":192,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["methodformatterfactori",{"_index":531,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methodmatcherfactori",{"_index":532,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methodnam",{"_index":279,"title":{},"body":{"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["minimalist",{"_index":576,"title":{},"body":{"index.html":{}}}],["miscellan",{"_index":516,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":482,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["mock(mocknam",{"_index":594,"title":{},"body":{"index.html":{}}}],["mock.object",{"_index":616,"title":{},"body":{"index.html":{}}}],["mock.verify(inst",{"_index":618,"title":{},"body":{"index.html":{}}}],["mockbehavior",{"_index":246,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"miscellaneous/enumerations.html":{}}}],["mockbehavior.loos",{"_index":275,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["mockbehavior.strict",{"_index":273,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"index.html":{}}}],["mockdescript",{"_index":134,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["mocknam",{"_index":124,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["modul",{"_index":688,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moq",{"_index":110,"title":{},"body":{"classes/DefinedSetups.html":{},"index.html":{}}}],["moq.t",{"_index":547,"title":{},"body":{"index.html":{}}}],["name",{"_index":19,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["named.method",{"_index":202,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["named.method.integrationtests.t",{"_index":650,"title":{},"body":{"index.html":{}}}],["namedmethodexpress",{"_index":180,"title":{"classes/NamedMethodExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpression.html":{},"miscellaneous/typealiases.html":{}}}],["namedmethodexpression(nam",{"_index":317,"title":{},"body":{"classes/Interceptor.html":{}}}],["namedmethodexpression:2",{"_index":183,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpression:4",{"_index":184,"title":{},"body":{"classes/ExpectedNamedMethodExpression.html":{}}}],["namedmethodexpressionformatt",{"_index":195,"title":{"classes/NamedMethodExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/NamedMethodExpressionFormatter.html":{}}}],["namedmethodexpressionmatch",{"_index":213,"title":{"classes/NamedMethodExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["namedmethodformatt",{"_index":194,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["namedmethodformatterfactori",{"_index":533,"title":{},"body":{"miscellaneous/functions.html":{}}}],["namedmethodmatcherfactori",{"_index":534,"title":{},"body":{"miscellaneous/functions.html":{}}}],["need",{"_index":492,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["never",{"_index":383,"title":{},"body":{"classes/PlayTimes.html":{}}}],["new",{"_index":68,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/It.html":{},"classes/SequenceId.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":398,"title":{},"body":{"classes/SequenceId.html":{}}}],["now",{"_index":486,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":497,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["null",{"_index":324,"title":{},"body":{"classes/Interceptor.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["number",{"_index":58,"title":{},"body":{"classes/CallCounter.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/Tracker.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["number|ani",{"_index":622,"title":{},"body":{"index.html":{}}}],["object",{"_index":76,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/Interceptor.html":{},"changelog.html":{},"index.html":{}}}],["object.getprototypeof",{"_index":490,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["object.method",{"_index":617,"title":{},"body":{"index.html":{}}}],["object.method(1",{"_index":666,"title":{},"body":{"index.html":{}}}],["object.properti",{"_index":634,"title":{},"body":{"index.html":{}}}],["object.setprototypeof",{"_index":491,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["onc",{"_index":384,"title":{},"body":{"classes/PlayTimes.html":{}}}],["oper",{"_index":495,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["option",{"_index":21,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["origin",{"_index":567,"title":{},"body":{"index.html":{}}}],["out",{"_index":584,"title":{},"body":{"index.html":{}}}],["overview",{"_index":689,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":498,"title":{},"body":{"changelog.html":{}}}],["paramet",{"_index":17,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["part",{"_index":677,"title":{},"body":{"index.html":{}}}],["pass",{"_index":458,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["play",{"_index":393,"title":{},"body":{"classes/PlayTimes.html":{},"changelog.html":{}}}],["playtim",{"_index":379,"title":{"classes/PlayTimes.html":{}},"body":{"classes/PlayTimes.html":{}}}],["pointer",{"_index":613,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":487,"title":{},"body":{"changelog.html":{}}}],["preced",{"_index":511,"title":{},"body":{"changelog.html":{}}}],["predic",{"_index":31,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{},"changelog.html":{}}}],["predicates.t",{"_index":282,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["predicates.ts:1",{"_index":283,"title":{},"body":{"interfaces/IPredicate.html":{}}}],["predicates.ts:11",{"_index":354,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:15",{"_index":355,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:19",{"_index":356,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:6",{"_index":352,"title":{},"body":{"classes/It.html":{}}}],["predicates.ts:7",{"_index":353,"title":{},"body":{"classes/It.html":{}}}],["pretti",{"_index":580,"title":{},"body":{"index.html":{}}}],["print",{"_index":508,"title":{},"body":{"changelog.html":{}}}],["privat",{"_index":93,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/SequenceId.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["product",{"_index":555,"title":{},"body":{"index.html":{}}}],["project",{"_index":560,"title":{},"body":{"index.html":{}}}],["properti",{"_index":92,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Tracker.html":{},"index.html":{}}}],["property1",{"_index":589,"title":{},"body":{"index.html":{}}}],["property2",{"_index":590,"title":{},"body":{"index.html":{}}}],["property3",{"_index":591,"title":{},"body":{"index.html":{}}}],["property4",{"_index":592,"title":{},"body":{"index.html":{}}}],["property4nam",{"_index":593,"title":{},"body":{"index.html":{}}}],["prototyp",{"_index":260,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"changelog.html":{},"index.html":{}}}],["prototype[methodnam",{"_index":349,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["prototypeof",{"_index":298,"title":{},"body":{"classes/Interceptor.html":{},"changelog.html":{},"index.html":{}}}],["prototypeof(prototyp",{"_index":305,"title":{},"body":{"classes/Interceptor.html":{}}}],["prototypeof(testobject",{"_index":685,"title":{},"body":{"index.html":{}}}],["proxi",{"_index":170,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["proxy(funct",{"_index":169,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["proxy:ani",{"_index":158,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["public",{"_index":10,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["quick",{"_index":566,"title":{},"body":{"index.html":{}}}],["rang",{"_index":519,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["recommend",{"_index":557,"title":{},"body":{"index.html":{}}}],["record",{"_index":432,"title":{},"body":{"classes/Tracker.html":{}}}],["refactor",{"_index":574,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":144,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflect(express",{"_index":147,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflectedinfo",{"_index":142,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["reflector",{"_index":443,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["reflector.t",{"_index":141,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"miscellaneous/variables.html":{}}}],["reflector.ts:15",{"_index":145,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:17",{"_index":146,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:41",{"_index":149,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{}}}],["reflector.ts:7",{"_index":238,"title":{},"body":{"interfaces/IExpectedExpression.html":{}}}],["result",{"_index":46,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["result.length",{"_index":421,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["result.substr(0",{"_index":420,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["return",{"_index":26,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["returns('cal",{"_index":639,"title":{},"body":{"index.html":{}}}],["returns(()=>{console.log('th",{"_index":615,"title":{},"body":{"index.html":{}}}],["returns(1",{"_index":597,"title":{},"body":{"index.html":{}}}],["returns(100",{"_index":599,"title":{},"body":{"index.html":{}}}],["returns(fals",{"_index":605,"title":{},"body":{"index.html":{}}}],["returns(new",{"_index":656,"title":{},"body":{"index.html":{}}}],["returns(tru",{"_index":627,"title":{},"body":{"index.html":{}}}],["returns(undefined);mockbehavior.loos",{"_index":681,"title":{},"body":{"index.html":{}}}],["right",{"_index":23,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/ConstantMatcher.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["right.length",{"_index":39,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["right[index",{"_index":44,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["rightexpress",{"_index":233,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.argu",{"_index":369,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["rightexpression.nam",{"_index":235,"title":{},"body":{"classes/GetPropertyExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["rightexpression.valu",{"_index":412,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["rvalu",{"_index":43,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["save",{"_index":564,"title":{},"body":{"index.html":{}}}],["separ",{"_index":558,"title":{},"body":{"index.html":{}}}],["sequenc",{"_index":385,"title":{},"body":{"classes/PlayTimes.html":{},"classes/Tracker.html":{}}}],["sequence(sequ",{"_index":390,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequence[index",{"_index":394,"title":{},"body":{"classes/PlayTimes.html":{}}}],["sequenceid",{"_index":395,"title":{"classes/SequenceId.html":{}},"body":{"classes/SequenceId.html":{},"classes/Tracker.html":{},"miscellaneous/variables.html":{}}}],["sequenceidfactori",{"_index":402,"title":{},"body":{"classes/SequenceId.html":{},"classes/Tracker.html":{},"miscellaneous/functions.html":{}}}],["set",{"_index":164,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"index.html":{}}}],["set.properti",{"_index":201,"title":{},"body":{"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{}}}],["set.property.integrationtests.t",{"_index":621,"title":{},"body":{"index.html":{}}}],["set/read",{"_index":488,"title":{},"body":{"changelog.html":{}}}],["setbehaviorstrategi",{"_index":244,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"classes/InterceptorCallbacks.html":{}}}],["setbehaviorstrategy(behavior",{"_index":245,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["setbehaviorstrategy(mockbehavior.loos",{"_index":671,"title":{},"body":{"index.html":{}}}],["setbehaviorstrategy(mockbehavior.strict);th",{"_index":672,"title":{},"body":{"index.html":{}}}],["setpropertyexpress",{"_index":178,"title":{"classes/SetPropertyExpression.html":{}},"body":{"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["setpropertyexpression(nam",{"_index":319,"title":{},"body":{"classes/Interceptor.html":{}}}],["setpropertyexpression:25",{"_index":185,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpression:26",{"_index":186,"title":{},"body":{"classes/ExpectedSetPropertyExpression.html":{}}}],["setpropertyexpressionformatt",{"_index":191,"title":{"classes/SetPropertyExpressionFormatter.html":{}},"body":{"classes/ExpressionFormatter.html":{},"classes/SetPropertyExpressionFormatter.html":{}}}],["setpropertyexpressionmatch",{"_index":211,"title":{"classes/SetPropertyExpressionMatcher.html":{}},"body":{"classes/ExpressionMatcher.html":{},"classes/SetPropertyExpressionMatcher.html":{}}}],["setpropertyformatt",{"_index":190,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["setpropertyformatterfactori",{"_index":536,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setpropertymatcherfactori",{"_index":537,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setprototypeof",{"_index":326,"title":{},"body":{"classes/Interceptor.html":{}}}],["setup",{"_index":94,"title":{},"body":{"classes/DefinedSetups.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"changelog.html":{},"index.html":{}}}],["setup(inst",{"_index":595,"title":{},"body":{"index.html":{}}}],["setup.invok",{"_index":341,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke((expression).argu",{"_index":339,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setup.invoke([(expression).valu",{"_index":340,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["setups.t",{"_index":91,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:13",{"_index":102,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:17",{"_index":106,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:26",{"_index":108,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["setups.ts:7",{"_index":97,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["signatur",{"_index":237,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["simpl",{"_index":569,"title":{},"body":{"index.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["spi",{"_index":682,"title":{},"body":{"index.html":{}}}],["start",{"_index":479,"title":{"changelog.html":{},"index.html":{}},"body":{"index.html":{}}}],["static",{"_index":284,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{},"classes/PlayTimes.html":{}}}],["still",{"_index":577,"title":{},"body":{"index.html":{}}}],["strict",{"_index":256,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"changelog.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["strictstrategi",{"_index":263,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["string",{"_index":77,"title":{},"body":{"classes/ConstantFormatter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{}}}],["string.t",{"_index":529,"title":{},"body":{"miscellaneous/functions.html":{}}}],["strongli",{"_index":570,"title":{},"body":{"index.html":{}}}],["super(messag",{"_index":453,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["support",{"_index":489,"title":{},"body":{"changelog.html":{}}}],["t",{"_index":155,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/It.html":{}}}],["target",{"_index":159,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["templat",{"_index":546,"title":{},"body":{"miscellaneous/functions.html":{}}}],["test",{"_index":350,"title":{},"body":{"classes/It.html":{},"classes/Verifier.html":{},"index.html":{}}}],["test(expect",{"_index":444,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["test(inst",{"_index":288,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["testobject",{"_index":684,"title":{},"body":{"index.html":{}}}],["tests.integr",{"_index":585,"title":{},"body":{"index.html":{}}}],["therefor",{"_index":572,"title":{},"body":{"index.html":{}}}],["this._prototyp",{"_index":308,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._prototype.prototyp",{"_index":325,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._proxi",{"_index":309,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values.hasownproperty(nam",{"_index":314,"title":{},"body":{"classes/Interceptor.html":{}}}],["this._values[nam",{"_index":315,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.activestrategi",{"_index":270,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.hasnamedmethod(methodnam",{"_index":272,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.activestrategy.intercepted(express",{"_index":271,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.argu",{"_index":225,"title":{},"body":{"classes/GetPropertyExpression.html":{},"classes/MethodExpression.html":{},"classes/NamedMethodExpression.html":{},"classes/SetPropertyExpression.html":{}}}],["this.argumentsmatcher.matched(left.argu",{"_index":368,"title":{},"body":{"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpressionMatcher.html":{}}}],["this.callcounter.count(express",{"_index":457,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.constantformatter.format(express",{"_index":208,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.argu",{"_index":362,"title":{},"body":{"classes/MethodExpressionFormatter.html":{}}}],["this.constantformatter.format(expression.valu",{"_index":407,"title":{},"body":{"classes/SetPropertyExpressionFormatter.html":{}}}],["this.constantmatcher.matched(left.valu",{"_index":411,"title":{},"body":{"classes/SetPropertyExpressionMatcher.html":{}}}],["this.constantmatcher.matched(lvalu",{"_index":45,"title":{},"body":{"classes/ArgumentsMatcher.html":{}}}],["this.createobject",{"_index":310,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.definedsetups.get(express",{"_index":338,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.definedsetups.get(getpropertyexpress",{"_index":343,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{}}}],["this.definedsetups.hasnamedmethod(methodnam",{"_index":348,"title":{},"body":{"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.expectedexpressionformatter.format(expect",{"_index":472,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.expressionformatter.format(expect",{"_index":133,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["this.expressionformatter.format(expression)}\\n",{"_index":419,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["this.expressionmatcher.matched(express",{"_index":64,"title":{},"body":{"classes/CallCounter.html":{},"classes/DefinedSetups.html":{}}}],["this.expressionproxi",{"_index":171,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.getpropertyexpressionmatcher.matched(left",{"_index":216,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.getpropertyformatter.format(express",{"_index":204,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.interceptorcallbacks.hasnamedmethod(nam",{"_index":316,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(express",{"_index":321,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(getpropertyexpress",{"_index":313,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.interceptorcallbacks.intercepted(namedmethodexpress",{"_index":318,"title":{},"body":{"classes/Interceptor.html":{}}}],["this.log",{"_index":435,"title":{},"body":{"classes/Tracker.html":{}}}],["this.log.push(record",{"_index":434,"title":{},"body":{"classes/Tracker.html":{}}}],["this.loosestrategi",{"_index":276,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.methodexpressionmatcher.matched(left",{"_index":218,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.methodformatter.format(express",{"_index":206,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.namedmethodexpressionmatcher.matched(left",{"_index":219,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.namedmethodformatter.format(express",{"_index":207,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.predicate(inst",{"_index":290,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["this.reflectedinfo",{"_index":160,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{}}}],["this.reflector.reflect(expect",{"_index":456,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["this.sequenceid.next",{"_index":433,"title":{},"body":{"classes/Tracker.html":{}}}],["this.setpropertyexpressionmatcher.matched(left",{"_index":217,"title":{},"body":{"classes/ExpressionMatcher.html":{}}}],["this.setpropertyformatter.format(express",{"_index":205,"title":{},"body":{"classes/ExpressionFormatter.html":{}}}],["this.setup",{"_index":112,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.setups.unshift([key",{"_index":111,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["this.strictstrategi",{"_index":274,"title":{},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{}}}],["this.trackedexpressionsformatter.format(trackedexpress",{"_index":474,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["this.tracker.add(express",{"_index":337,"title":{},"body":{"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{}}}],["this.valu",{"_index":401,"title":{},"body":{"classes/SequenceId.html":{}}}],["this.verifyformatter.format(express",{"_index":461,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["thisarg",{"_index":167,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["throw",{"_index":463,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["throws(new",{"_index":609,"title":{},"body":{"index.html":{}}}],["time",{"_index":445,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["time(",{"_index":138,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["times.exactly(1",{"_index":649,"title":{},"body":{"index.html":{}}}],["times.messag",{"_index":462,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.never());mock",{"_index":619,"title":{},"body":{"index.html":{}}}],["times.onc",{"_index":648,"title":{},"body":{"index.html":{}}}],["times.once());mock",{"_index":635,"title":{},"body":{"index.html":{}}}],["times.t",{"_index":381,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.test(callcount",{"_index":459,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["times.ts:12",{"_index":388,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:16",{"_index":389,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:25",{"_index":391,"title":{},"body":{"classes/PlayTimes.html":{}}}],["times.ts:3",{"_index":387,"title":{},"body":{"classes/PlayTimes.html":{}}}],["timesmessag",{"_index":122,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["timesmessage.tolowercas",{"_index":136,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{}}}],["track",{"_index":469,"title":{},"body":{"classes/VerifyFormatter.html":{},"changelog.html":{},"index.html":{}}}],["trackedact",{"_index":426,"title":{},"body":{"classes/Tracker.html":{},"miscellaneous/typealiases.html":{}}}],["trackedexpress",{"_index":416,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatt",{"_index":413,"title":{"classes/TrackedExpressionsFormatter.html":{}},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{}}}],["trackedexpressionsformatter(expressionformatterfactori",{"_index":418,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{}}}],["trackedexpressionsformatterfactori",{"_index":417,"title":{},"body":{"classes/TrackedExpressionsFormatter.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["trackedexpressionsmessag",{"_index":473,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["tracker",{"_index":252,"title":{"classes/Tracker.html":{}},"body":{"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/Tracker.html":{},"miscellaneous/functions.html":{}}}],["tracker(sequenceidfactori",{"_index":437,"title":{},"body":{"classes/Tracker.html":{}}}],["trackerfactori",{"_index":436,"title":{},"body":{"classes/Tracker.html":{},"miscellaneous/functions.html":{}}}],["tri",{"_index":289,"title":{},"body":{"interfaces/IPredicate.html":{},"classes/It.html":{}}}],["true",{"_index":37,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/PlayTimes.html":{},"classes/SetPropertyExpressionMatcher.html":{},"index.html":{}}}],["truesponsor",{"_index":686,"title":{},"body":{"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/ArgumentsMatcher.html":{},"classes/CallCounter.html":{},"classes/ConstantFormatter.html":{},"classes/ConstantMatcher.html":{},"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedGetPropertyExpression.html":{},"classes/ExpectedMethodExpression.html":{},"classes/ExpectedNamedMethodExpression.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"classes/GetPropertyExpression.html":{},"classes/GetPropertyExpressionFormatter.html":{},"classes/GetPropertyExpressionMatcher.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacks.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/MethodExpressionMatcher.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/NamedMethodExpressionMatcher.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/SetPropertyExpressionMatcher.html":{},"classes/TrackedExpressionsFormatter.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealias",{"_index":691,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeerror",{"_index":674,"title":{},"body":{"index.html":{}}}],["typeof",{"_index":81,"title":{},"body":{"classes/ConstantFormatter.html":{}}}],["typescript",{"_index":548,"title":{},"body":{"index.html":{}}}],["unam",{"_index":236,"title":{},"body":{"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{}}}],["undefin",{"_index":114,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionFormatter.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpressionFormatter.html":{},"classes/ExpressionMatcher.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IPredicate.html":{},"classes/Interceptor.html":{},"classes/InterceptorCallbacksLooseStrategy.html":{},"classes/InterceptorCallbacksStrictStrategy.html":{},"classes/It.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["unset",{"_index":673,"title":{},"body":{"index.html":{}}}],["us",{"_index":514,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["usag",{"_index":581,"title":{},"body":{"index.html":{}}}],["v2.1.0",{"_index":481,"title":{},"body":{"changelog.html":{}}}],["v2.3.0",{"_index":485,"title":{},"body":{"changelog.html":{}}}],["v2.3.1",{"_index":496,"title":{},"body":{"changelog.html":{}}}],["v2.4.0",{"_index":502,"title":{},"body":{"changelog.html":{}}}],["v2.5.0",{"_index":504,"title":{},"body":{"changelog.html":{}}}],["v2.5.1",{"_index":509,"title":{},"body":{"changelog.html":{}}}],["v2.6.0",{"_index":512,"title":{},"body":{"changelog.html":{}}}],["v2.6.1",{"_index":513,"title":{},"body":{"changelog.html":{}}}],["valu",{"_index":99,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"classes/ExpectedSetPropertyExpression.html":{},"classes/GetPropertyExpression.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{},"classes/MethodExpression.html":{},"classes/MethodExpressionFormatter.html":{},"classes/NamedMethodExpression.html":{},"classes/NamedMethodExpressionFormatter.html":{},"classes/PlayTimes.html":{},"classes/SequenceId.html":{},"classes/SetPropertyExpression.html":{},"classes/SetPropertyExpressionFormatter.html":{},"classes/Tracker.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["value.play",{"_index":113,"title":{},"body":{"classes/DefinedSetups.html":{}}}],["values[0",{"_index":655,"title":{},"body":{"index.html":{}}}],["values[1",{"_index":659,"title":{},"body":{"index.html":{}}}],["values[2",{"_index":664,"title":{},"body":{"index.html":{}}}],["var",{"_index":157,"title":{},"body":{"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"classes/Interceptor.html":{}}}],["variabl",{"_index":695,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verifi",{"_index":438,"title":{"classes/Verifier.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"changelog.html":{},"index.html":{}}}],["verifier(new",{"_index":455,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifierfactori",{"_index":454,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"miscellaneous/functions.html":{}}}],["verifyerror",{"_index":450,"title":{"classes/VerifyError.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyerror(messag",{"_index":464,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{}}}],["verifyformatt",{"_index":441,"title":{"classes/VerifyFormatter.html":{}},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{}}}],["verifyformatter(expectedexpressionformatterfactori",{"_index":470,"title":{},"body":{"classes/VerifyFormatter.html":{}}}],["verifyformatterfactori",{"_index":448,"title":{},"body":{"classes/Verifier.html":{},"classes/VerifyError.html":{},"classes/VerifyFormatter.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":104,"title":{},"body":{"classes/DefinedSetups.html":{},"classes/ExpectedExpressionReflector.html":{},"interfaces/IExpectedExpression.html":{},"interfaces/IInterceptorCallbacks.html":{},"interfaces/IInterceptorCallbacksStrategy.html":{},"classes/InterceptorCallbacks.html":{},"classes/Tracker.html":{},"classes/Verifier.html":{},"classes/VerifyError.html":{},"index.html":{}}}],["want",{"_index":678,"title":{},"body":{"index.html":{}}}],["without",{"_index":669,"title":{},"body":{"index.html":{}}}],["work",{"_index":494,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["write",{"_index":602,"title":{},"body":{"index.html":{}}}],["written",{"_index":633,"title":{},"body":{"index.html":{}}}],["ye",{"_index":126,"title":{},"body":{"classes/ExpectedExpressionFormatter.html":{},"classes/Interceptor.html":{},"classes/Verifier.html":{},"classes/VerifyFormatter.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/ArgumentsMatcher.html":{"url":"classes/ArgumentsMatcher.html","title":"class - ArgumentsMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ArgumentsMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/arguments-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/arguments-matcher.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any[], right: (any | It)[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/arguments-matcher.ts:9\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    (any | It)[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: any[], right: (any|It)[]): boolean{\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        let matched = true;\n        left.forEach((lvalue, index) =>{\n            const rvalue = right[index];\n            matched = this.constantMatcher.matched(lvalue, rvalue) === true ? matched : false;\n        });\n\n        return matched;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallCounter.html":{"url":"classes/CallCounter.html","title":"class - CallCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  CallCounter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/call-counter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                count\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/call-counter.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            count\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        count(expected: ExpectedExpressions, expressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/call-counter.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     number\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from './expected-expressions/expected-expressions';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\n\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count(expected: ExpectedExpressions, expressions: Expressions[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true)\n                count += 1;\n        }\n\n        return count;\n    }\n}\n\nexport function callCounterFactory(): CallCounter {\n    return new CallCounter(expressionMatcherFactory());\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantFormatter.html":{"url":"classes/ConstantFormatter.html","title":"class - ConstantFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/constant-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(object: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/constant-formatter.ts:5\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        object\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantFormatter {\n\n    public format(object: any|It): string {\n        if (object instanceof It) return `It.Is(${(object as It).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const index in object)\n                description.push(new ConstantFormatter().format(object[index]));\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantMatcher.html":{"url":"classes/ConstantMatcher.html","title":"class - ConstantMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/constant-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: any, right: any | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/constant-matcher.ts:5\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    any | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantMatcher {\n\n    public matched(left: any, right: any|It): boolean {\n        if (right instanceof It)\n            return (right as It).test(left);\n        return left === right;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefinedSetups.html":{"url":"classes/DefinedSetups.html","title":"class - DefinedSetups","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  DefinedSetups\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/defined-setups.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                setups\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionMatcher: ExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/defined-setups.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expressionMatcher\n                                                  \n                                                        \n                                                                    ExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            setups\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        setups:     []\n\n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/defined-setups.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(key: ExpectedExpressions, setup: ISetupInvoke)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        key\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        setup\n                                                        \n                                                                    ISetupInvoke\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:17\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ISetupInvoke\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(name: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/defined-setups.ts:26\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { ExpectedExpressions, ExpectedNamedMethodExpression } from \"./expected-expressions/expected-expressions\";\nimport { ExpressionMatcher } from \"./expression-matchers/expression-matcher\";\nimport { Expressions } from \"./expressions\";\nimport { ISetupInvoke } from \"./moq\";\n\nexport class DefinedSetups {\n    private setups: [ExpectedExpressions, ISetupInvoke][] = [];\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public add(key: ExpectedExpressions, setup: ISetupInvoke): void {\n        this.setups.unshift([key, setup]);\n    }\n\n    public get(expression: Expressions): ISetupInvoke {\n        for (const [key, value] of this.setups) {\n            if (this.expressionMatcher.matched(expression, key) === true && value.playable())\n                return value;\n        }\n\n        return undefined;\n    }\n\n    public hasNamedMethod(name: string): boolean {\n        for (const [key] of this.setups) {\n            if (key instanceof ExpectedNamedMethodExpression && (key as ExpectedNamedMethodExpression).name === name)\n                return true;\n        }\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionFormatter.html":{"url":"classes/ExpectedExpressionFormatter.html","title":"class - ExpectedExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expected-expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expected-expression-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expected-expression-formatter.ts:15\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\n\nexport function expectedExpressionFormatterFactory (): ExpectedExpressionFormatter {\n    return new ExpectedExpressionFormatter(expressionFormatterFactory());\n}\n\nexport class ExpectedExpressionFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\n        const expressionDescription = this.expressionFormatter.format(expected);\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : '';\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionReflector.html":{"url":"classes/ExpectedExpressionReflector.html","title":"class - ExpectedExpressionReflector","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionReflector\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                reflectedInfo\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                expressionProxy\n                            \n                            \n                                    Public\n                                reflect\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reflectedInfo\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reflectedInfo:     \n\n                    \n                \n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:15\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            expressionProxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        expressionProxy()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:17\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            reflect\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reflect(expression: IExpectedExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expected-expression-reflector.ts:41\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     ExpectedExpressions\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedGetPropertyExpression.html":{"url":"classes/ExpectedGetPropertyExpression.html","title":"class - ExpectedGetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedGetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     GetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in GetPropertyExpression:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMethodExpression.html":{"url":"classes/ExpectedMethodExpression.html","title":"class - ExpectedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     MethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in MethodExpression:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNamedMethodExpression.html":{"url":"classes/ExpectedNamedMethodExpression.html","title":"class - ExpectedNamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NamedMethodExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     NamedMethodExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in NamedMethodExpression:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedSetPropertyExpression.html":{"url":"classes/ExpectedSetPropertyExpression.html","title":"class - ExpectedSetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedSetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SetPropertyExpression\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                            \n                                \n                                    Inherited from     SetPropertyExpression\n\n                                \n                            \n                        \n                            \n                                    Defined in SetPropertyExpression:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionFormatter.html":{"url":"classes/ExpressionFormatter.html","title":"class - ExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expression-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyFormatter: GetPropertyExpressionFormatter, setPropertyFormatter: SetPropertyExpressionFormatter, methodFormatter: MethodExpressionFormatter, namedMethodFormatter: NamedMethodExpressionFormatter, constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/expression-formatter.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    getPropertyFormatter\n                                                  \n                                                        \n                                                                    GetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    setPropertyFormatter\n                                                  \n                                                        \n                                                                    SetPropertyExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    methodFormatter\n                                                  \n                                                        \n                                                                    MethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    namedMethodFormatter\n                                                  \n                                                        \n                                                                    NamedMethodExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: Expressions | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/expression-formatter.ts:22\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, SetPropertyExpression, NamedMethodExpression,\n    MethodExpression\n} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {GetPropertyExpressionFormatter} from './get.property-formatter';\nimport {SetPropertyExpressionFormatter} from './set.property-formatter';\nimport {MethodExpressionFormatter} from './method-formatter';\nimport {NamedMethodExpressionFormatter} from './named.method-formatter';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: Expressions|It): string {\n        if (expression instanceof GetPropertyExpression) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyExpression) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof MethodExpression) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodExpression) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionMatcher.html":{"url":"classes/ExpressionMatcher.html","title":"class - ExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/expression-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getPropertyExpressionMatcher: GetPropertyExpressionMatcher, setPropertyExpressionMatcher: SetPropertyExpressionMatcher, methodExpressionMatcher: MethodExpressionMatcher, namedMethodExpressionMatcher: NamedMethodExpressionMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/expression-matcher.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    getPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    GetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    setPropertyExpressionMatcher\n                                                  \n                                                        \n                                                                    SetPropertyExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    methodExpressionMatcher\n                                                  \n                                                        \n                                                                    MethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    namedMethodExpressionMatcher\n                                                  \n                                                        \n                                                                    NamedMethodExpressionMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: Expressions, right: ExpectedExpressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/expression-matcher.ts:24\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpressionMatcher} from './get.property-matcher';\nimport {SetPropertyExpressionMatcher} from './set.property-matcher';\nimport {MethodExpressionMatcher} from './method-matcher';\nimport {NamedMethodExpressionMatcher} from './named.method-matcher';\nimport {\n    Expressions, GetPropertyExpression, SetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from '../expressions';\nimport {\n    ExpectedExpressions, ExpectedGetPropertyExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression\n} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher) {\n\n    }\n\n    public matched(left: Expressions, right: ExpectedExpressions): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyExpression && (right instanceof ExpectedGetPropertyExpression || right instanceof It))\n            return this.getPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof SetPropertyExpression && (right instanceof ExpectedSetPropertyExpression || right instanceof It))\n            return this.setPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof MethodExpression && (right instanceof ExpectedMethodExpression || right instanceof It))\n            return this.methodExpressionMatcher.matched(left, >right);\n        if (left instanceof NamedMethodExpression && (right instanceof ExpectedNamedMethodExpression || right instanceof It))\n            return this.namedMethodExpressionMatcher.matched(left, >right);\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpression.html":{"url":"classes/GetPropertyExpression.html","title":"class - GetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:19\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionFormatter.html":{"url":"classes/GetPropertyExpressionFormatter.html","title":"class - GetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/get.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: GetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/get.property-formatter.ts:5\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\n\nexport class GetPropertyExpressionFormatter{\n\n    public format(expression: GetPropertyExpression): string{\n        return `Getter of \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionMatcher.html":{"url":"classes/GetPropertyExpressionMatcher.html","title":"class - GetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/get.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/get.property-matcher.ts:7\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    GetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedGetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ExpectedGetPropertyExpression} from '../expected-expressions/expected-expressions';\n\nexport class GetPropertyExpressionMatcher{\n\n    public matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpectedExpression.html":{"url":"interfaces/IExpectedExpression.html","title":"interface - IExpectedExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpectedExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void | any | It\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:7\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacks.html":{"url":"interfaces/IInterceptorCallbacks.html","title":"interface - IInterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacks\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n            \n                Extends\n            \n            \n                    IInterceptorCallbacksStrategy\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    setBehaviorStrategy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:18\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacksStrategy.html":{"url":"interfaces/IInterceptorCallbacksStrategy.html","title":"interface - IInterceptorCallbacksStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacksStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    hasNamedMethod\n                                \n                                \n                                    intercepted\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \nhasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:14\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \nintercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPredicate.html":{"url":"interfaces/IPredicate.html","title":"interface - IPredicate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPredicate\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     boolean\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:1\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptor.html":{"url":"classes/Interceptor.html","title":"class - Interceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptor\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _prototype\n                            \n                            \n                                    Private\n                                _proxy\n                            \n                            \n                                    Private\n                                _values\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                createObject\n                            \n                            \n                                    Public\n                                object\n                            \n                            \n                                    Public\n                                prototypeof\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(interceptorCallbacks: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    interceptorCallbacks\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _prototype\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _prototype:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _proxy:     T\n\n                    \n                \n                    \n                        \n                            Type :     T\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _values\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        _values:     object\n\n                    \n                \n                    \n                        \n                            Type :     object\n\n                        \n                    \n                    \n                        \n                            Default value : {}\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            createObject\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        createObject()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:35\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            object\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        object()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:20\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     T\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            prototypeof\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        prototypeof(prototype?: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor.ts:28\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from './expressions';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks/interceptor-callbacks';\n\ndeclare var Proxy: any;\n\nexport class Interceptor {\n\n\n    private _proxy: T;\n    private _prototype: any;\n    private _values = {};\n\n    constructor(private interceptorCallbacks: IInterceptorCallbacksStrategy) {\n        this._prototype = Function;\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    public prototypeof(prototype?: any): any {\n        if (prototype !== undefined)\n            this._prototype = prototype;\n\n        return this._prototype;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => {\n                const getPropertyExpression = new GetPropertyExpression(name);\n                const getPropertyResult = this.interceptorCallbacks.intercepted(getPropertyExpression);\n\n                if (this._values.hasOwnProperty(name) === true)\n                    return this._values[name];\n\n                if (this.interceptorCallbacks.hasNamedMethod(name, this._prototype) === false)\n                    return getPropertyResult;\n\n                return (...args) => {\n                    const namedMethodExpression = new NamedMethodExpression(name, args);\n                    return this.interceptorCallbacks.intercepted(namedMethodExpression);\n                }\n            },\n\n            set: (target, name, value) => {\n                const expression = new SetPropertyExpression(name, value);\n                const accepted = this.interceptorCallbacks.intercepted(expression);\n                if (accepted === true || accepted === undefined) {\n                    this._values[name] = value;\n                }\n\n                return accepted === undefined ? true : accepted;\n            },\n\n            apply: (target, thisArg, args) => {\n                const expression = new MethodExpression(args);\n                return this.interceptorCallbacks.intercepted(expression);\n            },\n\n            getPrototypeOf: (target) => {\n                if (this._prototype === null)\n                    return null;\n                return this._prototype.prototype;\n            },\n            setPrototypeOf: (target, prototype) => {\n                if (prototype !== undefined)\n                    this._prototype = prototype;\n                return true;\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacks.html":{"url":"classes/InterceptorCallbacks.html","title":"class - InterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacks\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacks\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                activeStrategy\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                            \n                                    Public\n                                setBehaviorStrategy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(strictStrategy: IInterceptorCallbacksStrategy, looseStrategy: IInterceptorCallbacksStrategy)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    strictStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    looseStrategy\n                                                  \n                                                        \n                                                                    IInterceptorCallbacksStrategy\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            activeStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        activeStrategy:     IInterceptorCallbacksStrategy\n\n                    \n                \n                    \n                        \n                            Type :     IInterceptorCallbacksStrategy\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:29\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:41\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:37\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBehaviorStrategy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBehaviorStrategy(behavior: MockBehavior)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:45\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        behavior\n                                                        \n                                                                    MockBehavior\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksLooseStrategy.html":{"url":"classes/InterceptorCallbacksLooseStrategy.html","title":"class - InterceptorCallbacksLooseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksLooseStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:32\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:16\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksLooseStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const getPropertyExpression = new GetPropertyExpression(methodName);\n        const setup = this.definedSetups.get(getPropertyExpression);\n        return setup !== undefined ? false : true;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksStrictStrategy.html":{"url":"classes/InterceptorCallbacksStrictStrategy.html","title":"class - InterceptorCallbacksStrictStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksStrictStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                hasNamedMethod\n                            \n                            \n                                    Public\n                                intercepted\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(definedSetups: DefinedSetups, tracker: Tracker)\n                    \n                \n                        \n                            \n                                Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    definedSetups\n                                                  \n                                                        \n                                                                    DefinedSetups\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    tracker\n                                                  \n                                                        \n                                                                    Tracker\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            hasNamedMethod\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        hasNamedMethod(methodName: string, prototype: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:29\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        prototype\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            intercepted\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        intercepted(expression: Expressions)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    Expressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Expressions, MethodExpression, NamedMethodExpression, SetPropertyExpression} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksStrictStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const hasNamedMethod = this.definedSetups.hasNamedMethod(methodName);\n        if (hasNamedMethod === true) return true;\n\n        if (prototype !== null && prototype[methodName] instanceof Function)\n            return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/It.html":{"url":"classes/It.html","title":"class - It","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  It\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                predicate\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Is\n                            \n                            \n                                    Static\n                                IsAny\n                            \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(predicate: IPredicate)\n                    \n                \n                        \n                            \n                                Defined in lib/expected-expressions/expression-predicates.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    predicate\n                                                  \n                                                        \n                                                                    IPredicate\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            predicate\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        predicate:     IPredicate\n\n                    \n                \n                    \n                        \n                            Type :     IPredicate\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Is\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Is(predicate: IPredicate)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:11\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        predicate\n                                                        \n                                                                    IPredicate\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     It | any\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            IsAny\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        IsAny()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:15\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     It | any\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(instance: T)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expected-expressions/expression-predicates.ts:19\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        instance\n                                                        \n                                                                    T\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpression.html":{"url":"classes/MethodExpression.html","title":"class - MethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:11\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionFormatter.html":{"url":"classes/MethodExpressionFormatter.html","title":"class - MethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: MethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/method-formatter.ts:10\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {MethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class MethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: MethodExpression): string{\n        const value = this.constantFormatter.format(expression.arguments);\n        return `(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionMatcher.html":{"url":"classes/MethodExpressionMatcher.html","title":"class - MethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: MethodExpression, right: ExpectedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/method-matcher.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    MethodExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {MethodExpression} from '../expressions';\nimport {ExpectedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class MethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: MethodExpression, right: ExpectedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpression.html":{"url":"classes/NamedMethodExpression.html","title":"class - NamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                arguments\n                            \n                            \n                                    Public\n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, args: any[])\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:2\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    args\n                                                  \n                                                        \n                                                                    any[]\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            arguments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        arguments:     any[]\n\n                    \n                \n                    \n                        \n                            Type :     any[]\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:2\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionFormatter.html":{"url":"classes/NamedMethodExpressionFormatter.html","title":"class - NamedMethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/named.method-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/named.method-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: NamedMethodExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/named.method-formatter.ts:10\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {NamedMethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class NamedMethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: NamedMethodExpression): string{\n        const formatted: string[] = [];\n\n        expression.arguments.forEach(arg=>{\n            formatted.push(this.constantFormatter.format(arg));\n        });\n\n        const value = formatted.join(', ');\n        return `${expression.name}(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionMatcher.html":{"url":"classes/NamedMethodExpressionMatcher.html","title":"class - NamedMethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/named.method-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(argumentsMatcher: ArgumentsMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/named.method-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    argumentsMatcher\n                                                  \n                                                        \n                                                                    ArgumentsMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/named.method-matcher.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    NamedMethodExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedNamedMethodExpression | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {NamedMethodExpression} from '../expressions';\nimport {ExpectedNamedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class NamedMethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name)\n            return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PlayTimes.html":{"url":"classes/PlayTimes.html","title":"class - PlayTimes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  PlayTimes\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/play-times.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                Exactly\n                            \n                            \n                                    Static\n                                Never\n                            \n                            \n                                    Static\n                                Once\n                            \n                            \n                                    Static\n                                Sequence\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Exactly\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Exactly(count: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:3\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        count\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Never\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Never()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Once\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Once()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:16\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     boolean\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            Sequence\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        Sequence(sequence: boolean[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/play-times.ts:25\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sequence\n                                                        \n                                                                    boolean[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class PlayTimes {\n\n    public static Exactly(count: number): () => boolean {\n        let invoked = 0;\n        return () => {\n            if (invoked >= count) return false;\n            invoked++;\n            return true;\n        };\n    }\n\n    public static Never(): () => boolean {\n        return () => false;\n    }\n\n    public static Once(): () => boolean {\n        let played = false;\n        return () => {\n            if (played) return false;\n            played = true;\n            return true;\n        };\n    }\n\n    public static Sequence(sequence: boolean[]): () => boolean {\n        let index = 0;\n        return () => {\n            const value = sequence[index];\n            index++;\n            return value;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SequenceId.html":{"url":"classes/SequenceId.html","title":"class - SequenceId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SequenceId\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/sequence-id.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                value\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 0\n                        \n                    \n                        \n                            \n                                    Defined in lib/sequence-id.ts:2\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            next\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        next()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/sequence-id.ts:4\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        export class SequenceId {\n    private value: number = 0;\n\n    public next(): number {\n        return this.value++;\n    }\n}\n\nconst instance = new SequenceId();\n\nexport function sequenceIdFactory(): SequenceId {\n    return instance;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpression.html":{"url":"classes/SetPropertyExpression.html","title":"class - SetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                name\n                            \n                            \n                                    Public\n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, value: any)\n                    \n                \n                        \n                            \n                                Defined in lib/expressions.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    name\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    value\n                                                  \n                                                        \n                                                                    any\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            name\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        name:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            value\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        value:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/expressions.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionFormatter.html":{"url":"classes/SetPropertyExpressionFormatter.html","title":"class - SetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/set.property-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantFormatter: ConstantFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/set.property-formatter.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantFormatter\n                                                  \n                                                        \n                                                                    ConstantFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expression: SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/set.property-formatter.ts:10\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expression\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {SetPropertyExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class SetPropertyExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: SetPropertyExpression): string{\n        const value = this.constantFormatter.format(expression.value);\n        return `Assignment of ${value} to property \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionMatcher.html":{"url":"classes/SetPropertyExpressionMatcher.html","title":"class - SetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/set.property-matcher.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                matched\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(constantMatcher: ConstantMatcher)\n                    \n                \n                        \n                            \n                                Defined in lib/expression-matchers/set.property-matcher.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    constantMatcher\n                                                  \n                                                        \n                                                                    ConstantMatcher\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            matched\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression | It)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/expression-matchers/set.property-matcher.ts:12\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        left\n                                                        \n                                                                    SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        right\n                                                        \n                                                                    ExpectedSetPropertyExpression | It\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     boolean\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedSetPropertyExpression} from '../expected-expressions/expected-expressions';\nimport {SetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class SetPropertyExpressionMatcher{\n\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackedExpressionsFormatter.html":{"url":"classes/TrackedExpressionsFormatter.html","title":"class - TrackedExpressionsFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrackedExpressionsFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/tracked-expressions-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expressionFormatter: ExpressionFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/tracked-expressions-formatter.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expressionFormatter\n                                                  \n                                                        \n                                                                    ExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(trackedExpressions: Expressions[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/tracked-expressions-formatter.ts:15\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\nimport {Expressions} from '../expressions';\n\nexport function trackedExpressionsFormatterFactory (): TrackedExpressionsFormatter {\n    return new TrackedExpressionsFormatter(expressionFormatterFactory());\n}\n\nexport class TrackedExpressionsFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expressions[]): string {\n        let result: string = '';\n        for (const expression of trackedExpressions) {\n            result += `${this.expressionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tracker.html":{"url":"classes/Tracker.html","title":"class - Tracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tracker\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/tracker.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                log\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                add\n                            \n                            \n                                    Public\n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sequenceId: SequenceId)\n                    \n                \n                        \n                            \n                                Defined in lib/tracker.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    sequenceId\n                                                  \n                                                        \n                                                                    SequenceId\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            log\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        log:     TrackedAction[]\n\n                    \n                \n                    \n                        \n                            Type :     TrackedAction[]\n\n                        \n                    \n                    \n                        \n                            Default value : []\n                        \n                    \n                        \n                            \n                                    Defined in lib/tracker.ts:7\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            add\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:13\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        action\n                                                        \n                                                                    MethodExpression | GetPropertyExpression | SetPropertyExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            get\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        get()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/tracker.ts:18\n                            \n                        \n\n                \n                    \n\n                            \n                                Returns :     []\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { GetPropertyExpression, MethodExpression, SetPropertyExpression } from \"./expressions\";\nimport { SequenceId, sequenceIdFactory } from \"./sequence-id\";\n\nexport type TrackedAction = { id: number, expression: MethodExpression | GetPropertyExpression | SetPropertyExpression };\n\nexport class Tracker {\n    private log: TrackedAction[] = [];\n\n    constructor(private sequenceId: SequenceId) {\n\n    }\n\n    public add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression): void {\n        const record = {id: this.sequenceId.next(), expression: action};\n        this.log.push(record);\n    }\n\n    public get(): TrackedAction[] {\n        return this.log;\n    }\n}\n\nexport function trackerFactory(): Tracker {\n    return new Tracker(sequenceIdFactory());\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Verifier.html":{"url":"classes/Verifier.html","title":"class - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  Verifier\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: ExpectedExpressionReflector, callCounter: CallCounter, verifyFormatter: VerifyFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    reflector\n                                                  \n                                                        \n                                                                    ExpectedExpressionReflector\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    callCounter\n                                                  \n                                                        \n                                                                    CallCounter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    verifyFormatter\n                                                  \n                                                        \n                                                                    VerifyFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            test\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/verifier.ts:26\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    IExpectedExpression\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        times\n                                                        \n                                                                    Times\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        expressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyError.html":{"url":"classes/VerifyError.html","title":"class - VerifyError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyError\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: string)\n                    \n                \n                        \n                            \n                                Defined in lib/verifier.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    message\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyFormatter.html":{"url":"classes/VerifyFormatter.html","title":"class - VerifyFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/verify-formatter.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(expectedExpressionFormatter: ExpectedExpressionFormatter, trackedExpressionsFormatter: TrackedExpressionsFormatter)\n                    \n                \n                        \n                            \n                                Defined in lib/formatters/verify-formatter.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                    expectedExpressionFormatter\n                                                  \n                                                        \n                                                                    ExpectedExpressionFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                                \n                                                    trackedExpressionsFormatter\n                                                  \n                                                        \n                                                                    TrackedExpressionsFormatter\n                                                        \n                                                  \n                                                    \n                                                            no\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/formatters/verify-formatter.ts:18\n                            \n                        \n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        expected\n                                                        \n                                                                    ExpectedExpressions\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        timesMessage\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        haveBeenCalledTimes\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        trackedExpressions\n                                                        \n                                                                    Expressions[]\n                                                        \n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        mockName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            yes\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {Expressions} from '../expressions';\nimport {ExpectedExpressionFormatter, expectedExpressionFormatterFactory} from './expected-expression-formatter';\nimport {TrackedExpressionsFormatter, trackedExpressionsFormatterFactory} from './tracked-expressions-formatter';\n\nexport function verifyFormatterFactory(): VerifyFormatter {\n    return new VerifyFormatter(expectedExpressionFormatterFactory(), trackedExpressionsFormatterFactory());\n}\n\nexport class VerifyFormatter {\n\n    constructor(\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string): string {\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\n        const delimiter = '-------------------------------------';\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`\n    }\n}\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nv2.1.0\n\nMock behaviours (strict and loose) have been introduced.\n\nv2.3.0\n\nMock prototype has been introduced. Now it is possible to set/read prototype of mock with prototypeof function.\nAlso mock object supports Object.getPrototypeOf and Object.setPrototypeOf functions. You may need it to make work \ninstanceof operator.\n\nv2.3.1\n\nThe NPM package is compiled as es5 code.\nv2.4.0\n\nIt.IsAny predicate has been introduced.\nv2.5.0\n\nIn case of false assertion the dump of the tracked expressions is printed.\nv2.5.1\n\nThe latest setup has precedence\nv2.6.0\n\nThe play setup has been introduced\n\nv2.6.1\n\nThe verify methods can be used in fluent call\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockBehavior   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            Range   (lib/.../times.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n        \n            \n                \n                    \n                        \n                        MockBehavior\n                    \n                \n                        \n                            \n                                 Strict\n                            \n                        \n                        \n                            \n                                 Loose\n                            \n                        \n            \n        \n\n    lib/times.ts\n    \n        \n            \n                \n                    \n                        \n                        Range\n                    \n                \n                        \n                            \n                                 Exclusive\n                            \n                        \n                        \n                            \n                                 Inclusive\n                            \n                        \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            argumentsMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            callCounterFactory   (lib/.../call-counter.ts)\n                        \n                        \n                            expectedExpressionFormatterFactory   (lib/.../expected-expression-formatter.ts)\n                        \n                        \n                            expressionFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            expressionMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            format   (lib/.../format-string.ts)\n                        \n                        \n                            interceptorCallbacksFactory   (lib/.../interceptor-callbacks.ts)\n                        \n                        \n                            methodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            methodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            namedMethodMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            sequenceIdFactory   (lib/.../sequence-id.ts)\n                        \n                        \n                            setPropertyFormatterFactory   (lib/.../factories.ts)\n                        \n                        \n                            setPropertyMatcherFactory   (lib/.../factories.ts)\n                        \n                        \n                            trackedExpressionsFormatterFactory   (lib/.../tracked-expressions-formatter.ts)\n                        \n                        \n                            trackerFactory   (lib/.../tracker.ts)\n                        \n                        \n                            verifierFactory   (lib/.../verifier.ts)\n                        \n                        \n                            verifyFormatterFactory   (lib/.../verify-formatter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expression-matchers/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            argumentsMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nargumentsMatcherFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            expressionMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionMatcherFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodMatcherFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodMatcherFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyMatcherFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyMatcherFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/call-counter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            callCounterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ncallCounterFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/formatters/expected-expression-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expectedExpressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpectedExpressionFormatterFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/formatters/factories.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            expressionFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nexpressionFormatterFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            methodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nmethodFormatterFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            namedMethodFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nnamedMethodFormatterFactory()\n                    \n                \n\n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            setPropertyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsetPropertyFormatterFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/format-string.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            format\n                            \n                            \n                        \n                    \n                \n                \n                    \nformat(template: undefined, ...args: undefined)\n                    \n                \n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        template\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        args\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            interceptorCallbacksFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ninterceptorCallbacksFactory(definedSetups: undefined, tracker: undefined)\n                    \n                \n\n\n\n                \n                    \n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        definedSetups\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        tracker\n                                                    \n                                                    \n                                                            no\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                    \n                \n            \n        \n\n    lib/sequence-id.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            sequenceIdFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nsequenceIdFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/formatters/tracked-expressions-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackedExpressionsFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackedExpressionsFormatterFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/tracker.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            trackerFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \ntrackerFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/verifier.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifierFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifierFactory()\n                    \n                \n\n\n\n            \n        \n\n    lib/formatters/verify-formatter.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            verifyFormatterFactory\n                            \n                            \n                        \n                    \n                \n                \n                    \nverifyFormatterFactory()\n                    \n                \n\n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nmoq.ts\nMoq for Typescript. Inspired by c# Moq library.\nDocumentation https://dvabuzyarov.github.io/moq.ts/\nImportant\nThis implementation depends on Proxy object.\nSo if your production code is not compatible with this I would recommend you separate you production code and testing code into dedicated projects.\nIf you need help with this then ask me.\nInstall\nnpm install moq.ts --save-dev\nQuick start\nmoq.ts as the original Moq library is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).\nYou can find a pretty full set of usages in the integration tests. Check out tests.integration folder.\nMocking property of objects\n-\nmock-get.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedGetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property1: number;\n    property2: number;\n    property3: number;\n    property4: number;\n    method(): void;\n}\n\nconst property4Name = 'property4';\nconst mockName = 'mock name is optional';\nconst mock = new Mock(mockName)\n    .setup(instance => instance.property1)\n    .returns(1)\n\n    .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property2'))\n    .returns(100)\n\n    //let's deny any write operation on the property for all values\n    .setup(instance => {instance.property2 = It.Is(() => true)})\n    .returns(false)\n\n    .setup(instance => instance.property3)\n    .callback(()=> 10 + 10)\n\n    .setup(instance => instance[property4Name])\n    .throws(new Error('property4 access'))\n\n    //since a method is a property that holds a pointer to a function\n    .setup(instance => instance.method)\n    .returns(()=>{console.log('The method was called')});\n\nconst object = mock.object();\nobject.method();\n\nmock.verify(instance=> instance.property1, Times.Never());Mocking property setting\n-\nThe documentation on returned value from 'set hook' on Proxy object\nmock-set.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedSetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property: number|any;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => {instance.property = 1})\n    //true - allows the write operation\n    .returns(true)\n\n    .setup(instance => It.Is((expression: ExpectedSetPropertyExpression) => expression.name === 'property' && expression.value === 2))\n    //false - denies the write operation\n    .returns(false)\n\n    .setup(instance => {instance.property = It.Is(value => value === 3)})\n    // allows the write operation\n    .callback(()=> true)\n\n    .setup(instance => {instance.property = value})\n    .throws(new Error('an object has been written into property'));\n\n\nconst object = mock.object();\nobject.property = 1;\n\nmock.verify(instance=> {instance.property = 1}, Times.Once());Mocking functions\n-\nmock-method.property.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestFunction {\n    (arg: number|any): string;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => instance(1))\n    .returns('called with 1')\n\n    .setup(instance => instance(2))\n    .callback((argument)=> argument === 2 ? 'called with 2' : `called with ${argument}`)\n\n    .setup(instance => instance(value))\n    .throws(new Error('Argument is object with date'))\n\n    .setup(instance => instance(It.Is(value => value === 4)))\n    .returns('called with 4');\n\nconst method = mock.object();\nconst actual = method(1);\n\nmock.verify(instance => instance(1), Times.Once());\nmock.verify(instance => instance(It.Is(value=> value === 1)), Times.Exactly(1));\n\n Mocking functions of objects\n -\nmock-named.method.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestObject {\n    method(arg1: number, arg2: string): Date;\n}\n\nconst values = ['a', 'b', 'c'];\n\nconst mock = new Mock()\n    .setup(instance => instance.method(1, values[0]))\n    .returns(new Date(2016))\n\n    .setup(instance => instance.method(It.Is(value => value === 2), values[1]))\n    .callback((arg1, arg2)=> new Date(2017 + arg1))\n\n    .setup(instance => instance.method(3, It.Is(value => value === values[2])))\n    .throws(new Error('Invoking method with 3 and c'));\n\nconst object = mock.object();\nconst actual = object.method(1, 'a');\n\nmock.verify(instance => instance.method(2, 'a'), Times.Never());Mock behavior\nYou can control mock behavior when accessing to a property without a corresponding setup. \n    mock = new Mock()\n    .setBehaviorStrategy(MockBehavior.Loose)\n    //or\n    .setBehaviorStrategy(MockBehavior.Strict);The default behavior is strict.\nMockBehavior.Strict\nAccessing to an unset property will return undefined value;\nAccessing to an unset method of an object will throw TypeError exception; It does not matter if a method is a part of mocked type.\nIf you want to track a method you can define a default setup:\nconst mock = new Mock()\n    .setup(instance => instance.method(It.Is(()=>true), It.Is(()=>true)))\n    .returns(undefined);MockBehavior.Loose\nAccessing to an unset property or a method will return a pointer to a spy function;\nYou can call this function and it will be tracked.\nMock prototype\nIf you need to make work instanceof operator or you need to deal with prototype of the mock object you can \nuse prototypeof function of Mock class. Or you can use Object.getPrototypeOf or Object.setPrototypeOf functions\non mock object.\nclass TestObject implements ITestObject {\n\n}\n\nconst mock = new Mock()\n                .prototypeof(TestObject)\n                .object();\n\nmock.object() instanceof TestObject;// trueSponsored by 2BIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n    \n            \n                \n                    \n                        \n                        41 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpectedExpressions   (lib/.../expected-expressions.ts)\n                        \n                        \n                            Expressions   (lib/.../expressions.ts)\n                        \n                        \n                            TrackedAction   (lib/.../tracker.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expected-expressions/expected-expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        ExpectedExpressions\n                    \n                \n                \n                    \n                        ExpectedExpressions:     ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It\n\n                    \n                \n            \n        \n\n    lib/expressions.ts\n    \n        \n            \n                \n                    \n                        \n                        Expressions\n                    \n                \n                \n                    \n                        Expressions:     MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression\n\n                    \n                \n            \n        \n\n    lib/tracker.ts\n    \n        \n            \n                \n                    \n                        \n                        TrackedAction\n                    \n                \n                \n                    \n                        TrackedAction:     literal type\n\n                    \n                \n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            instance   (lib/.../sequence-id.ts)\n                        \n                        \n                            Proxy   (lib/.../interceptor.ts)\n                        \n                        \n                            Proxy   (lib/.../expected-expression-reflector.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/sequence-id.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            instance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        instance:     \n\n                    \n                \n                    \n                        \n                            Default value : new SequenceId()\n                        \n                    \n\n\n            \n        \n\n    lib/interceptor.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n    lib/expected-expressions/expected-expression-reflector.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Proxy\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        Proxy:     any\n\n                    \n                \n                    \n                        \n                            Type :     any\n\n                        \n                    \n\n\n            \n        \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
