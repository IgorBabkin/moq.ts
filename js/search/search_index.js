var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"1.0.0","fields":[{"name":"title","boost":10},{"name":"body","boost":1}],"ref":"url","tokenizer":"default","documentStore":{"store":{"index.html":["1","10","2","2bit","3","4","access","actual","allow","arg","arg1","arg2","argument","ask","b","behavior","c","call","callback","callback((arg1","callback((argu","check","class","code","compat","compil","const","control","correspond","date","date(2016","date(2017","deal","dedic","default","defin","deni","depend","dev","document","error('an","error('argu","error('invok","error('property4","except","expectedgetpropertyexpress","expectedsetpropertyexpress","expression.nam","expression.valu","fals","field","find","folder","friendli","full","fulli","function","get","get.property.integrationtests.t","help","hold","hook","https://dvabuzyarov.github.io/moq.t","implement","import","index","inspir","instal","instance(1","instance(2","instance(it.is(valu","instance(valu","instance.method","instance.method(1","instance.method(2","instance.method(3","instance.method(it.is(()=>tru","instance.method(it.is(valu","instance.properti","instance.property1","instance.property2","instance.property3","instance[property4nam","instanceof","integr","intend","interfac","it.i","it.is(()=>tru","it.is((express","it.is(valu","itestfunct","itestobject","let'","librari","magic","make","match","matter","method","method(1","method(arg1","method.property.integrationtests.t","minimalist","mock","mock(mocknam","mock.object","mock.verify(inst","mockbehavior.strict","mocknam","moq","moq.t","name","named.method.integrationtests.t","need","new","npm","number","number|ani","object","object.getprototypeof","object.method","object.method(1","object.properti","object.setprototypeof","oper","option","origin","out","part","pointer","pretti","product","project","properti","property1","property2","property3","property4","property4nam","prototyp","prototypeof","prototypeof(testobject","proxi","quick","recommend","refactor","result","return","returns('cal","returns(()=>{console.log('th","returns(1","returns(100","returns(fals","returns(new","returns(tru","returns(undefined);mockbehavior.loos","save","separ","set","set.property.integrationtests.t","setbehaviorstrategy(mockbehavior.loos","setbehaviorstrategy(mockbehavior.strict);th","setup","setup(inst","simpl","spi","start","still","strict","string","strongli","test","testobject","tests.integr","therefor","throw","throws(new","time","times.exactly(1","times.never());mock","times.onc","times.once());mock","track","true","truesponsor","type","typeerror","typescript","undefin","unset","us","usag","valu","values[0","values[1","values[2","verifi","void","want","whit","without","work","write","written"],"overview.html":["39","4","class","interfac","match","overview","result"],"changelog.html":["assert","behaviour","case","changelog","code","compil","dump","es5","express","fals","function","get","instanceof","introduc","it.isani","latest","loos","make","match","mock","need","now","npm","object","object.getprototypeof","object.setprototypeof","oper","packag","possibl","preced","predic","print","prototyp","prototypeof","result","set/read","setup","start","strict","support","track","v2.1.0","v2.3.0","v2.3.1","v2.4.0","v2.5.0","v2.5.1","work"],"modules.html":["match","modul","result"],"classes/ArgumentsMatcher.html":["any|it","argumentsmatch","boolean","class","const","constant","constantmatch","constructor","constructor(constantmatch","constructor(priv","defin","descript","expect","export","expressions/express","fals","file","import","index","info","left","left.foreach((lvalu","left.length","lib/express","match","matched(left","matcher","matcher.t","matcher.ts:4","matcher.ts:9","matchers/argu","method","name","option","paramet","predic","public","result","return","right","right.length","right[index","rvalu","sourc","this.constantmatcher.matched(lvalu","true","type"],"classes/CallCounter.html":["0","1","callcount","callcounter(expressionmatcherfactori","callcounterfactori","class","const","constructor","constructor(expressionmatch","constructor(priv","count","count(expect","counter.t","counter.ts:12","counter.ts:6","defin","descript","expect","expectedexpress","export","express","expressionmatch","expressionmatcherfactori","expressions/expect","file","function","import","index","info","lib/cal","match","matcher","matchers/express","matchers/factori","method","name","new","number","option","paramet","public","result","return","sourc","this.expressionmatcher.matched(express","true","type"],"classes/ConstantFormatter.html":["any|it","array","class","const","constantformatt","constantformatter().format(object[index","defin","descript","description.push(new","expect","export","expressions/express","file","format","format(object","formatter.t","formatter.ts:5","import","index","info","instanceof","it).pred","it.is(${(object","lib/formatters/const","match","method","name","object","option","paramet","predic","public","result","return","sourc","string","type","typeof"],"classes/ConstantMatcher.html":["any|it","boolean","class","constantmatch","defin","descript","expect","export","expressions/express","file","import","index","info","instanceof","it).test(left","left","lib/express","match","matched(left","matcher.t","matcher.ts:5","matchers/const","method","name","option","paramet","predic","public","result","return","right","sourc","type"],"classes/DefinedSetups.html":["add","add(key","boolean","class","const","constructor","constructor(expressionmatch","constructor(priv","defin","definedsetup","descript","expect","expectedexpress","expectednamedmethodexpress","expectednamedmethodexpression).nam","export","express","expressionmatch","expressions/expect","fals","file","get(express","hasnamedmethod","hasnamedmethod(nam","import","index","info","instanceof","isetupinvok","key","lib/defin","match","matcher","matchers/express","method","moq","name","option","paramet","privat","public","result","return","setup","setups.t","setups.ts:13","setups.ts:17","setups.ts:26","setups.ts:7","sourc","string","this.expressionmatcher.matched(express","this.setup","this.setups.unshift([key","true","type","undefin","valu","void"],"classes/ExpectedExpressionFormatter.html":["call","class","const","constructor","constructor(expressionformatt","constructor(priv","defin","descript","expect","expectedexpress","expectedexpressionformatt","expectedexpressionformatter(expressionformatterfactori","expectedexpressionformatterfactori","export","express","expressiondescript","expressiondescription}${mockdescript","expressionformatt","expressionformatterfactori","expressions/expect","factori","file","format","format(expect","formatt","formatter.t","formatter.ts:15","formatter.ts:9","function","havebeencalledtim","import","index","info","lib/formatters/expect","match","method","mockdescript","mocknam","name","new","number","option","paramet","public","result","return","sourc","string","this.expressionformatter.format(expect","time(","timesmessag","timesmessage.tolowercas","true","type","undefin"],"classes/ExpectedExpressionReflector.html":["appli","arg","class","const","declar","defin","descript","expect","expectedexpress","expectedexpressionreflector","expectedgetpropertyexpress","expectedgetpropertyexpression(nam","expectedmethodexpress","expectedmethodexpression(arg","expectednamedmethodexpress","expectednamedmethodexpression(nam","expectedsetpropertyexpress","expectedsetpropertyexpression(nam","export","express","expression(proxi","expressionproxi","expressions/expect","file","iexpectedexpress","import","index","info","instanc","instanceof","interfac","lib/expect","match","method","name","new","option","paramet","predic","privat","proxi","proxy(funct","proxy:ani","public","reflect","reflect(express","reflectedinfo","reflector.t","reflector.ts:41","result","return","set","sourc","t","target","this.expressionproxi","this.reflectedinfo","thisarg","true","type","undefin","valu","var","void"],"classes/ExpectedGetPropertyExpression.html":["class","expectedexpress","expectedgetpropertyexpress","expectedmethodexpress","expectednamedmethodexpress","expectedsetpropertyexpress","export","express","expressions.t","expressions/expect","extend","file","getpropertyexpress","import","info","lib/expect","match","methodexpress","namedmethodexpress","predic","result","setpropertyexpress","sourc","type"],"classes/ExpectedMethodExpression.html":["class","expectedexpress","expectedgetpropertyexpress","expectedmethodexpress","expectednamedmethodexpress","expectedsetpropertyexpress","export","express","expressions.t","expressions/expect","extend","file","getpropertyexpress","import","info","lib/expect","match","methodexpress","namedmethodexpress","predic","result","setpropertyexpress","sourc","type"],"classes/ExpectedNamedMethodExpression.html":["class","expectedexpress","expectedgetpropertyexpress","expectedmethodexpress","expectednamedmethodexpress","expectedsetpropertyexpress","export","express","expressions.t","expressions/expect","extend","file","getpropertyexpress","import","info","lib/expect","match","methodexpress","namedmethodexpress","predic","result","setpropertyexpress","sourc","type"],"classes/ExpectedSetPropertyExpression.html":["class","expectedexpress","expectedgetpropertyexpress","expectedmethodexpress","expectednamedmethodexpress","expectedsetpropertyexpress","export","express","expressions.t","expressions/expect","extend","file","getpropertyexpress","import","info","lib/expect","match","methodexpress","namedmethodexpress","predic","result","setpropertyexpress","sourc","type"],"classes/ExpressionFormatter.html":["class","constant","constantformatt","constructor","constructor(getpropertyformatt","constructor(priv","defin","descript","expect","export","express","expressionformatt","expressions/express","expressions|it","file","format","format(express","formatt","formatter.t","formatter.ts:12","formatter.ts:22","get.properti","getpropertyexpress","getpropertyexpressionformatt","getpropertyformatt","import","index","info","instanceof","lib/formatters/express","match","method","methodexpress","methodexpressionformatt","methodformatt","name","named.method","namedmethodexpress","namedmethodexpressionformatt","namedmethodformatt","option","paramet","predic","privat","public","result","return","set.properti","setpropertyexpress","setpropertyexpressionformatt","setpropertyformatt","sourc","string","this.constantformatter.format(express","this.getpropertyformatter.format(express","this.methodformatter.format(express","this.namedmethodformatter.format(express","this.setpropertyformatter.format(express","type","undefin"],"classes/ExpressionMatcher.html":["boolean","class","constructor","constructor(getpropertyexpressionmatch","constructor(priv","defin","descript","expect","expectedexpress","expectedgetpropertyexpress","expectedmethodexpress","expectednamedmethodexpress","expectedsetpropertyexpress","export","express","expressionmatch","expressions/expect","expressions/express","fals","file","get.properti","getpropertyexpress","getpropertyexpressionmatch","import","index","info","instanceof","left","lib/express","match","matched(left","matcher","matcher.t","matcher.ts:15","matcher.ts:24","matchers/express","method","methodexpress","methodexpressionmatch","name","named.method","namedmethodexpress","namedmethodexpressionmatch","option","paramet","predic","privat","public","result","return","right","set.properti","setpropertyexpress","setpropertyexpressionmatch","sourc","this.getpropertyexpressionmatcher.matched(left","this.methodexpressionmatcher.matched(left","this.namedmethodexpressionmatcher.matched(left","this.setpropertyexpressionmatcher.matched(left","true","type","undefin"],"classes/GetPropertyExpression.html":["arg","argument","class","constructor","constructor(arg","constructor(nam","constructor(publ","defin","descript","export","express","file","getpropertyexpress","index","info","lib/expressions.t","lib/expressions.ts:18","lib/expressions.ts:19","match","methodexpress","name","namedmethodexpress","option","paramet","properti","public","result","setpropertyexpress","sourc","string","this.argu","type","valu"],"classes/GetPropertyExpressionFormatter.html":["class","defin","descript","export","express","expression.nam","file","format","format(express","formatter.t","formatter.ts:5","getpropertyexpress","getpropertyexpressionformatt","getter","import","index","info","lib/formatters/get.properti","match","method","name","option","paramet","public","result","return","sourc","string","type"],"classes/GetPropertyExpressionMatcher.html":["boolean","class","const","defin","descript","expect","expectedgetpropertyexpress","expectedgetpropertyexpression|it","export","express","expressions/expect","expressions/express","fals","file","getpropertyexpress","getpropertyexpressionmatch","import","index","info","instanceof","it).test(left","left","left.nam","lib/express","match","matched(left","matcher.t","matcher.ts:7","matchers/get.properti","method","name","option","paramet","predic","public","result","return","right","rightexpress","rightexpression.nam","sourc","true","type"],"classes/Interceptor.html":["_prototyp","_proxi","_valu","accept","appli","arg","callback","callbacks/interceptor","class","const","constructor","constructor(interceptorcallback","constructor(priv","createobject","declar","defin","descript","export","express","fals","file","function","getpropertyexpress","getpropertyexpression(nam","getpropertyresult","getprototypeof","iinterceptorcallbacksstrategi","import","index","info","interceptor","interceptorcallback","lib/interceptor.t","lib/interceptor.ts:14","lib/interceptor.ts:20","lib/interceptor.ts:28","match","method","methodexpress","methodexpression(arg","name","namedmethodexpress","namedmethodexpression(nam","new","null","object","option","paramet","privat","prototyp","prototypeof","prototypeof(prototyp","proxi","proxy(funct","public","result","return","set","setpropertyexpress","setpropertyexpression(nam","setprototypeof","sourc","t","target","this._prototyp","this._prototype.prototyp","this._proxi","this._values.hasownproperty(nam","this._values[nam","this.createobject","this.interceptorcallbacks.hasnamedmethod(nam","this.interceptorcallbacks.intercepted(express","this.interceptorcallbacks.intercepted(getpropertyexpress","this.interceptorcallbacks.intercepted(namedmethodexpress","thisarg","true","type","undefin","valu","var"],"classes/InterceptorCallbacks.html":["activestrategi","behavior","boolean","callbacks.loose.strategi","callbacks.strict.strategi","callbacks.t","callbacks.ts:29","callbacks.ts:37","callbacks.ts:41","callbacks.ts:45","callbacks/interceptor","class","const","constructor","constructor(priv","constructor(strictstrategi","defin","definedsetup","descript","enum","export","express","extend","file","function","hasnamedmethod","hasnamedmethod(methodnam","iinterceptorcallback","iinterceptorcallbacksstrategi","implement","import","index","info","intercept","intercepted(express","interceptor","interceptorcallback","interceptorcallbacks(strictstrategi","interceptorcallbacksfactory(definedsetup","interceptorcallbacksloosestrategi","interceptorcallbacksloosestrategy(definedsetup","interceptorcallbacksstrictstrategi","interceptorcallbacksstrictstrategy(definedsetup","interfac","lib/interceptor","loos","loosestrategi","match","method","methodnam","mockbehavior","mockbehavior.loos","mockbehavior.strict","name","new","option","paramet","privat","prototyp","public","result","return","setbehaviorstrategi","setbehaviorstrategy(behavior","setup","sourc","strict","strictstrategi","string","this.activestrategi","this.activestrategy.hasnamedmethod(methodnam","this.activestrategy.intercepted(express","this.loosestrategi","this.strictstrategi","tracker","type","void"],"classes/InterceptorCallbacksLooseStrategy.html":["boolean","callback","callbacks.loose.strategy.t","callbacks.loose.strategy.ts:16","callbacks.loose.strategy.ts:32","callbacks.loose.strategy.ts:9","callbacks/interceptor","class","const","constructor","constructor(definedsetup","constructor(priv","defin","definedsetup","descript","export","express","fals","file","getpropertyexpress","getpropertyexpression(methodnam","hasnamedmethod","hasnamedmethod(methodnam","iinterceptorcallbacksstrategi","implement","import","index","info","instanceof","intercept","intercepted(express","interceptor","interceptorcallbacksloosestrategi","lib/interceptor","match","method","methodexpress","methodnam","name","namedmethodexpress","new","option","paramet","privat","prototyp","public","result","return","setpropertyexpress","setup","setup.invok","setup.invoke((expression).argu","setup.invoke([(expression).valu","sourc","string","this.definedsetups.get(express","this.definedsetups.get(getpropertyexpress","this.tracker.add(express","tracker","true","type","undefin"],"classes/InterceptorCallbacksStrictStrategy.html":["boolean","callback","callbacks.strict.strategy.t","callbacks.strict.strategy.ts:13","callbacks.strict.strategy.ts:29","callbacks.strict.strategy.ts:6","callbacks/interceptor","class","const","constructor","constructor(definedsetup","constructor(priv","defin","definedsetup","descript","export","express","fals","file","function","hasnamedmethod","hasnamedmethod(methodnam","iinterceptorcallbacksstrategi","implement","import","index","info","instanceof","intercept","intercepted(express","interceptor","interceptorcallbacksstrictstrategi","lib/interceptor","match","method","methodexpress","methodnam","name","namedmethodexpress","null","option","paramet","privat","prototyp","prototype[methodnam","public","result","return","setpropertyexpress","setup","setup.invok","setup.invoke((expression).argu","setup.invoke([(expression).valu","sourc","string","this.definedsetups.get(express","this.definedsetups.hasnamedmethod(methodnam","this.tracker.add(express","tracker","true","type","undefin"],"classes/It.html":["boolean","catch","class","const","constructor","constructor(pred","constructor(publ","defin","descript","e","export","expressions/express","fals","file","index","info","instanc","interfac","ipred","is(pred","isani","it(pred","lib/expect","match","method","name","new","option","paramet","predic","predicates.t","predicates.ts:11","predicates.ts:15","predicates.ts:19","predicates.ts:6","predicates.ts:7","properti","public","result","return","sourc","static","t","test","test(inst","this.predicate(inst","tri","true","type","undefin"],"classes/MethodExpression.html":["arg","argument","class","constructor","constructor(arg","constructor(publ","defin","descript","export","express","file","getpropertyexpress","index","info","lib/expressions.t","lib/expressions.ts:11","match","methodexpress","name","namedmethodexpress","option","paramet","properti","public","result","setpropertyexpress","sourc","string","this.argu","type","valu"],"classes/MethodExpressionFormatter.html":["class","const","constant","constantformatt","constructor","constructor(constantformatt","constructor(priv","defin","descript","export","express","file","format","format(express","formatt","formatter.t","formatter.ts:10","formatter.ts:4","import","index","info","lib/formatters/method","match","method","methodexpress","methodexpressionformatt","name","option","paramet","public","result","return","sourc","string","this.constantformatter.format(expression.argu","type","valu"],"classes/MethodExpressionMatcher.html":["argument","argumentsmatch","boolean","class","const","constructor","constructor(argumentsmatch","constructor(priv","defin","descript","expect","expectedmethodexpress","expectedmethodexpression|it","export","express","expressions/expect","expressions/express","file","import","index","info","instanceof","it).test(left","left","lib/express","match","matched(left","matcher","matcher.t","matcher.ts:12","matcher.ts:6","matchers/method","method","methodexpress","methodexpressionmatch","name","option","paramet","predic","public","result","return","right","rightexpress","rightexpression.argu","sourc","this.argumentsmatcher.matched(left.argu","type"],"classes/Mock.html":["callback","callbacks/interceptor","class","const","constructor","constructor(nam","defin","definedsetup","definedsetups(expressionmatcherfactori","descript","expect","expectedexpress","expectedexpressionreflector","export","express","expressionmatcherfactori","expressionreflector","expressions/expect","extend","file","iexpectedexpress","iinterceptorcallback","imock","implement","import","info","interceptedcallback","interceptor","interceptor(callback","interceptorcallbacksfactori","interceptorcallbacksfactory(definedsetup","interceptorfactori","interceptorfactory(interceptedcallback","isetup","isetupinvok","lib/mock.t","lib/mock.ts:58","match","matchers/factori","mock","mockbehavior","mockcor","moq","name","new","object","option","paramet","privat","prototypeof(prototyp","public","reflector","result","return","setbehaviorstrategy(behaviorstrategi","setup","setup(express","setup(mock","setupfactori","sourc","string","super","t","this.definedsetups.add(expectedexpress","this.expressionreflector.reflect(express","this.interceptedcallbacks.setbehaviorstrategy(behaviorstrategi","this.interceptor","this.interceptor.object","this.interceptor.prototypeof(prototyp","this.nam","this.setupfactory(thi","this.tracker.get","this.verifier.test(express","time","times.onc","tracker","true","type","undefin","verifi","verifierfactori","verify(express","void"],"classes/MockCore.html":["behaviorstrategi","callback","callbacks/interceptor","class","const","constructor","constructor(expressionreflector","constructor(nam","defin","definedsetup","definedsetups(expressionmatcherfactori","descript","expect","expectedexpress","expectedexpressionreflector","export","express","expressionmatcherfactori","expressionreflector","expressions/expect","extend","file","function","iexpectedexpress","iinterceptorcallback","imock","implement","import","index","info","interceptedcallback","interceptor","interceptor(callback","interceptorcallbacksfactori","interceptorcallbacksfactory(definedsetup","interceptorfactori","interceptorfactory(interceptedcallback","isetup","isetupinvok","lib/mock.t","lib/mock.ts:17","lib/mock.ts:23","lib/mock.ts:26","lib/mock.ts:31","lib/mock.ts:38","lib/mock.ts:43","lib/mock.ts:47","lib/mock.ts:52","match","matchers/factori","method","mock","mockbehavior","mockcor","moq","name","new","object","option","paramet","privat","properti","prototyp","prototypeof","prototypeof(prototyp","public","reflector","result","return","setbehaviorstrategi","setbehaviorstrategy(behaviorstrategi","setup","setup(express","setup(mock","setupfactori","sourc","string","super","t","this.definedsetups.add(expectedexpress","this.expressionreflector.reflect(express","this.interceptedcallbacks.setbehaviorstrategy(behaviorstrategi","this.interceptor","this.interceptor.object","this.interceptor.prototypeof(prototyp","this.nam","this.setupfactory(thi","this.tracker.get","this.verifier.test(express","time","times.onc","tracker","true","type","undefin","verifi","verifierfactori","verify(express","void"],"classes/NamedMethodExpression.html":["arg","argument","class","constructor","constructor(arg","constructor(nam","constructor(publ","defin","descript","export","express","file","getpropertyexpress","index","info","lib/expressions.t","lib/expressions.ts:2","lib/expressions.ts:4","match","methodexpress","name","namedmethodexpress","option","paramet","properti","public","result","setpropertyexpress","sourc","string","this.argu","type","valu"],"classes/NamedMethodExpressionFormatter.html":["class","const","constant","constantformatt","constructor","constructor(constantformatt","constructor(priv","defin","descript","export","express","expression.arguments.foreach(arg","expression.name}(${valu","file","format","format(express","formatt","formatted.join","formatted.push(this.constantformatter.format(arg","formatter.t","formatter.ts:10","formatter.ts:4","import","index","info","lib/formatters/named.method","match","method","name","namedmethodexpress","namedmethodexpressionformatt","option","paramet","public","result","return","sourc","string","type","valu"],"classes/NamedMethodExpressionMatcher.html":["argument","argumentsmatch","boolean","class","const","constructor","constructor(argumentsmatch","constructor(priv","defin","descript","expect","expectednamedmethodexpress","expectednamedmethodexpression|it","export","express","expressions/expect","expressions/express","fals","file","import","index","info","instanceof","it).test(left","left","left.nam","lib/express","match","matched(left","matcher","matcher.t","matcher.ts:12","matcher.ts:6","matchers/named.method","method","name","namedmethodexpress","namedmethodexpressionmatch","option","paramet","predic","public","result","return","right","rightexpress","rightexpression.argu","rightexpression.nam","sourc","this.argumentsmatcher.matched(left.argu","type"],"classes/SetPropertyExpression.html":["arg","argument","class","constructor","constructor(arg","constructor(nam","constructor(publ","defin","descript","export","express","file","getpropertyexpress","index","info","lib/expressions.t","lib/expressions.ts:24","lib/expressions.ts:25","lib/expressions.ts:26","match","methodexpress","name","namedmethodexpress","option","paramet","properti","public","result","setpropertyexpress","sourc","string","this.argu","type","valu"],"classes/SetPropertyExpressionFormatter.html":["assign","class","const","constant","constantformatt","constructor","constructor(constantformatt","constructor(priv","defin","descript","export","express","expression.nam","file","format","format(express","formatt","formatter.t","formatter.ts:10","formatter.ts:4","import","index","info","lib/formatters/set.properti","match","method","name","option","paramet","properti","public","result","return","setpropertyexpress","setpropertyexpressionformatt","sourc","string","this.constantformatter.format(expression.valu","type","valu"],"classes/SetPropertyExpressionMatcher.html":["boolean","class","const","constant","constantmatch","constructor","constructor(constantmatch","constructor(priv","defin","descript","expect","expectedsetpropertyexpress","expectedsetpropertyexpression|it","export","express","expressions/expect","expressions/express","fals","file","import","index","info","instanceof","it).test(left","left","left.nam","lib/express","match","matched(left","matcher","matcher.t","matcher.ts:12","matcher.ts:6","matchers/set.properti","method","name","option","paramet","predic","public","result","return","right","rightexpress","rightexpression.nam","rightexpression.valu","setpropertyexpress","setpropertyexpressionmatch","sourc","this.constantmatcher.matched(left.valu","true","type"],"classes/Setup.html":["action","arg","callback","callback(callback","callback.apply(undefin","class","constructor","constructor(mock","constructor(priv","defin","descript","except","export","file","function","imock","implement","import","index","info","invok","invoke(arg","isetupinvok","lib/setup.t","lib/setup.ts:10","lib/setup.ts:14","lib/setup.ts:19","lib/setup.ts:24","lib/setup.ts:4","match","method","mock","moq","name","option","paramet","privat","public","result","return","returns(valu","setup","sourc","texcept","this.act","this.action(arg","this.mock","throw","throws(except","tresult","true","tvalu","type","valu","void"],"classes/Times.html":["0","1","_atmostonc","_never","_onc","atleast","atleast(callcount","atleastonc","atmost","atmost(callcount","atmostonc","between","between(callcountfrom","boolean","call","callcount","callcountfrom","callcountto","class","constructor","constructor(evalu","constructor(priv","defin","descript","enum","evalu","exactli","exactly(callcount","exclus","expect","export","file","function","inclus","index","info","lib/times.t","lib/times.ts:10","lib/times.ts:13","lib/times.ts:17","lib/times.ts:21","lib/times.ts:25","lib/times.ts:29","lib/times.ts:33","lib/times.ts:40","lib/times.ts:44","lib/times.ts:48","lib/times.ts:52","match","messag","method","name","never","new","number","number)=>boolean","onc","option","paramet","privat","properti","public","rang","result","return","sourc","static","string","test","test(callcount","this.evaluator(callcount","time","time(","times(expect","times._atleastonc","times._nev","times._onc","type","void"],"classes/TrackedExpressionsFormatter.html":["1","class","const","constructor","constructor(expressionformatt","constructor(priv","defin","descript","export","express","expressionformatt","expressionformatterfactori","factori","file","format","format(trackedexpress","formatt","formatter.t","formatter.ts:15","formatter.ts:9","function","import","index","info","lib/formatters/track","match","method","name","new","option","paramet","public","result","result.length","result.substr(0","return","sourc","string","this.expressionformatter.format(expression)}\\n","trackedexpress","trackedexpressionsformatt","trackedexpressionsformatter(expressionformatterfactori","trackedexpressionsformatterfactori","type"],"classes/Tracker.html":["action","add","add(act","class","defin","descript","export","express","file","getpropertyexpress","import","index","info","lib/tracker.t","lib/tracker.ts:13","lib/tracker.ts:9","log","match","method","methodexpress","name","namedmethodexpress","option","paramet","privat","public","result","return","setpropertyexpress","sourc","this.log","this.log.push(act","tracker","type","void"],"classes/Verifier.html":["call","callcount","callcounterfactori","class","const","constructor","constructor(messag","constructor(reflector","counter","defin","descript","error","expect","expectedexpressionreflector","export","express","expressions/expect","extend","fals","file","formatt","formatters/verifi","function","iexpectedexpress","import","index","info","lib/verifier.t","lib/verifier.ts:17","lib/verifier.ts:26","match","messag","method","mocknam","name","new","option","paramet","pass","privat","public","reflector","result","return","sourc","string","super(messag","test","test(expect","this.callcounter.count(express","this.reflector.reflect(expect","this.verifyformatter.format(express","throw","time","times.messag","times.test(callcount","true","type","verifi","verifier(new","verifierfactori","verifyerror","verifyerror(messag","verifyformatt","verifyformatterfactori","void"],"classes/VerifyError.html":["call","callcount","callcounterfactori","class","const","constructor","constructor(messag","counter","defin","descript","error","expect","expectedexpressionreflector","export","express","expressions/expect","extend","fals","file","formatt","formatters/verifi","function","iexpectedexpress","import","info","lib/verifier.t","lib/verifier.ts:7","match","messag","mocknam","name","new","option","paramet","pass","privat","public","reflector","result","return","sourc","string","super(messag","test(expect","this.callcounter.count(express","this.reflector.reflect(expect","this.verifyformatter.format(express","throw","time","times.messag","times.test(callcount","type","verifi","verifier(new","verifierfactori","verifyerror","verifyerror(messag","verifyformatt","verifyformatterfactori","void"],"classes/VerifyFormatter.html":["calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n","class","const","constructor","constructor(expectedexpressionformatt","defin","delimit","descript","expect","expectedexpress","expectedexpressionformatt","expectedexpressionformatterfactori","expectedexpressionmessag","expectedexpressionmessage}\\n${delimiter}\\ntrack","export","express","expressions/expect","file","format","format(expect","formatt","formatter.t","formatter.ts:10","formatter.ts:18","function","havebeencalledtim","import","index","info","lib/formatters/verifi","match","method","mocknam","name","new","number","option","paramet","privat","public","result","return","sourc","string","this.expectedexpressionformatter.format(expect","this.trackedexpressionsformatter.format(trackedexpress","timesmessag","track","trackedexpress","trackedexpressionsformatt","trackedexpressionsformatterfactori","trackedexpressionsmessag","true","type","verifyformatt","verifyformatter(expectedexpressionformatterfactori","verifyformatterfactori"],"interfaces/IExpectedExpression.html":["appli","arg","class","const","declar","defin","expect","expectedexpress","expectedexpressionreflector","expectedgetpropertyexpress","expectedgetpropertyexpression(nam","expectedmethodexpress","expectedmethodexpression(arg","expectednamedmethodexpress","expectednamedmethodexpression(nam","expectedsetpropertyexpress","expectedsetpropertyexpression(nam","export","express","expression(proxi","expressionproxi","expressions/expect","file","iexpectedexpress","import","index","info","instanc","instanceof","interfac","lib/expect","match","name","new","option","predic","privat","properti","proxi","proxy(funct","proxy:ani","public","reflect(express","reflectedinfo","reflector.t","reflector.ts:7","result","return","set","signatur","sourc","t","target","this.expressionproxi","this.reflectedinfo","thisarg","true","unam","undefin","valu","var","void"],"interfaces/IInterceptorCallbacks.html":["activestrategi","behavior","boolean","callbacks.loose.strategi","callbacks.strict.strategi","callbacks.t","callbacks.ts:18","callbacks/interceptor","class","const","constructor(priv","defin","definedsetup","descript","enum","export","express","extend","file","function","hasnamedmethod(methodnam","iinterceptorcallback","iinterceptorcallbacksstrategi","implement","import","index","info","intercepted(express","interceptor","interceptorcallback","interceptorcallbacks(strictstrategi","interceptorcallbacksfactory(definedsetup","interceptorcallbacksloosestrategi","interceptorcallbacksloosestrategy(definedsetup","interceptorcallbacksstrictstrategi","interceptorcallbacksstrictstrategy(definedsetup","interfac","lib/interceptor","loos","loosestrategi","match","method","mockbehavior","mockbehavior.loos","mockbehavior.strict","name","new","option","paramet","privat","prototyp","public","result","return","setbehaviorstrategi","setbehaviorstrategy(behavior","setup","sourc","strict","strictstrategi","string","this.activestrategi","this.activestrategy.hasnamedmethod(methodnam","this.activestrategy.intercepted(express","this.loosestrategi","this.strictstrategi","tracker","type","void"],"interfaces/IInterceptorCallbacksStrategy.html":["activestrategi","behavior","boolean","callbacks.loose.strategi","callbacks.strict.strategi","callbacks.t","callbacks.ts:13","callbacks.ts:14","callbacks/interceptor","class","const","constructor(priv","defin","definedsetup","descript","enum","export","express","extend","file","function","hasnamedmethod","hasnamedmethod(methodnam","iinterceptorcallback","iinterceptorcallbacksstrategi","implement","import","index","info","intercept","intercepted(express","interceptor","interceptorcallback","interceptorcallbacks(strictstrategi","interceptorcallbacksfactory(definedsetup","interceptorcallbacksloosestrategi","interceptorcallbacksloosestrategy(definedsetup","interceptorcallbacksstrictstrategi","interceptorcallbacksstrictstrategy(definedsetup","interfac","lib/interceptor","loos","loosestrategi","match","method","methodnam","mockbehavior","mockbehavior.loos","mockbehavior.strict","name","new","option","paramet","privat","prototyp","public","result","return","setbehaviorstrategy(behavior","setup","sourc","strict","strictstrategi","string","this.activestrategi","this.activestrategy.hasnamedmethod(methodnam","this.activestrategy.intercepted(express","this.loosestrategi","this.strictstrategi","tracker","type","void"],"interfaces/IPredicate.html":["boolean","catch","class","const","constructor(publ","defin","e","export","expressions/express","fals","file","index","info","instanc","interfac","ipred","is(pred","isani","it(pred","lib/expect","match","new","predic","predicates.t","predicates.ts:1","properti","public","result","return","signatur","sourc","static","t","test(inst","this.predicate(inst","tri","true","unam","undefin"],"miscellaneous/functions.html":["arg","argumentsmatcherfactori","callbacks.t","callbacks/interceptor","callcounterfactori","counter.t","expectedexpressionformatterfactori","express","expressionformatterfactori","expressionmatcherfactori","format","format(templ","formatter.t","function","index","interceptorcallbacksfactori","interceptorcallbacksfactory(definedsetup","lib/cal","lib/express","lib/format","lib/formatters/expect","lib/formatters/factories.t","lib/formatters/track","lib/formatters/verifi","lib/interceptor","lib/verifier.t","match","matchers/factories.t","methodformatterfactori","methodmatcherfactori","miscellan","namedmethodformatterfactori","namedmethodmatcherfactori","result","setpropertyformatterfactori","setpropertymatcherfactori","string.t","trackedexpressionsformatterfactori","tracker","undefin","verifierfactori","verifyformatterfactori"],"miscellaneous/variables.html":["express","expressions/expect","index","lib/expect","lib/interceptor.t","match","miscellan","proxi","reflector.t","result","type","variabl"],"miscellaneous/typealiases.html":["alias","expectedexpress","expectedgetpropertyexpress","expectedmethodexpress","expectednamedmethodexpress","expectedsetpropertyexpress","express","expressions.t","expressions/expect","getpropertyexpress","index","lib/expect","lib/expressions.t","match","methodexpress","miscellan","namedmethodexpress","result","setpropertyexpress","type","typealias"],"miscellaneous/enumerations.html":["callbacks.t","callbacks/interceptor","enumer","exclus","inclus","index","lib/interceptor","lib/times.t","loos","match","miscellan","mockbehavior","rang","result","strict"],"coverage.html":["0","0/1","0/12","0/2","0/3","0/4","0/5","0/6","0/9","argumentsmatch","callbacks.loose.strategy.t","callbacks.strict.strategy.t","callbacks.t","callbacks/interceptor","callcount","class","constantformatt","constantmatch","counter.t","coverag","definedsetup","document","expectedexpressionformatt","expectedexpressionreflector","expectedgetpropertyexpress","expectedmethodexpress","expectednamedmethodexpress","expectedsetpropertyexpress","express","expressionformatt","expressionmatch","expressions.t","expressions/expect","expressions/express","file","formatter.t","getpropertyexpress","getpropertyexpressionformatt","getpropertyexpressionmatch","identifi","iexpectedexpress","iinterceptorcallback","iinterceptorcallbacksstrategi","interceptor","interceptorcallback","interceptorcallbacksloosestrategi","interceptorcallbacksstrictstrategi","interfac","ipred","lib/cal","lib/defin","lib/expect","lib/express","lib/expressions.t","lib/formatters/const","lib/formatters/expect","lib/formatters/express","lib/formatters/get.properti","lib/formatters/method","lib/formatters/named.method","lib/formatters/set.properti","lib/formatters/track","lib/formatters/verifi","lib/interceptor","lib/interceptor.t","lib/mock.t","lib/setup.t","lib/times.t","lib/tracker.t","lib/verifier.t","match","matcher.t","matchers/argu","matchers/const","matchers/express","matchers/get.properti","matchers/method","matchers/named.method","matchers/set.properti","methodexpress","methodexpressionformatt","methodexpressionmatch","mock","mockcor","namedmethodexpress","namedmethodexpressionformatt","namedmethodexpressionmatch","new","predicates.t","reflector.t","result","setpropertyexpress","setpropertyexpressionformatt","setpropertyexpressionmatch","setup","setups.t","statement","tabl","tablesort(document.getelementbyid('coverag","time","trackedexpressionsformatt","tracker","type","verifi","verifyerror","verifyformatt"]},"length":52},"tokenStore":{"root":{"0":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"coverage.html":{"ref":"coverage.html","tf":0.1524822695035461}},"/":{"1":{"2":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}},"docs":{"coverage.html":{"ref":"coverage.html","tf":0.014184397163120567}}},"2":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.03546099290780142}}},"3":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.06382978723404255}}},"4":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.01773049645390071}}},"5":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}}},"6":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}}},"9":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}},"docs":{}}},"1":{"0":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}},"docs":{"index.html":{"ref":"index.html","tf":0.011185682326621925},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}},"2":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539}},"b":{"docs":{},"i":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"3":{"9":{"docs":{"overview.html":{"ref":"overview.html","tf":0.1111111111111111}}},"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}},"4":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"overview.html":{"ref":"overview.html","tf":0.1111111111111111}}},"docs":{},"a":{"docs":{},"c":{"docs":{},"c":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.011185682326621925}}}},"p":{"docs":{},"t":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.027624309392265192}}}}}},"t":{"docs":{},"u":{"docs":{},"a":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872}}}}}}},"l":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}},"i":{"docs":{},"a":{"docs":{},"s":{"docs":{"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464}}}}}},"r":{"docs":{},"g":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"2":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}},"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.02631578947368421},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.04},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.016574585635359115},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.056338028169014086},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.058823529411764705},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.03529411764705882},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.03496503496503497},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.02830188679245283},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125}},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.07042253521126761},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.058823529411764705},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.023529411764705882}},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":5.022222222222222},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.06521739130434782},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.0625},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"y":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176}}}}}},"s":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"s":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}},"i":{"docs":{},"g":{"docs":{},"n":{"docs":{"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285}}}}}}},"n":{"docs":{},"y":{"docs":{},"|":{"docs":{},"i":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517}}}}}}},"d":{"docs":{},"d":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.031746031746031744}},"(":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.031746031746031744}}}}}}}},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.014492753623188406}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.010869565217391304}}}}}}}}}}},"b":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}},"u":{"docs":{},"r":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}}}}},"t":{"docs":{},"w":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.037037037037037035},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.02702702702702703},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/It.html":{"ref":"classes/It.html","tf":0.0234375},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.04477611940298507}}}}}}}}},"c":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/Times.html":{"ref":"classes/Times.html","tf":0.018115942028985508},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.026737967914438502},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.018461538461538463},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.02097902097902098}},"(":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.02564102564102564},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02702702702702703},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.026490066225165563},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842},"coverage.html":{"ref":"coverage.html","tf":0.01773049645390071}}}}}}}}}}}}}},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}},"y":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},":":{"1":{"6":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757}}},"docs":{}},"3":{"2":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757}}},"docs":{}},"9":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757}}},"docs":{}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}},"y":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},":":{"1":{"3":{"docs":{"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}},"docs":{}},"2":{"9":{"docs":{"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}},"docs":{}},"6":{"docs":{"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}},"docs":{}}}}}}}}}}}}}}}}}}}},"t":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842},"coverage.html":{"ref":"coverage.html","tf":0.010638297872340425}},"s":{"docs":{},":":{"1":{"3":{"docs":{"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}},"4":{"docs":{"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}},"8":{"docs":{"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588}}},"docs":{}},"2":{"9":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128}}},"docs":{}},"3":{"7":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128}}},"docs":{}},"4":{"1":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128}}},"5":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128}}},"docs":{}},"docs":{}}}}}},".":{"docs":{},"a":{"docs":{},"p":{"docs":{},"p":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"docs":{},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":5.030927835051546},"classes/Times.html":{"ref":"classes/Times.html","tf":0.036231884057971016},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.06040268456375839},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.045454545454545456},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}},"f":{"docs":{},"r":{"docs":{},"o":{"docs":{},"m":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.010869565217391304}}}}}},"t":{"docs":{},"o":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}}}}}}}}},"s":{"docs":{},":":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"$":{"docs":{},"{":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{},"e":{"docs":{},"}":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"$":{"docs":{},"{":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"}":{"docs":{},"\\":{"docs":{},"n":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}},"h":{"docs":{},"e":{"docs":{},"c":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{},"e":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{"changelog.html":{"ref":"changelog.html","tf":3.333333333333333}}}}}}}}}},"l":{"docs":{},"a":{"docs":{},"s":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"overview.html":{"ref":"overview.html","tf":0.1111111111111111},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":5.022222222222222},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":5.020618556701031},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":5.029411764705882},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":5.037037037037037},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":5.013333333333334},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":5.0181818181818185},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":5.017543859649122},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":5.1},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":5.1},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":5.1},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":5.1},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":5.014285714285714},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":5.011428571428572},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":5.066666666666666},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":5.044444444444444},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":5.027027027027027},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":5.011049723756906},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":5.01025641025641},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":5.013513513513513},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":5.013245033112582},"classes/It.html":{"ref":"classes/It.html","tf":10.015625},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":5.070422535211268},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":5.029850746268656},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":5.021739130434782},"classes/Mock.html":{"ref":"classes/Mock.html","tf":5.016042780748663},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":5.009230769230769},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":5.0588235294117645},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":5.027777777777778},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":5.020833333333333},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":5.0588235294117645},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":5.0285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":5.020618556701031},"classes/Setup.html":{"ref":"classes/Setup.html","tf":5.013986013986014},"classes/Times.html":{"ref":"classes/Times.html","tf":5.007246376811594},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":5.023255813953488},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":5.031746031746032},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":5.02013422818792},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":5.027272727272727},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":5.015384615384615},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358},"coverage.html":{"ref":"coverage.html","tf":0.13829787234042554}}}}}},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}},"m":{"docs":{},"p":{"docs":{},"a":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"i":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.03803131991051454},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.029411764705882353},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.02631578947368421},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.03867403314917127},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.026737967914438502},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.015384615384615385},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.026845637583892617},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.03636363636363636},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.023076923076923078},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.02830188679245283},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.06666666666666667},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":5.037037037037037},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.061855670103092786},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":5.029411764705882},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.05},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.08955223880597014},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.08333333333333333},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.08571428571428572},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385}},"(":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"i":{"docs":{},"v":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}},"e":{"docs":{},"d":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.04},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.04225352112676056},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.03529411764705882},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.03529411764705882},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941}},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}}}}},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"o":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"r":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.05154639175257732}},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927}}}}}}}}},"e":{"docs":{},"r":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}},".":{"docs":{},"t":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},":":{"1":{"2":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464}}},"docs":{}},"6":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464}}},"docs":{}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"coverage.html":{"ref":"coverage.html","tf":10.00354609929078}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}},"d":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539}},"(":{"2":{"0":{"1":{"6":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"7":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{}},"docs":{}},"docs":{}},"docs":{}}}}},"e":{"docs":{},"a":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"f":{"docs":{},"a":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}},"i":{"docs":{},"n":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.02666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.016574585635359115},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.02564102564102564},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02702702702702703},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.026490066225165563},"classes/It.html":{"ref":"classes/It.html","tf":0.0390625},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.027692307692307693},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.03529411764705882},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.03529411764705882},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.03496503496503497},"classes/Times.html":{"ref":"classes/Times.html","tf":0.03985507246376811},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.031746031746031744},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":5.013333333333334},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.04054054054054054},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.039735099337748346},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.026737967914438502},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.027692307692307693},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}},"p":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"v":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.04411764705882353},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.02666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.020512820512820513},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"classes/It.html":{"ref":"classes/It.html","tf":0.0234375},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.015384615384615385},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.03496503496503497},"classes/Times.html":{"ref":"classes/Times.html","tf":0.021739130434782608},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"a":{"docs":{},"r":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}}}}}}},"o":{"docs":{},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}},"u":{"docs":{},"m":{"docs":{},"p":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}},"e":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818}},"(":{"docs":{},"'":{"docs":{},"a":{"docs":{},"n":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"4":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{}}}}}}}}}}}}}}},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986}}}}},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842}}}}}},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.030927835051546393},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.02702702702702703},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Times.html":{"ref":"classes/Times.html","tf":0.03985507246376811},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.023076923076923078},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}},"e":{"docs":{},"d":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":5.06},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.05405405405405406},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}},"|":{"docs":{},"i":{"docs":{},"t":{"docs":{"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":5.06},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.041237113402061855},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}},"|":{"docs":{},"i":{"docs":{},"t":{"docs":{"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.041237113402061855},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.03333333333333333},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.03636363636363636},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.02631578947368421},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.022857142857142857},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.03076923076923077},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.11538461538461539}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":5.027272727272727},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.046153846153846156},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":5.017543859649122},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.016042780748663103},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.015384615384615385},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.03355704697986577},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.02727272727272727},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}},"e":{"docs":{},"}":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"$":{"docs":{},"{":{"docs":{},"d":{"docs":{},"e":{"docs":{},"l":{"docs":{},"i":{"docs":{},"m":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"}":{"docs":{},"\\":{"docs":{},"n":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":5.06},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.041666666666666664},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}}}}}},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}},"|":{"docs":{},"i":{"docs":{},"t":{"docs":{"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":5.06},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.043478260869565216},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}},"|":{"docs":{},"i":{"docs":{},"t":{"docs":{"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.13402061855670103},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.06},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.045454545454545456},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.043859649122807015},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.07142857142857142},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.03428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.02702702702702703},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.016574585635359115},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.035897435897435895},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.060810810810810814},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.059602649006622516},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.012307692307692308},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.11627906976744186},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.06349206349206349},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.08053691275167785},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.07272727272727272},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.06153846153846154},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.03773584905660377},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.029411764705882353},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.046052631578947366},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.025},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.05},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.11538461538461539},"coverage.html":{"ref":"coverage.html","tf":0.014184397163120567}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285}},"e":{"docs":{},"}":{"docs":{},"(":{"docs":{},"$":{"docs":{},"{":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"/":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/It.html":{"ref":"classes/It.html","tf":0.046875},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.029850746268656716},"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.05},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.02127659574468085}}}}}}}}},".":{"docs":{},"t":{"docs":{"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.014184397163120567}}}},"|":{"docs":{},"i":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.061855670103092786},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.04},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":5.011428571428572},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"}":{"docs":{},"$":{"docs":{},"{":{"docs":{},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.05454545454545454},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":5.014285714285714},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.06976744186046512},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"x":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"x":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154}}}}}}}}}}}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.1},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.1},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.1},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.1},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.06666666666666667},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.02564102564102564},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.07042253521126761},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.058823529411764705},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.058823529411764705},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.020134228187919462},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.02727272727272727},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.03676470588235294},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.03289473684210526},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.029850746268656716}}}}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.1},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.1},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.1},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.1},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"i":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.010869565217391304}}},"y":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}},"s":{"5":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}},"docs":{}},"n":{"docs":{},"u":{"docs":{},"m":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}},"e":{"docs":{},"r":{"docs":{"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":6.719298245614034}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}}}}}}},"i":{"docs":{},"e":{"docs":{},"l":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}},"n":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"l":{"docs":{},"e":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{},"e":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.029411764705882353},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.041666666666666664},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.025}},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.029411764705882353}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372}}}}}}}}}}}}}}},"e":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125}}}}}}}},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.03571428571428571},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385}},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375},"coverage.html":{"ref":"coverage.html","tf":0.031914893617021274}},"s":{"docs":{},":":{"1":{"0":{"docs":{"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}},"2":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}}},"5":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}},"8":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}},"docs":{}},"2":{"2":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}}},"docs":{}},"4":{"docs":{"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285}}},"5":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223}}},"9":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}},"docs":{}}}}},"s":{"docs":{},"/":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}}}},"d":{"docs":{},".":{"docs":{},"j":{"docs":{},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888}}}}}},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{},"l":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}},"u":{"docs":{},"l":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"index.html":{"ref":"index.html","tf":0.017897091722595078},"changelog.html":{"ref":"changelog.html","tf":0.037037037037037035},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":6.679166666666666}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":3.333333333333333},"changelog.html":{"ref":"changelog.html","tf":3.333333333333333}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}}}}}}}}}},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.06},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":5.04},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.08888888888888889},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.05405405405405406},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.023529411764705882},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.023529411764705882},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.06349206349206349},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02857142857142857},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":5.044444444444444},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.03428571428571429},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":5.027027027027027},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223}}}}}}}},"h":{"docs":{},"e":{"docs":{},"l":{"docs":{},"p":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"o":{"docs":{},"l":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"o":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"t":{"docs":{},"t":{"docs":{},"p":{"docs":{},"s":{"docs":{},":":{"docs":{},"/":{"docs":{},"/":{"docs":{},"d":{"docs":{},"v":{"docs":{},"a":{"docs":{},"b":{"docs":{},"u":{"docs":{},"z":{"docs":{},"y":{"docs":{},"a":{"docs":{},"r":{"docs":{},"o":{"docs":{},"v":{"docs":{},".":{"docs":{},"g":{"docs":{},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"u":{"docs":{},"b":{"docs":{},".":{"docs":{},"i":{"docs":{},"o":{"docs":{},"/":{"docs":{},"m":{"docs":{},"o":{"docs":{},"q":{"docs":{},".":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.026490066225165563},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"b":{"docs":{},"e":{"docs":{},"e":{"docs":{},"n":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"e":{"docs":{},"d":{"docs":{},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.03636363636363636},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.03076923076923077}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.011185682326621925},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.041237113402061855},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.02666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.02727272727272727},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.05},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.04},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.04054054054054054},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.02564102564102564},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02702702702702703},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.026490066225165563},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.043478260869565216},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.053475935828877004},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.03076923076923077},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.041666666666666664},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.041237113402061855},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.03488372093023256},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.03355704697986577},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.045454545454545456},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.03076923076923077},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.03676470588235294},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.03289473684210526}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.03208556149732621},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.03076923076923077},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.06993006993006994}}}}}},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"index.html":{"ref":"index.html","tf":3.333333333333333},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.029411764705882353},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.05},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842}}}}},"s":{"docs":{},"p":{"docs":{},"i":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"t":{"docs":{},"a":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}},"n":{"docs":{},"c":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.029850746268656716}},"e":{"docs":{},"(":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}},"2":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}},"(":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"2":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"3":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{},"i":{"docs":{},"t":{"docs":{},".":{"docs":{},"i":{"docs":{},"s":{"docs":{},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},">":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539}}},"y":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}},"2":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"3":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{}}}}}}}}}},"[":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"4":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"docs":{}}}}}}}}}},"o":{"docs":{},"f":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.04411764705882353},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.03571428571428571},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.06857142857142857},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.026490066225165563},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"n":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539},"overview.html":{"ref":"overview.html","tf":0.1111111111111111},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":5.018867924528302},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":5.022058823529412},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":5.019736842105263},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":5.029850746268656},"coverage.html":{"ref":"coverage.html","tf":0.014184397163120567}}}}},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}},"o":{"docs":{},"r":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":5.016574585635359},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.03208556149732621},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.018461538461538463},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":5.015384615384615},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},"(":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125}}}}}}}}}}}}}}}},"i":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.025}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":5.013513513513513},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}},"y":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":5.013245033112582},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}},"y":{"docs":{},"(":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.009230769230769232}}},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157}}}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.009230769230769232}}}}}}}}}}}}}}}}}},"r":{"docs":{},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.05555555555555555}}}}}}}},"f":{"docs":{},"o":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986}},"e":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986}}}}}}}}}},"c":{"docs":{},"l":{"docs":{},"u":{"docs":{},"s":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842}}}}}}},"t":{"docs":{},".":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}},"s":{"docs":{},"(":{"docs":{},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},">":{"docs":{},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}},"$":{"docs":{},"{":{"docs":{},"(":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176}}}}}}}}}}}},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}}}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539}}}}}}}}}}},")":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}}}}}}}}}}}},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.009230769230769232}},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.04666666666666667},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.02097902097902098}}}}}}}}}}},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}}},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.03125},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.03508771929824561},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.016042780748663103},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.021538461538461538},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.026845637583892617},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":5.028301886792453},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0213903743315508},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.021538461538461538},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":5.022058823529412},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.022099447513812154},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.046153846153846156},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.04411764705882353},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":5.0394736842105265},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0703125},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":5.059701492537314},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}},"d":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"t":{"docs":{},"'":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"f":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.037037037037037035},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.03428571428571429},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"c":{"docs":{},"h":{"docs":{},"(":{"docs":{},"(":{"docs":{},"l":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112}}}}}}}}}}}}}}}},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}}}}}}}},"i":{"docs":{},"b":{"docs":{},"r":{"docs":{},"a":{"docs":{},"r":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}},"/":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.03333333333333333},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.037037037037037035},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.017142857142857144},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.02702702702702703},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.03260869565217391},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.03125},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.030927835051546393},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"coverage.html":{"ref":"coverage.html","tf":0.024822695035460994}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.014184397163120567}},"s":{"docs":{},":":{"1":{"1":{"docs":{"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043}}},"8":{"docs":{"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334}}},"9":{"docs":{"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334}}},"docs":{}},"2":{"4":{"docs":{"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941}}},"5":{"docs":{"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941}}},"6":{"docs":{"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941}}},"docs":{"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.023529411764705882}}},"4":{"docs":{"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941}}},"docs":{}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"classes/It.html":{"ref":"classes/It.html","tf":0.046875},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.029850746268656716},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.05},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.028368794326241134}}}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.030927835051546393},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"s":{"docs":{},"/":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.029411764705882353},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.02727272727272727},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02142857142857143},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.04477611940298507},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.041666666666666664},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.04285714285714286},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.03488372093023256},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.023076923076923078},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.03333333333333333},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.02564102564102564},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02702702702702703},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.026490066225165563},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842},"coverage.html":{"ref":"coverage.html","tf":0.01773049645390071}},".":{"docs":{},"t":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.05},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},":":{"1":{"4":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}},"docs":{}},"2":{"0":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}},"8":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}},"docs":{}},"docs":{}}}}}}}}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}},"s":{"docs":{},":":{"1":{"7":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}},"docs":{}},"2":{"3":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}},"6":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}},"docs":{}},"3":{"1":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}},"8":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}},"docs":{}},"4":{"3":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}},"7":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}},"docs":{}},"5":{"2":{"docs":{"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}},"8":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877}}},"docs":{}},"docs":{}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},":":{"1":{"0":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}}},"4":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}}},"9":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}}},"docs":{}},"2":{"4":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}}},"docs":{}},"4":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}}},"docs":{}}}}}}}}}},"t":{"docs":{},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},":":{"1":{"0":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"3":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"7":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"docs":{}},"2":{"1":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"5":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"9":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"docs":{}},"3":{"3":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"docs":{}},"4":{"0":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"4":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"8":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"docs":{}},"5":{"2":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}},"docs":{}},"docs":{}}}}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},":":{"1":{"3":{"docs":{"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872}}},"docs":{}},"9":{"docs":{"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872}}},"docs":{}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}},"s":{"docs":{},":":{"1":{"7":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154}}},"docs":{}},"2":{"6":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154}}},"docs":{}},"7":{"docs":{"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}},"docs":{}}}}}}}}}}}}}}}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}}},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.02564102564102564},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157}}}}}}}}}}}}},"g":{"docs":{"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872}}}}},"m":{"docs":{},"a":{"docs":{},"g":{"docs":{},"i":{"docs":{},"c":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"k":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"overview.html":{"ref":"overview.html","tf":0.2222222222222222},"changelog.html":{"ref":"changelog.html","tf":0.037037037037037035},"modules.html":{"ref":"modules.html","tf":0.4},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.08888888888888889},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.029411764705882353},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.07407407407407407},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.022857142857142857},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.05405405405405406},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.043478260869565216},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.023529411764705882},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.041666666666666664},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.023529411764705882},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.041237113402061855},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.031746031746031744},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.029850746268656716},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.025},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.1},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.07692307692307693},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.10526315789473684},"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.037037037037037035},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.02702702702702703},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927}}}}}}}},"r":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.022857142857142857},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}},".":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"coverage.html":{"ref":"coverage.html","tf":0.024822695035460994}},"s":{"docs":{},":":{"1":{"2":{"docs":{"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}},"5":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}},"docs":{}},"2":{"4":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}},"docs":{}},"4":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112}}},"5":{"docs":{"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517}}},"6":{"docs":{"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}},"7":{"docs":{"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514}}},"9":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112}}},"docs":{}}}}},"s":{"docs":{},"/":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.03333333333333333},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.017142857142857144},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125}}}}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.037037037037037035},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.02702702702702703},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.03260869565217391},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.03125},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.030927835051546393},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.020134228187919462},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.029411764705882353},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.037037037037037035},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.017142857142857144},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.02702702702702703},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.031746031746031744},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}},"(":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{}}}}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.06},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":5.042253521126761},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.05970149253731343},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.043478260869565216},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.023529411764705882},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.023529411764705882},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.06349206349206349},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02857142857142857},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":5.029850746268656},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.04},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":5.021739130434782},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02142857142857143}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.021739130434782608},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818}}}}}}},"i":{"docs":{},"n":{"docs":{},"i":{"docs":{},"m":{"docs":{},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"s":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}},"s":{"docs":{},"c":{"docs":{},"e":{"docs":{},"l":{"docs":{},"l":{"docs":{},"a":{"docs":{},"n":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":3.345833333333333},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":3.383333333333333},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":3.3717948717948714},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":3.3859649122807016}}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.06711409395973154},"changelog.html":{"ref":"changelog.html","tf":0.07407407407407407},"classes/Mock.html":{"ref":"classes/Mock.html","tf":5.021390374331551},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.012307692307692308},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"(":{"docs":{},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}},".":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.011185682326621925}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"y":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.011185682326621925}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.02564102564102564},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.012307692307692308},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.03676470588235294},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.10526315789473684}},".":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.045454545454545456},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.026845637583892617},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.03076923076923077}}}}},"d":{"docs":{},"e":{"docs":{},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909}}}}}}}}}},"c":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.016042780748663103},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":5.009230769230769},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"q":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}},".":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.015659955257270694}}}}},"d":{"docs":{},"u":{"docs":{},"l":{"docs":{"modules.html":{"ref":"modules.html","tf":10.2}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.04},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.02631578947368421},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.10666666666666667},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.022099447513812154},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.020512820512820513},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"classes/It.html":{"ref":"classes/It.html","tf":0.0234375},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.056338028169014086},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0213903743315508},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.036923076923076927},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.09411764705882353},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.09411764705882353},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.03496503496503497},"classes/Times.html":{"ref":"classes/Times.html","tf":0.021739130434782608},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}},"d":{"docs":{},".":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.06},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":5.035294117647059},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.05555555555555555},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.041666666666666664},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.023529411764705882},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02857142857142857},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":5.027777777777778},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.04},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":5.020833333333333},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02142857142857143}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"e":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}},"w":{"docs":{"index.html":{"ref":"index.html","tf":0.02237136465324385},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.043859649122807015},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.027624309392265192},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.026737967914438502},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.015384615384615385},"classes/Times.html":{"ref":"classes/Times.html","tf":0.018115942028985508},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.04716981132075472},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.029850746268656716},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.018115942028985508}}}}}},"p":{"docs":{},"m":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}},"u":{"docs":{},"m":{"docs":{},"b":{"docs":{},"e":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.011185682326621925},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.02727272727272727},"classes/Times.html":{"ref":"classes/Times.html","tf":0.057971014492753624},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.023076923076923078}},"|":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}},")":{"docs":{},"=":{"docs":{},">":{"docs":{},"b":{"docs":{},"o":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"n":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}},"l":{"docs":{},"l":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}}}},"o":{"docs":{},"w":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.029082774049217},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.11764705882352941},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.022099447513812154},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.012307692307692308}},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}},"(":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.011185682326621925},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.02666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.02631578947368421},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.022099447513812154},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.020512820512820513},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"classes/It.html":{"ref":"classes/It.html","tf":0.0234375},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.015384615384615385},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.03496503496503497},"classes/Times.html":{"ref":"classes/Times.html","tf":0.021739130434782608},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}}}}}}},"r":{"docs":{},"i":{"docs":{},"g":{"docs":{},"i":{"docs":{},"n":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"u":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"v":{"docs":{},"i":{"docs":{},"e":{"docs":{},"w":{"docs":{"overview.html":{"ref":"overview.html","tf":10.11111111111111}}}}}}}}},"n":{"docs":{},"c":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.021739130434782608}}}}},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.02666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.020512820512820513},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"classes/It.html":{"ref":"classes/It.html","tf":0.0234375},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.015384615384615385},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.03496503496503497},"classes/Times.html":{"ref":"classes/Times.html","tf":0.021739130434782608},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}}}}}}},"c":{"docs":{},"k":{"docs":{},"a":{"docs":{},"g":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}},"s":{"docs":{},"s":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818}}}}},"o":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}}},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"b":{"docs":{},"l":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}}}},"r":{"docs":{},"e":{"docs":{},"t":{"docs":{},"t":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"c":{"docs":{},"e":{"docs":{},"d":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.03508771929824561},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/It.html":{"ref":"classes/It.html","tf":0.046875},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.03773584905660377},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358},"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}},"s":{"docs":{},":":{"1":{"1":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125}}},"5":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125}}},"9":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125}}},"docs":{"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}},"6":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125}}},"7":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125}}},"docs":{}}}}}}}}}}}}},"o":{"docs":{},"d":{"docs":{},"u":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.02237136465324385},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.023529411764705882},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.023529411764705882},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.02830188679245283},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.04477611940298507}}},"y":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"2":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}},"3":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"4":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"docs":{}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"changelog.html":{"ref":"changelog.html","tf":0.037037037037037035},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.03314917127071823},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.02564102564102564},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.026490066225165563},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.03289473684210526}},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154}},"(":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154}}}}}}}}}}}}},"[":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}},"x":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.3}}},"y":{"docs":{},"(":{"docs":{},"f":{"docs":{},"u":{"docs":{},"n":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}}},":":{"docs":{},"a":{"docs":{},"n":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}},"v":{"docs":{},"a":{"docs":{},"t":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02857142857142857},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.017142857142857144},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.022099447513812154},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0374331550802139},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.021538461538461538},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.010869565217391304},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.020134228187919462},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.02727272727272727},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}}}}}}},"u":{"docs":{},"b":{"docs":{},"l":{"docs":{},"i":{"docs":{},"c":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.03333333333333333},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.030927835051546393},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.04411764705882353},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.05555555555555555},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.06},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.02727272727272727},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.02631578947368421},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.017142857142857144},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.06666666666666667},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.06666666666666667},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.04054054054054054},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.03314917127071823},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.046153846153846156},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.04054054054054054},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.039735099337748346},"classes/It.html":{"ref":"classes/It.html","tf":0.0859375},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.07042253521126761},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.04477611940298507},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.03260869565217391},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0374331550802139},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.06461538461538462},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.08235294117647059},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.041666666666666664},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.03125},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.08235294117647059},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.04285714285714286},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.030927835051546393},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.08391608391608392},"classes/Times.html":{"ref":"classes/Times.html","tf":0.09782608695652174},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.03488372093023256},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.09523809523809523},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.020134228187919462},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.023076923076923078},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.04477611940298507}}}}}}}},"q":{"docs":{},"u":{"docs":{},"i":{"docs":{},"c":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"r":{"docs":{},"e":{"docs":{},"c":{"docs":{},"o":{"docs":{},"m":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806}},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}}},"o":{"docs":{},"r":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.020134228187919462},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818}},".":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.05},"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}},"s":{"docs":{},":":{"4":{"1":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403}}},"docs":{}},"7":{"docs":{"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}},"docs":{}}}}}}}}}}}},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"overview.html":{"ref":"overview.html","tf":0.2222222222222222},"changelog.html":{"ref":"changelog.html","tf":0.037037037037037035},"modules.html":{"ref":"modules.html","tf":0.4},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.029411764705882353},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.037037037037037035},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.04},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.02702702702702703},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/It.html":{"ref":"classes/It.html","tf":0.0390625},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.023529411764705882},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.023529411764705882},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.046511627906976744},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.031746031746031744},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.07462686567164178},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.025},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.1},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.07692307692307693},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.10526315789473684},"coverage.html":{"ref":"coverage.html","tf":0.0070921985815602835}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}}}}}}},"s":{"docs":{},"u":{"docs":{},"b":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"(":{"0":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}},"docs":{}}}}}}}}}}}}},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{},"n":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.044444444444444446},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.030927835051546393},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.07352941176470588},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.05555555555555555},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.04666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.02727272727272727},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.043859649122807015},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.05},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.045714285714285714},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.05405405405405406},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.07734806629834254},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.03076923076923077},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.05405405405405406},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.06622516556291391},"classes/It.html":{"ref":"classes/It.html","tf":0.0546875},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.03260869565217391},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0213903743315508},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.027692307692307693},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.041666666666666664},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.041237113402061855},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.06993006993006994},"classes/Times.html":{"ref":"classes/Times.html","tf":0.05434782608695652},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.03488372093023256},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.047619047619047616},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.023076923076923078},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.04716981132075472},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.029411764705882353},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.03289473684210526},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.07462686567164178}},"s":{"docs":{},"(":{"1":{"0":{"0":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{}},"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{},"'":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}},"(":{"docs":{},")":{"docs":{},"=":{"docs":{},">":{"docs":{},"{":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"l":{"docs":{},"e":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"g":{"docs":{},"(":{"docs":{},"'":{"docs":{},"t":{"docs":{},"h":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"l":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"t":{"docs":{},"r":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},")":{"docs":{},";":{"docs":{},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"b":{"docs":{},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986}}}}}}}}}}}}},"i":{"docs":{},"g":{"docs":{},"h":{"docs":{},"t":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.044444444444444446},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.1111111111111111},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.09714285714285714},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.08108108108108109},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.06521739130434782},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.0625},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.061855670103092786}},".":{"docs":{},"l":{"docs":{},"e":{"docs":{},"n":{"docs":{},"g":{"docs":{},"t":{"docs":{},"h":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112}}}}}}}}},"[":{"docs":{},"i":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223}}}}}},"a":{"docs":{},"n":{"docs":{},"g":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.018115942028985508},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.10526315789473684}}}}}},"s":{"docs":{},"a":{"docs":{},"v":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"e":{"docs":{},"p":{"docs":{},"a":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"y":{"docs":{},"(":{"docs":{},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{},"b":{"docs":{},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},")":{"docs":{},";":{"docs":{},"t":{"docs":{},"h":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.010256410256410256},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176}}}}}}}}}}}}}}}}}},"u":{"docs":{},"p":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.03333333333333333},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.033783783783783786},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.03208556149732621},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.024615384615384615},"classes/Setup.html":{"ref":"classes/Setup.html","tf":5.013986013986014},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.040268456375838924}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154}}}}}}}}},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}},"s":{"docs":{},".":{"docs":{},"t":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},":":{"1":{"3":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}},"7":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}},"docs":{}},"2":{"6":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}},"docs":{}},"7":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}},"docs":{}}}}}},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"v":{"docs":{},"o":{"docs":{},"k":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}},"e":{"docs":{},"(":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.009230769230769232}}}}}}}}}}},"/":{"docs":{},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"d":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.04},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.04},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.04},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.06},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.013513513513513514},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.023529411764705882},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":5.035294117647059},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.05714285714285714},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.041237113402061855},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.06349206349206349},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":5.0285714285714285},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.04},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":5.020618556701031},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.02142857142857143}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}},"i":{"docs":{},"m":{"docs":{},"p":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"g":{"docs":{},"n":{"docs":{},"a":{"docs":{},"t":{"docs":{},"u":{"docs":{},"r":{"docs":{"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}}}}},"p":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}},"t":{"docs":{},"a":{"docs":{},"r":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":3.3355704697986575},"changelog.html":{"ref":"changelog.html","tf":3.333333333333333}}}},"t":{"docs":{},"i":{"docs":{},"c":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"classes/Times.html":{"ref":"classes/Times.html","tf":0.028985507246376812},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.029850746268656716}}}},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}},"i":{"docs":{},"l":{"docs":{},"l":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"miscellaneous/enumerations.html":{"ref":"miscellaneous/enumerations.html","tf":0.05263157894736842}},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.020512820512820513},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157}}}}}}}}}}}},"n":{"docs":{},"g":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.058823529411764705},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.02},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.07272727272727272},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.09333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.044444444444444446},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.020512820512820513},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.04225352112676056},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0213903743315508},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.018461538461538463},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.08235294117647059},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.041666666666666664},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.08235294117647059},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/Times.html":{"ref":"classes/Times.html","tf":0.018115942028985508},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.03488372093023256},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.026845637583892617},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.03636363636363636},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.06153846153846154},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.014705882352941176},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.02631578947368421}},".":{"docs":{},"t":{"docs":{"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125}}}}}}},"o":{"docs":{},"n":{"docs":{},"g":{"docs":{},"l":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}},"u":{"docs":{},"p":{"docs":{},"p":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}}},"e":{"docs":{},"r":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}}}}}},"o":{"docs":{},"u":{"docs":{},"r":{"docs":{},"c":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.011764705882352941},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}}},"t":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.022099447513812154},"classes/It.html":{"ref":"classes/It.html","tf":0.03125},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.04477611940298507}},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308}},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}}}},"s":{"docs":{},".":{"docs":{},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}}}},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.02097902097902098}}}}}}}},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}},"r":{"docs":{},"o":{"docs":{},"w":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.02097902097902098},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}},"s":{"docs":{},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539}}}}},"e":{"docs":{},"x":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986}}}}}}}}}}}}},"i":{"docs":{},"s":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.011111111111111112}}}}}},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},".":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.014925373134328358}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.014285714285714285}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909}}}}},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},")":{"docs":{},"}":{"docs":{},"\\":{"docs":{},"n":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"x":{"docs":{},"i":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"a":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334}},"s":{"docs":{},".":{"docs":{},"u":{"docs":{},"n":{"docs":{},"s":{"docs":{},"h":{"docs":{},"i":{"docs":{},"f":{"docs":{},"t":{"docs":{},"(":{"docs":{},"[":{"docs":{},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"y":{"docs":{},"(":{"docs":{},"t":{"docs":{},"h":{"docs":{},"i":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"i":{"docs":{},"c":{"docs":{},"t":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}}}}}},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.05263157894736842},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.05660377358490566}}}}}}}},"o":{"docs":{},"r":{"docs":{},".":{"docs":{},"r":{"docs":{},"e":{"docs":{},"f":{"docs":{},"l":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.02097902097902098}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.02666666666666667},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.028169014084507043},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.023529411764705882},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.023529411764705882}},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"s":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"c":{"docs":{},"h":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"l":{"docs":{},"e":{"docs":{},"f":{"docs":{},"t":{"docs":{},".":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"u":{"docs":{"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.010869565217391304},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.010416666666666666}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"t":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.02097902097902098}},"i":{"docs":{},"v":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.019736842105263157}}},"y":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"(":{"docs":{},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993}}}}}}}}}}}},"_":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.03314917127071823}},"e":{"docs":{},".":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}},"x":{"docs":{},"i":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.016574585635359115}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{},"e":{"docs":{},"s":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"o":{"docs":{},"w":{"docs":{},"n":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}},"[":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"n":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"e":{"docs":{},"p":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"o":{"docs":{},"b":{"docs":{},"j":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{},"o":{"docs":{},"f":{"docs":{},"(":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"d":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"b":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"s":{"docs":{},".":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"b":{"docs":{},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"y":{"docs":{},"(":{"docs":{},"b":{"docs":{},"e":{"docs":{},"h":{"docs":{},"a":{"docs":{},"v":{"docs":{},"i":{"docs":{},"o":{"docs":{},"r":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"o":{"docs":{},"o":{"docs":{},"s":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"g":{"docs":{},"i":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.005128205128205128},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.006578947368421052}}}}}}}}}}}}},"g":{"docs":{"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872}},".":{"docs":{},"p":{"docs":{},"u":{"docs":{},"s":{"docs":{},"h":{"docs":{},"(":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872}}}}}}}}}}}}}},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{},"e":{"docs":{},"d":{"docs":{},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{},"u":{"docs":{},"p":{"docs":{},"s":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"p":{"docs":{},"e":{"docs":{},"r":{"docs":{},"t":{"docs":{},"y":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757}}}}}}}}}}}}}}}}}}}}}}}},"h":{"docs":{},"a":{"docs":{},"s":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{},"e":{"docs":{},"d":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"d":{"docs":{},"n":{"docs":{},"a":{"docs":{},"m":{"docs":{"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"a":{"docs":{},"d":{"docs":{},"d":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.006622516556291391}}}}}}}}}}}}},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"t":{"docs":{},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"d":{"docs":{},"i":{"docs":{},"c":{"docs":{},"a":{"docs":{},"t":{"docs":{},"e":{"docs":{},"(":{"docs":{},"i":{"docs":{},"n":{"docs":{},"s":{"docs":{},"t":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}}}}}}}}}}}}},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}}}}}}}}}}}}}}}}}},"y":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},".":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}}}}}}}},"i":{"docs":{},"m":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0427807486631016},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.036923076923076927},"classes/Times.html":{"ref":"classes/Times.html","tf":5.065217391304348},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.053691275167785234},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.03636363636363636},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"s":{"docs":{},".":{"docs":{},"e":{"docs":{},"x":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"l":{"docs":{},"y":{"docs":{},"(":{"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695}}}}}}}}}}}}}}},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077}},"e":{"docs":{},"(":{"docs":{},")":{"docs":{},")":{"docs":{},";":{"docs":{},"m":{"docs":{},"o":{"docs":{},"c":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}}}}},"_":{"docs":{},"a":{"docs":{},"t":{"docs":{},"l":{"docs":{},"e":{"docs":{},"a":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"v":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}},"t":{"docs":{},"e":{"docs":{},"s":{"docs":{},"t":{"docs":{},"(":{"docs":{},"c":{"docs":{},"a":{"docs":{},"l":{"docs":{},"l":{"docs":{},"c":{"docs":{},"o":{"docs":{},"u":{"docs":{},"n":{"docs":{},"t":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.02727272727272727},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.03076923076923077}},"e":{"docs":{},".":{"docs":{},"t":{"docs":{},"o":{"docs":{},"l":{"docs":{},"o":{"docs":{},"w":{"docs":{},"e":{"docs":{},"r":{"docs":{},"c":{"docs":{},"a":{"docs":{},"s":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909}}}}}}}}}}}}}}}}}}}},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.018115942028985508}}}}}}}}}},"(":{"docs":{"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/Times.html":{"ref":"classes/Times.html","tf":0.007246376811594203}}}}}},"r":{"docs":{},"a":{"docs":{},"c":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}},"e":{"docs":{},"r":{"docs":{"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.03076923076923077},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.05405405405405406},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.052980132450331126},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0427807486631016},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.052307692307692305},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":5.031746031746032},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.04411764705882353},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.039473684210526314},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0125},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.023076923076923078}},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":5.034883720930233},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.05384615384615385},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.011627906976744186},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}}}}}}}}}}},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.03333333333333333},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.010309278350515464},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.027624309392265192},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.006756756756756757},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"classes/It.html":{"ref":"classes/It.html","tf":0.015625},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.009230769230769232},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.010309278350515464},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.029850746268656716}},"s":{"docs":{},"p":{"docs":{},"o":{"docs":{},"n":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}}}},"i":{"docs":{"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}},"e":{"docs":{},"s":{"docs":{},"u":{"docs":{},"l":{"docs":{},"t":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986}}}}}}}},"y":{"docs":{},"p":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.0044742729306487695},"classes/ArgumentsMatcher.html":{"ref":"classes/ArgumentsMatcher.html","tf":0.022222222222222223},"classes/CallCounter.html":{"ref":"classes/CallCounter.html","tf":0.020618556701030927},"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176},"classes/ConstantMatcher.html":{"ref":"classes/ConstantMatcher.html","tf":0.018518518518518517},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.02666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.01818181818181818},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpectedGetPropertyExpression.html":{"ref":"classes/ExpectedGetPropertyExpression.html","tf":0.02},"classes/ExpectedMethodExpression.html":{"ref":"classes/ExpectedMethodExpression.html","tf":0.02},"classes/ExpectedNamedMethodExpression.html":{"ref":"classes/ExpectedNamedMethodExpression.html","tf":0.02},"classes/ExpectedSetPropertyExpression.html":{"ref":"classes/ExpectedSetPropertyExpression.html","tf":0.02},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.014285714285714285},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.011428571428571429},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.04},"classes/GetPropertyExpressionFormatter.html":{"ref":"classes/GetPropertyExpressionFormatter.html","tf":0.022222222222222223},"classes/GetPropertyExpressionMatcher.html":{"ref":"classes/GetPropertyExpressionMatcher.html","tf":0.013513513513513514},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.011049723756906077},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.020512820512820513},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.019867549668874173},"classes/It.html":{"ref":"classes/It.html","tf":0.03125},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.04225352112676056},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/MethodExpressionMatcher.html":{"ref":"classes/MethodExpressionMatcher.html","tf":0.021739130434782608},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.021538461538461538},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.047058823529411764},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.027777777777777776},"classes/NamedMethodExpressionMatcher.html":{"ref":"classes/NamedMethodExpressionMatcher.html","tf":0.020833333333333332},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.047058823529411764},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/SetPropertyExpressionMatcher.html":{"ref":"classes/SetPropertyExpressionMatcher.html","tf":0.020618556701030927},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.03496503496503497},"classes/Times.html":{"ref":"classes/Times.html","tf":0.025362318840579712},"classes/TrackedExpressionsFormatter.html":{"ref":"classes/TrackedExpressionsFormatter.html","tf":0.023255813953488372},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.015873015873015872},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.015384615384615385},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.007352941176470588},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105},"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":0.1},"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":0.038461538461538464},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}},"s":{"docs":{},"c":{"docs":{},"r":{"docs":{},"i":{"docs":{},"p":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}},"o":{"docs":{},"f":{"docs":{"classes/ConstantFormatter.html":{"ref":"classes/ConstantFormatter.html","tf":0.014705882352941176}}}},"a":{"docs":{},"l":{"docs":{},"i":{"docs":{},"a":{"docs":{},"s":{"docs":{"miscellaneous/typealiases.html":{"ref":"miscellaneous/typealiases.html","tf":6.666666666666666}}}}}}}}}},"a":{"docs":{},"r":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.02631578947368421},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.027624309392265192},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.02830188679245283}}}}}},"b":{"docs":{},"l":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"s":{"docs":{},"o":{"docs":{},"r":{"docs":{},"t":{"docs":{},"(":{"docs":{},"d":{"docs":{},"o":{"docs":{},"c":{"docs":{},"u":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},".":{"docs":{},"g":{"docs":{},"e":{"docs":{},"t":{"docs":{},"e":{"docs":{},"l":{"docs":{},"e":{"docs":{},"m":{"docs":{},"e":{"docs":{},"n":{"docs":{},"t":{"docs":{},"b":{"docs":{},"y":{"docs":{},"i":{"docs":{},"d":{"docs":{},"(":{"docs":{},"'":{"docs":{},"c":{"docs":{},"o":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{},"a":{"docs":{},"g":{"docs":{"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.027972027972027972}}}}}}},"u":{"docs":{},"n":{"docs":{},"d":{"docs":{},"e":{"docs":{},"f":{"docs":{},"i":{"docs":{},"n":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.006666666666666667},"classes/ExpectedExpressionFormatter.html":{"ref":"classes/ExpectedExpressionFormatter.html","tf":0.00909090909090909},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/ExpressionFormatter.html":{"ref":"classes/ExpressionFormatter.html","tf":0.007142857142857143},"classes/ExpressionMatcher.html":{"ref":"classes/ExpressionMatcher.html","tf":0.005714285714285714},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.027624309392265192},"classes/InterceptorCallbacksLooseStrategy.html":{"ref":"classes/InterceptorCallbacksLooseStrategy.html","tf":0.02027027027027027},"classes/InterceptorCallbacksStrictStrategy.html":{"ref":"classes/InterceptorCallbacksStrictStrategy.html","tf":0.013245033112582781},"classes/It.html":{"ref":"classes/It.html","tf":0.0078125},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.003076923076923077},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.05}}}}}}},"s":{"docs":{},"e":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154}}}}},"a":{"docs":{},"m":{"docs":{"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943},"interfaces/IPredicate.html":{"ref":"interfaces/IPredicate.html","tf":0.014925373134328358}}}}},"s":{"docs":{"index.html":{"ref":"index.html","tf":0.006711409395973154}},"a":{"docs":{},"g":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}},"v":{"2":{"docs":{},".":{"1":{"docs":{},".":{"0":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}},"docs":{}}},"3":{"docs":{},".":{"0":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}},"1":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}},"docs":{}}},"4":{"docs":{},".":{"0":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}},"docs":{}}},"5":{"docs":{},".":{"0":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}},"1":{"docs":{"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}},"docs":{}}},"docs":{}}},"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"index.html":{"ref":"index.html","tf":0.026845637583892617},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.017543859649122806},"classes/GetPropertyExpression.html":{"ref":"classes/GetPropertyExpression.html","tf":0.013333333333333334},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.016574585635359115},"classes/MethodExpression.html":{"ref":"classes/MethodExpression.html","tf":0.014084507042253521},"classes/MethodExpressionFormatter.html":{"ref":"classes/MethodExpressionFormatter.html","tf":0.029850746268656716},"classes/NamedMethodExpression.html":{"ref":"classes/NamedMethodExpression.html","tf":0.011764705882352941},"classes/NamedMethodExpressionFormatter.html":{"ref":"classes/NamedMethodExpressionFormatter.html","tf":0.013888888888888888},"classes/SetPropertyExpression.html":{"ref":"classes/SetPropertyExpression.html","tf":0.07058823529411765},"classes/SetPropertyExpressionFormatter.html":{"ref":"classes/SetPropertyExpressionFormatter.html","tf":0.02857142857142857},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.013986013986013986},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886}},"e":{"docs":{},"s":{"docs":{},"[":{"0":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"1":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"2":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}},"docs":{}}}}}},"r":{"docs":{"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.009433962264150943}},"i":{"docs":{},"a":{"docs":{},"b":{"docs":{},"l":{"docs":{"miscellaneous/variables.html":{"ref":"miscellaneous/variables.html","tf":6.716666666666666}}}}}}}},"e":{"docs":{},"r":{"docs":{},"i":{"docs":{},"f":{"docs":{},"i":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0213903743315508},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.03076923076923077},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":5.02013422818792},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0106951871657754},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}},"(":{"docs":{},"n":{"docs":{},"e":{"docs":{},"w":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}},"y":{"docs":{},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.006153846153846154}}}}}}}}}},"e":{"docs":{},"r":{"docs":{},"r":{"docs":{},"o":{"docs":{},"r":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":5.0181818181818185},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"(":{"docs":{},"m":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"a":{"docs":{},"g":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.006711409395973154},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909}}}}}}}}}}}}}},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.04697986577181208},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.02727272727272727},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":5.023076923076923},"coverage.html":{"ref":"coverage.html","tf":0.0035460992907801418}},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.01818181818181818},"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693},"miscellaneous/functions.html":{"ref":"miscellaneous/functions.html","tf":0.0375}}}}}}}}},"(":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"e":{"docs":{},"c":{"docs":{},"t":{"docs":{},"e":{"docs":{},"d":{"docs":{},"e":{"docs":{},"x":{"docs":{},"p":{"docs":{},"r":{"docs":{},"e":{"docs":{},"s":{"docs":{},"s":{"docs":{},"i":{"docs":{},"o":{"docs":{},"n":{"docs":{},"f":{"docs":{},"o":{"docs":{},"r":{"docs":{},"m":{"docs":{},"a":{"docs":{},"t":{"docs":{},"t":{"docs":{},"e":{"docs":{},"r":{"docs":{},"f":{"docs":{},"a":{"docs":{},"c":{"docs":{},"t":{"docs":{},"o":{"docs":{},"r":{"docs":{},"i":{"docs":{"classes/VerifyFormatter.html":{"ref":"classes/VerifyFormatter.html","tf":0.007692307692307693}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"i":{"docs":{},"d":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.013333333333333334},"classes/ExpectedExpressionReflector.html":{"ref":"classes/ExpectedExpressionReflector.html","tf":0.008771929824561403},"classes/InterceptorCallbacks.html":{"ref":"classes/InterceptorCallbacks.html","tf":0.015384615384615385},"classes/Mock.html":{"ref":"classes/Mock.html","tf":0.0053475935828877},"classes/MockCore.html":{"ref":"classes/MockCore.html","tf":0.012307692307692308},"classes/Setup.html":{"ref":"classes/Setup.html","tf":0.006993006993006993},"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015},"classes/Tracker.html":{"ref":"classes/Tracker.html","tf":0.031746031746031744},"classes/Verifier.html":{"ref":"classes/Verifier.html","tf":0.013422818791946308},"classes/VerifyError.html":{"ref":"classes/VerifyError.html","tf":0.00909090909090909},"interfaces/IExpectedExpression.html":{"ref":"interfaces/IExpectedExpression.html","tf":0.018867924528301886},"interfaces/IInterceptorCallbacks.html":{"ref":"interfaces/IInterceptorCallbacks.html","tf":0.022058823529411766},"interfaces/IInterceptorCallbacksStrategy.html":{"ref":"interfaces/IInterceptorCallbacksStrategy.html","tf":0.013157894736842105}}}}}},"w":{"docs":{},"a":{"docs":{},"n":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"h":{"docs":{},"i":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}},"i":{"docs":{},"t":{"docs":{},"h":{"docs":{},"o":{"docs":{},"u":{"docs":{},"t":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}},"o":{"docs":{},"r":{"docs":{},"k":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847},"changelog.html":{"ref":"changelog.html","tf":0.018518518518518517}}}}},"r":{"docs":{},"i":{"docs":{},"t":{"docs":{},"e":{"docs":{"index.html":{"ref":"index.html","tf":0.008948545861297539}}},"t":{"docs":{},"e":{"docs":{},"n":{"docs":{"index.html":{"ref":"index.html","tf":0.0022371364653243847}}}}}}}}},"k":{"docs":{},"e":{"docs":{},"y":{"docs":{"classes/DefinedSetups.html":{"ref":"classes/DefinedSetups.html","tf":0.04}}}}},"_":{"docs":{},"p":{"docs":{},"r":{"docs":{},"o":{"docs":{},"t":{"docs":{},"o":{"docs":{},"t":{"docs":{},"y":{"docs":{},"p":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}},"x":{"docs":{},"i":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}}},"v":{"docs":{},"a":{"docs":{},"l":{"docs":{},"u":{"docs":{"classes/Interceptor.html":{"ref":"classes/Interceptor.html","tf":0.0055248618784530384}}}}}},"a":{"docs":{},"t":{"docs":{},"m":{"docs":{},"o":{"docs":{},"s":{"docs":{},"t":{"docs":{},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}}}}}},"n":{"docs":{},"e":{"docs":{},"v":{"docs":{},"e":{"docs":{},"r":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}},"o":{"docs":{},"n":{"docs":{},"c":{"docs":{"classes/Times.html":{"ref":"classes/Times.html","tf":0.0036231884057971015}}}}}}},"length":2642},"corpusTokens":["0","0/1","0/12","0/2","0/3","0/4","0/5","0/6","0/9","1","10","2","2bit","3","39","4","_atmostonc","_never","_onc","_prototyp","_proxi","_valu","accept","access","action","activestrategi","actual","add","add(act","add(key","alias","allow","any|it","appli","arg","arg1","arg2","argument","argumentsmatch","argumentsmatcherfactori","array","ask","assert","assign","atleast","atleast(callcount","atleastonc","atmost","atmost(callcount","atmostonc","b","behavior","behaviorstrategi","behaviour","between","between(callcountfrom","boolean","c","call","callback","callback((arg1","callback((argu","callback(callback","callback.apply(undefin","callbacks.loose.strategi","callbacks.loose.strategy.t","callbacks.loose.strategy.ts:16","callbacks.loose.strategy.ts:32","callbacks.loose.strategy.ts:9","callbacks.strict.strategi","callbacks.strict.strategy.t","callbacks.strict.strategy.ts:13","callbacks.strict.strategy.ts:29","callbacks.strict.strategy.ts:6","callbacks.t","callbacks.ts:13","callbacks.ts:14","callbacks.ts:18","callbacks.ts:29","callbacks.ts:37","callbacks.ts:41","callbacks.ts:45","callbacks/interceptor","callcount","callcounter(expressionmatcherfactori","callcounterfactori","callcountfrom","callcountto","calls:\\n${trackedexpressionsmessage}\\n${delimiter}\\n","case","catch","changelog","check","class","code","compat","compil","const","constant","constantformatt","constantformatter().format(object[index","constantmatch","constructor","constructor(arg","constructor(argumentsmatch","constructor(constantformatt","constructor(constantmatch","constructor(definedsetup","constructor(evalu","constructor(expectedexpressionformatt","constructor(expressionformatt","constructor(expressionmatch","constructor(expressionreflector","constructor(getpropertyexpressionmatch","constructor(getpropertyformatt","constructor(interceptorcallback","constructor(messag","constructor(mock","constructor(nam","constructor(pred","constructor(priv","constructor(publ","constructor(reflector","constructor(strictstrategi","control","correspond","count","count(expect","counter","counter.t","counter.ts:12","counter.ts:6","coverag","createobject","date","date(2016","date(2017","deal","declar","dedic","default","defin","definedsetup","definedsetups(expressionmatcherfactori","delimit","deni","depend","descript","description.push(new","dev","document","dump","e","enum","enumer","error","error('an","error('argu","error('invok","error('property4","es5","evalu","exactli","exactly(callcount","except","exclus","expect","expectedexpress","expectedexpressionformatt","expectedexpressionformatter(expressionformatterfactori","expectedexpressionformatterfactori","expectedexpressionmessag","expectedexpressionmessage}\\n${delimiter}\\ntrack","expectedexpressionreflector","expectedgetpropertyexpress","expectedgetpropertyexpression(nam","expectedgetpropertyexpression|it","expectedmethodexpress","expectedmethodexpression(arg","expectedmethodexpression|it","expectednamedmethodexpress","expectednamedmethodexpression(nam","expectednamedmethodexpression).nam","expectednamedmethodexpression|it","expectedsetpropertyexpress","expectedsetpropertyexpression(nam","expectedsetpropertyexpression|it","export","express","expression(proxi","expression.arguments.foreach(arg","expression.nam","expression.name}(${valu","expression.valu","expressiondescript","expressiondescription}${mockdescript","expressionformatt","expressionformatterfactori","expressionmatch","expressionmatcherfactori","expressionproxi","expressionreflector","expressions.t","expressions/expect","expressions/express","expressions|it","extend","factori","fals","field","file","find","folder","format","format(expect","format(express","format(object","format(templ","format(trackedexpress","formatt","formatted.join","formatted.push(this.constantformatter.format(arg","formatter.t","formatter.ts:10","formatter.ts:12","formatter.ts:15","formatter.ts:18","formatter.ts:22","formatter.ts:4","formatter.ts:5","formatter.ts:9","formatters/verifi","friendli","full","fulli","function","get","get(express","get.properti","get.property.integrationtests.t","getpropertyexpress","getpropertyexpression(methodnam","getpropertyexpression(nam","getpropertyexpressionformatt","getpropertyexpressionmatch","getpropertyformatt","getpropertyresult","getprototypeof","getter","hasnamedmethod","hasnamedmethod(methodnam","hasnamedmethod(nam","havebeencalledtim","help","hold","hook","https://dvabuzyarov.github.io/moq.t","identifi","iexpectedexpress","iinterceptorcallback","iinterceptorcallbacksstrategi","imock","implement","import","inclus","index","info","inspir","instal","instanc","instance(1","instance(2","instance(it.is(valu","instance(valu","instance.method","instance.method(1","instance.method(2","instance.method(3","instance.method(it.is(()=>tru","instance.method(it.is(valu","instance.properti","instance.property1","instance.property2","instance.property3","instance[property4nam","instanceof","integr","intend","intercept","intercepted(express","interceptedcallback","interceptor","interceptor(callback","interceptorcallback","interceptorcallbacks(strictstrategi","interceptorcallbacksfactori","interceptorcallbacksfactory(definedsetup","interceptorcallbacksloosestrategi","interceptorcallbacksloosestrategy(definedsetup","interceptorcallbacksstrictstrategi","interceptorcallbacksstrictstrategy(definedsetup","interceptorfactori","interceptorfactory(interceptedcallback","interfac","introduc","invok","invoke(arg","ipred","is(pred","isani","isetup","isetupinvok","it(pred","it).pred","it).test(left","it.i","it.is(${(object","it.is(()=>tru","it.is((express","it.is(valu","it.isani","itestfunct","itestobject","key","latest","left","left.foreach((lvalu","left.length","left.nam","let'","lib/cal","lib/defin","lib/expect","lib/express","lib/expressions.t","lib/expressions.ts:11","lib/expressions.ts:18","lib/expressions.ts:19","lib/expressions.ts:2","lib/expressions.ts:24","lib/expressions.ts:25","lib/expressions.ts:26","lib/expressions.ts:4","lib/format","lib/formatters/const","lib/formatters/expect","lib/formatters/express","lib/formatters/factories.t","lib/formatters/get.properti","lib/formatters/method","lib/formatters/named.method","lib/formatters/set.properti","lib/formatters/track","lib/formatters/verifi","lib/interceptor","lib/interceptor.t","lib/interceptor.ts:14","lib/interceptor.ts:20","lib/interceptor.ts:28","lib/mock.t","lib/mock.ts:17","lib/mock.ts:23","lib/mock.ts:26","lib/mock.ts:31","lib/mock.ts:38","lib/mock.ts:43","lib/mock.ts:47","lib/mock.ts:52","lib/mock.ts:58","lib/setup.t","lib/setup.ts:10","lib/setup.ts:14","lib/setup.ts:19","lib/setup.ts:24","lib/setup.ts:4","lib/times.t","lib/times.ts:10","lib/times.ts:13","lib/times.ts:17","lib/times.ts:21","lib/times.ts:25","lib/times.ts:29","lib/times.ts:33","lib/times.ts:40","lib/times.ts:44","lib/times.ts:48","lib/times.ts:52","lib/tracker.t","lib/tracker.ts:13","lib/tracker.ts:9","lib/verifier.t","lib/verifier.ts:17","lib/verifier.ts:26","lib/verifier.ts:7","librari","log","loos","loosestrategi","magic","make","match","matched(left","matcher","matcher.t","matcher.ts:12","matcher.ts:15","matcher.ts:24","matcher.ts:4","matcher.ts:5","matcher.ts:6","matcher.ts:7","matcher.ts:9","matchers/argu","matchers/const","matchers/express","matchers/factori","matchers/factories.t","matchers/get.properti","matchers/method","matchers/named.method","matchers/set.properti","matter","messag","method","method(1","method(arg1","method.property.integrationtests.t","methodexpress","methodexpression(arg","methodexpressionformatt","methodexpressionmatch","methodformatt","methodformatterfactori","methodmatcherfactori","methodnam","minimalist","miscellan","mock","mock(mocknam","mock.object","mock.verify(inst","mockbehavior","mockbehavior.loos","mockbehavior.strict","mockcor","mockdescript","mocknam","modul","moq","moq.t","name","named.method","named.method.integrationtests.t","namedmethodexpress","namedmethodexpression(nam","namedmethodexpressionformatt","namedmethodexpressionmatch","namedmethodformatt","namedmethodformatterfactori","namedmethodmatcherfactori","need","never","new","now","npm","null","number","number)=>boolean","number|ani","object","object.getprototypeof","object.method","object.method(1","object.properti","object.setprototypeof","onc","oper","option","origin","out","overview","packag","paramet","part","pass","pointer","possibl","preced","predic","predicates.t","predicates.ts:1","predicates.ts:11","predicates.ts:15","predicates.ts:19","predicates.ts:6","predicates.ts:7","pretti","print","privat","product","project","properti","property1","property2","property3","property4","property4nam","prototyp","prototype[methodnam","prototypeof","prototypeof(prototyp","prototypeof(testobject","proxi","proxy(funct","proxy:ani","public","quick","rang","recommend","refactor","reflect","reflect(express","reflectedinfo","reflector","reflector.t","reflector.ts:41","reflector.ts:7","result","result.length","result.substr(0","return","returns('cal","returns(()=>{console.log('th","returns(1","returns(100","returns(fals","returns(new","returns(tru","returns(undefined);mockbehavior.loos","returns(valu","right","right.length","right[index","rightexpress","rightexpression.argu","rightexpression.nam","rightexpression.valu","rvalu","save","separ","set","set.properti","set.property.integrationtests.t","set/read","setbehaviorstrategi","setbehaviorstrategy(behavior","setbehaviorstrategy(behaviorstrategi","setbehaviorstrategy(mockbehavior.loos","setbehaviorstrategy(mockbehavior.strict);th","setpropertyexpress","setpropertyexpression(nam","setpropertyexpressionformatt","setpropertyexpressionmatch","setpropertyformatt","setpropertyformatterfactori","setpropertymatcherfactori","setprototypeof","setup","setup(express","setup(inst","setup(mock","setup.invok","setup.invoke((expression).argu","setup.invoke([(expression).valu","setupfactori","setups.t","setups.ts:13","setups.ts:17","setups.ts:26","setups.ts:7","signatur","simpl","sourc","spi","start","statement","static","still","strict","strictstrategi","string","string.t","strongli","super","super(messag","support","t","tabl","tablesort(document.getelementbyid('coverag","target","test","test(callcount","test(expect","test(inst","testobject","tests.integr","texcept","therefor","this._prototyp","this._prototype.prototyp","this._proxi","this._values.hasownproperty(nam","this._values[nam","this.act","this.action(arg","this.activestrategi","this.activestrategy.hasnamedmethod(methodnam","this.activestrategy.intercepted(express","this.argu","this.argumentsmatcher.matched(left.argu","this.callcounter.count(express","this.constantformatter.format(express","this.constantformatter.format(expression.argu","this.constantformatter.format(expression.valu","this.constantmatcher.matched(left.valu","this.constantmatcher.matched(lvalu","this.createobject","this.definedsetups.add(expectedexpress","this.definedsetups.get(express","this.definedsetups.get(getpropertyexpress","this.definedsetups.hasnamedmethod(methodnam","this.evaluator(callcount","this.expectedexpressionformatter.format(expect","this.expressionformatter.format(expect","this.expressionformatter.format(expression)}\\n","this.expressionmatcher.matched(express","this.expressionproxi","this.expressionreflector.reflect(express","this.getpropertyexpressionmatcher.matched(left","this.getpropertyformatter.format(express","this.interceptedcallbacks.setbehaviorstrategy(behaviorstrategi","this.interceptor","this.interceptor.object","this.interceptor.prototypeof(prototyp","this.interceptorcallbacks.hasnamedmethod(nam","this.interceptorcallbacks.intercepted(express","this.interceptorcallbacks.intercepted(getpropertyexpress","this.interceptorcallbacks.intercepted(namedmethodexpress","this.log","this.log.push(act","this.loosestrategi","this.methodexpressionmatcher.matched(left","this.methodformatter.format(express","this.mock","this.nam","this.namedmethodexpressionmatcher.matched(left","this.namedmethodformatter.format(express","this.predicate(inst","this.reflectedinfo","this.reflector.reflect(expect","this.setpropertyexpressionmatcher.matched(left","this.setpropertyformatter.format(express","this.setup","this.setupfactory(thi","this.setups.unshift([key","this.strictstrategi","this.trackedexpressionsformatter.format(trackedexpress","this.tracker.add(express","this.tracker.get","this.verifier.test(express","this.verifyformatter.format(express","thisarg","throw","throws(except","throws(new","time","time(","times(expect","times._atleastonc","times._nev","times._onc","times.exactly(1","times.messag","times.never());mock","times.onc","times.once());mock","times.test(callcount","timesmessag","timesmessage.tolowercas","track","trackedexpress","trackedexpressionsformatt","trackedexpressionsformatter(expressionformatterfactori","trackedexpressionsformatterfactori","trackedexpressionsmessag","tracker","tresult","tri","true","truesponsor","tvalu","type","typealias","typeerror","typeof","typescript","unam","undefin","unset","us","usag","v2.1.0","v2.3.0","v2.3.1","v2.4.0","v2.5.0","v2.5.1","valu","values[0","values[1","values[2","var","variabl","verifi","verifier(new","verifierfactori","verify(express","verifyerror","verifyerror(messag","verifyformatt","verifyformatter(expectedexpressionformatterfactori","verifyformatterfactori","void","want","whit","without","work","write","written"],"pipeline":["trimmer","stopWordFilter","stemmer"]},
    "store": {"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\nmoq.ts\nMoq for Typescript. Inspired by c# Moq library.\nDocumentation https://dvabuzyarov.github.io/moq.ts/\nImportant\nThis implementation depends on Proxy object.\nSo if your production code is not compatible with this I would recommend you separate you production code and testing code into dedicated projects.\nIf you need help whit this then ask me.\nInstall\nnpm install moq.ts --save-dev\nQuick start\nmoq.ts as the original Moq library is intended to be simple to use, strongly typed (no magic strings!, and therefore full compiler-verified and refactoring-friendly) and minimalistic (while still fully functional!).\nYou can find a pretty full set of usages in the integration tests. Check out tests.integration folder.\nMocking property of objects\n-\nmock-get.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedGetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property1: number;\n    property2: number;\n    property3: number;\n    property4: number;\n    method(): void;\n}\n\nconst property4Name = 'property4';\nconst mockName = 'mock name is optional';\nconst mock = new Mock(mockName)\n    .setup(instance => instance.property1)\n    .returns(1)\n\n    .setup(instance => It.Is((expression: ExpectedGetPropertyExpression) => expression.name === 'property2'))\n    .returns(100)\n\n    //let's deny any write operation on the property for all values\n    .setup(instance => {instance.property2 = It.Is(() => true)})\n    .returns(false)\n\n    .setup(instance => instance.property3)\n    .callback(()=> 10 + 10)\n\n    .setup(instance => instance[property4Name])\n    .throws(new Error('property4 access'))\n\n    //since a method is a property that holds a pointer to a function\n    .setup(instance => instance.method)\n    .returns(()=>{console.log('The method was called')});\n\nconst object = mock.object();\nobject.method();\n\nmock.verify(instance=> instance.property1, Times.Never());Mocking property setting\n-\nThe documentation on returned value from 'set hook' on Proxy object\nmock-set.property.IntegrationTests.ts\nimport {Mock, It, Times, ExpectedSetPropertyExpression} from 'moq.ts';\ninterface ITestObject {\n    property: number|any;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => {instance.property = 1})\n    //true - allows the write operation\n    .returns(true)\n\n    .setup(instance => It.Is((expression: ExpectedSetPropertyExpression) => expression.name === 'property' && expression.value === 2))\n    //false - denies the write operation\n    .returns(false)\n\n    .setup(instance => {instance.property = It.Is(value => value === 3)})\n    // allows the write operation\n    .callback(()=> true)\n\n    .setup(instance => {instance.property = value})\n    .throws(new Error('an object has been written into property'));\n\n\nconst object = mock.object();\nobject.property = 1;\n\nmock.verify(instance=> {instance.property = 1}, Times.Once());Mocking functions\n-\nmock-method.property.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestFunction {\n    (arg: number|any): string;\n}\n\nconst value = {field: new Date()};\n\nconst mock = new Mock()\n    .setup(instance => instance(1))\n    .returns('called with 1')\n\n    .setup(instance => instance(2))\n    .callback((argument)=> argument === 2 ? 'called with 2' : `called with ${argument}`)\n\n    .setup(instance => instance(value))\n    .throws(new Error('Argument is object with date'))\n\n    .setup(instance => instance(It.Is(value => value === 4)))\n    .returns('called with 4');\n\nconst method = mock.object();\nconst actual = method(1);\n\nmock.verify(instance => instance(1), Times.Once());\nmock.verify(instance => instance(It.Is(value=> value === 1)), Times.Exactly(1)); Mocking functions of objects\n -\nmock-named.method.IntegrationTests.ts\nimport {Mock, It, Times} from 'moq.ts';\ninterface ITestObject {\n    method(arg1: number, arg2: string): Date;\n}\n\nconst values = ['a', 'b', 'c'];\n\nconst mock = new Mock()\n    .setup(instance => instance.method(1, values[0]))\n    .returns(new Date(2016))\n\n    .setup(instance => instance.method(It.Is(value => value === 2), values[1]))\n    .callback((arg1, arg2)=> new Date(2017 + arg1))\n\n    .setup(instance => instance.method(3, It.Is(value => value === values[2])))\n    .throws(new Error('Invoking method with 3 and c'));\n\nconst object = mock.object();\nconst actual = object.method(1, 'a');\n\nmock.verify(instance => instance.method(2, 'a'), Times.Never());Mock behavior\nYou can control mock behavior when accessing to a property without a corresponding setup. \n    mock = new Mock()\n    .setBehaviorStrategy(MockBehavior.Loose)\n    //or\n    .setBehaviorStrategy(MockBehavior.Strict);The default behavior is strict.\nMockBehavior.Strict\nAccessing to an unset property will return undefined value;\nAccessing to an unset method of an object will throw TypeError exception; It does not matter if a method is a part of mocked type.\nIf you want to track a method you can define a default setup:\nconst mock = new Mock()\n    .setup(instance => instance.method(It.Is(()=>true), It.Is(()=>true)))\n    .returns(undefined);MockBehavior.Loose\nAccessing to an unset property or a method will return a pointer to a spy function;\nYou can call this function and it will be tracked.\nMock prototype\nIf you need to make work instanceof operator or you need to deal with prototype of the mock object you can \nuse prototypeof function of Mock class. Or you can use Object.getPrototypeOf or Object.setPrototypeOf functions\non mock object.\nclass TestObject implements ITestObject {\n\n}\n\nconst mock = new Mock()\n                .prototypeof(TestObject)\n                .object();\n\nmock.object() instanceof TestObject;// trueSponsored by 2BIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\nOverview\n\n    \n            \n                \n                    \n                        \n                        39 classes\n                    \n                \n            \n            \n                \n                    \n                        \n                        4 interfaces\n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nv2.1.0\n\nMock behaviours (strict and loose) have been introduced.\n\nv2.3.0\n\nMock prototype has been introduced. Now it is possible to set/read prototype of mock with prototypeof function.\nAlso mock object supports Object.getPrototypeOf and Object.setPrototypeOf functions. You may need it to make work \ninstanceof operator.\n\nv2.3.1\n\nThe NPM package is compiled as es5 code.\nv2.4.0\n\nIt.IsAny predicate has been introduced.\nv2.5.0\n\nIn case of false assertion the dump of the tracked expressions is printed.\nv2.5.1\n\nThe latest setup has precedence\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\nModules\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ArgumentsMatcher.html":{"url":"classes/ArgumentsMatcher.html","title":"class - ArgumentsMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ArgumentsMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/arguments-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(constantMatcher: ConstantMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/arguments-matcher.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              constantMatcher\n                                                              \n                                                                        ConstantMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public matched\n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: any[], right: [])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/arguments-matcher.ts:9\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              left\n                                                              \n                                                                      any[]\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              right\n                                                              \n                                                                      []\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class ArgumentsMatcher  {\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: any[], right: (any|It)[]): boolean{\n        if (left === right) return true;\n        if (left.length !== right.length) return false;\n\n        let matched = true;\n        left.forEach((lvalue, index) =>{\n            const rvalue = right[index];\n            matched = this.constantMatcher.matched(lvalue, rvalue) === true ? matched : false;\n        });\n\n        return matched;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CallCounter.html":{"url":"classes/CallCounter.html","title":"class - CallCounter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  CallCounter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/call-counter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public count\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(expressionMatcher: ExpressionMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/call-counter.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expressionMatcher\n                                                              \n                                                                        ExpressionMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public count\n                                \n                            \n                            \n                                \n                                        \n                                    count(expected: ExpectedExpressions, expressions: Expressions[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/call-counter.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expected\n                                                              \n                                                                      ExpectedExpressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              expressions\n                                                              \n                                                                      Expressions[]\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     number\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ExpectedExpressions} from './expected-expressions/expected-expressions';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\n\nexport class CallCounter {\n\n    constructor(private expressionMatcher: ExpressionMatcher) {\n\n    }\n\n    public count(expected: ExpectedExpressions, expressions: Expressions[]): number {\n        let count = 0;\n        for (const expression of expressions) {\n            if (this.expressionMatcher.matched(expression, expected) === true)\n                count += 1;\n        }\n\n        return count;\n    }\n}\n\nexport function callCounterFactory(): CallCounter {\n    return new CallCounter(expressionMatcherFactory());\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantFormatter.html":{"url":"classes/ConstantFormatter.html","title":"class - ConstantFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/constant-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(object: any | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/constant-formatter.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              object\n                                                              \n                                                                      any | It\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantFormatter {\n\n    public format(object: any|It): string {\n        if (object instanceof It) return `It.Is(${(object as It).predicate})`;\n        if (object instanceof String || typeof object === \"string\") return `\\'${object}\\'`;\n        if (object instanceof Array) {\n            const description = [];\n            for (const index in object)\n                description.push(new ConstantFormatter().format(object[index]));\n\n            return `[${description}]`;\n        }\n        return `${object}`;\n    }\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConstantMatcher.html":{"url":"classes/ConstantMatcher.html","title":"class - ConstantMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ConstantMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/constant-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public matched\n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: any, right: any | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/constant-matcher.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              left\n                                                              \n                                                                      any\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              right\n                                                              \n                                                                      any | It\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {It} from '../expected-expressions/expression-predicates';\n\nexport class ConstantMatcher {\n\n    public matched(left: any, right: any|It): boolean {\n        if (right instanceof It)\n            return (right as It).test(left);\n        return left === right;\n    }\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DefinedSetups.html":{"url":"classes/DefinedSetups.html","title":"class - DefinedSetups","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  DefinedSetups\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/defined-setups.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public add\n                                    \n                                    \n                                        Public get\n                                    \n                                    \n                                        Public hasNamedMethod\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(expressionMatcher: ExpressionMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/defined-setups.ts:7\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expressionMatcher\n                                                              \n                                                                        ExpressionMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public add\n                                \n                            \n                            \n                                \n                                        \n                                    add(key: ExpectedExpressions, setup: ISetupInvoke)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/defined-setups.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              key\n                                                              \n                                                                      ExpectedExpressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              setup\n                                                              \n                                                                      ISetupInvoke\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public get\n                                \n                            \n                            \n                                \n                                        \n                                    get(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/defined-setups.ts:17\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      Expressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     ISetupInvoke<>\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public hasNamedMethod\n                                \n                            \n                            \n                                \n                                        \n                                    hasNamedMethod(name: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/defined-setups.ts:26\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              name\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ExpectedExpressions, ExpectedNamedMethodExpression} from './expected-expressions/expected-expressions';\nimport {ISetupInvoke} from './moq';\nimport {Expressions} from './expressions';\nimport {ExpressionMatcher} from './expression-matchers/expression-matcher';\n\nexport class DefinedSetups {\n    private setups: [ExpectedExpressions, ISetupInvoke][] = [];\n\n    constructor(private expressionMatcher: ExpressionMatcher){\n\n    }\n\n    public add(key: ExpectedExpressions, setup: ISetupInvoke): void {\n        this.setups.unshift([key, setup]);\n    }\n\n    public get (expression: Expressions): ISetupInvoke{\n        for (const [key, value] of this.setups){\n            if (this.expressionMatcher.matched(expression, key) === true)\n                return value;\n        }\n\n        return undefined;\n    }\n\n    public hasNamedMethod(name: string): boolean{\n        for (const [key] of this.setups){\n            if (key instanceof ExpectedNamedMethodExpression && (key as ExpectedNamedMethodExpression).name === name)\n                return true;\n        }\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionFormatter.html":{"url":"classes/ExpectedExpressionFormatter.html","title":"class - ExpectedExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expected-expression-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(expressionFormatter: ExpressionFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/expected-expression-formatter.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expressionFormatter\n                                                              \n                                                                        ExpressionFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/expected-expression-formatter.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expected\n                                                              \n                                                                      ExpectedExpressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              timesMessage\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              haveBeenCalledTimes\n                                                              \n                                                                      number\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              mockName\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                                  true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\n\nexport function expectedExpressionFormatterFactory (): ExpectedExpressionFormatter {\n    return new ExpectedExpressionFormatter(expressionFormatterFactory());\n}\n\nexport class ExpectedExpressionFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, mockName?: string): string {\n        const expressionDescription = this.expressionFormatter.format(expected);\n        const mockDescription = mockName !== undefined ? ` of ${mockName}` : '';\n        return `${expressionDescription}${mockDescription} ${timesMessage.toLowerCase()}, but was called ${haveBeenCalledTimes} time(s)`;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedExpressionReflector.html":{"url":"classes/ExpectedExpressionReflector.html","title":"class - ExpectedExpressionReflector","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedExpressionReflector\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public reflect\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public reflect\n                                \n                            \n                            \n                                \n                                        \n                                    reflect(expression: IExpectedExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:41\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      IExpectedExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     ExpectedExpressions<>\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedGetPropertyExpression.html":{"url":"classes/ExpectedGetPropertyExpression.html","title":"class - ExpectedGetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedGetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    GetPropertyExpression\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedMethodExpression.html":{"url":"classes/ExpectedMethodExpression.html","title":"class - ExpectedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MethodExpression\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedNamedMethodExpression.html":{"url":"classes/ExpectedNamedMethodExpression.html","title":"class - ExpectedNamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedNamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    NamedMethodExpression\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpectedSetPropertyExpression.html":{"url":"classes/ExpectedSetPropertyExpression.html","title":"class - ExpectedSetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ExpectedSetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expressions.ts\n        \n\n\n            \n                Extends\n            \n            \n                    SetPropertyExpression\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {SetPropertyExpression, GetPropertyExpression, MethodExpression, NamedMethodExpression} from '../expressions';\n\nexport class ExpectedNamedMethodExpression extends NamedMethodExpression {\n\n}\n\nexport class ExpectedMethodExpression extends MethodExpression {\n\n}\n\nexport class ExpectedGetPropertyExpression extends GetPropertyExpression {\n\n}\n\nexport class ExpectedSetPropertyExpression extends SetPropertyExpression {\n\n}\n\nexport type ExpectedExpressions = ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It;\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionFormatter.html":{"url":"classes/ExpressionFormatter.html","title":"class - ExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/expression-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(getPropertyFormatter: GetPropertyExpressionFormatter, setPropertyFormatter: SetPropertyExpressionFormatter, methodFormatter: MethodExpressionFormatter, namedMethodFormatter: NamedMethodExpressionFormatter, constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/expression-formatter.ts:12\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              getPropertyFormatter\n                                                              \n                                                                        GetPropertyExpressionFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              setPropertyFormatter\n                                                              \n                                                                        SetPropertyExpressionFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              methodFormatter\n                                                              \n                                                                        MethodExpressionFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              namedMethodFormatter\n                                                              \n                                                                        NamedMethodExpressionFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              constantFormatter\n                                                              \n                                                                        ConstantFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: Expressions | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/expression-formatter.ts:22\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      Expressions | It\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, SetPropertyExpression, NamedMethodExpression,\n    MethodExpression\n} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {GetPropertyExpressionFormatter} from './get.property-formatter';\nimport {SetPropertyExpressionFormatter} from './set.property-formatter';\nimport {MethodExpressionFormatter} from './method-formatter';\nimport {NamedMethodExpressionFormatter} from './named.method-formatter';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class ExpressionFormatter {\n\n    constructor(private getPropertyFormatter: GetPropertyExpressionFormatter,\n                private setPropertyFormatter: SetPropertyExpressionFormatter,\n                private methodFormatter: MethodExpressionFormatter,\n                private namedMethodFormatter: NamedMethodExpressionFormatter,\n                private constantFormatter: ConstantFormatter) {\n\n    }\n\n    public format(expression: Expressions|It): string {\n        if (expression instanceof GetPropertyExpression) return this.getPropertyFormatter.format(expression);\n        if (expression instanceof SetPropertyExpression) return this.setPropertyFormatter.format(expression);\n        if (expression instanceof MethodExpression) return this.methodFormatter.format(expression);\n        if (expression instanceof NamedMethodExpression) return this.namedMethodFormatter.format(expression);\n        if (expression instanceof It) return this.constantFormatter.format(expression);\n\n        return undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ExpressionMatcher.html":{"url":"classes/ExpressionMatcher.html","title":"class - ExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  ExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/expression-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(getPropertyExpressionMatcher: GetPropertyExpressionMatcher, setPropertyExpressionMatcher: SetPropertyExpressionMatcher, methodExpressionMatcher: MethodExpressionMatcher, namedMethodExpressionMatcher: NamedMethodExpressionMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/expression-matcher.ts:15\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              getPropertyExpressionMatcher\n                                                              \n                                                                        GetPropertyExpressionMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              setPropertyExpressionMatcher\n                                                              \n                                                                        SetPropertyExpressionMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              methodExpressionMatcher\n                                                              \n                                                                        MethodExpressionMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              namedMethodExpressionMatcher\n                                                              \n                                                                        NamedMethodExpressionMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public matched\n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: Expressions, right: ExpectedExpressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/expression-matcher.ts:24\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              left\n                                                              \n                                                                      Expressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              right\n                                                              \n                                                                      ExpectedExpressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {GetPropertyExpressionMatcher} from './get.property-matcher';\nimport {SetPropertyExpressionMatcher} from './set.property-matcher';\nimport {MethodExpressionMatcher} from './method-matcher';\nimport {NamedMethodExpressionMatcher} from './named.method-matcher';\nimport {\n    Expressions, GetPropertyExpression, SetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from '../expressions';\nimport {\n    ExpectedExpressions, ExpectedGetPropertyExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedNamedMethodExpression\n} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class ExpressionMatcher {\n\n    constructor(private getPropertyExpressionMatcher: GetPropertyExpressionMatcher,\n                private setPropertyExpressionMatcher: SetPropertyExpressionMatcher,\n                private methodExpressionMatcher: MethodExpressionMatcher,\n                private namedMethodExpressionMatcher: NamedMethodExpressionMatcher) {\n\n    }\n\n    public matched(left: Expressions, right: ExpectedExpressions): boolean {\n\n        if (left === right) return true;\n        if (right === undefined) return true;\n\n        if (left instanceof GetPropertyExpression && (right instanceof ExpectedGetPropertyExpression || right instanceof It))\n            return this.getPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof SetPropertyExpression && (right instanceof ExpectedSetPropertyExpression || right instanceof It))\n            return this.setPropertyExpressionMatcher.matched(left, >right);\n        if (left instanceof MethodExpression && (right instanceof ExpectedMethodExpression || right instanceof It))\n            return this.methodExpressionMatcher.matched(left, >right);\n        if (left instanceof NamedMethodExpression && (right instanceof ExpectedNamedMethodExpression || right instanceof It))\n            return this.namedMethodExpressionMatcher.matched(left, >right);\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpression.html":{"url":"classes/GetPropertyExpression.html","title":"class - GetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public name\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(name: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:18\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              name\n                                                              \n                                                                        string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public name\n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:19\n                                        \n                                    \n            \n            \n                        \n                    \n            \n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionFormatter.html":{"url":"classes/GetPropertyExpressionFormatter.html","title":"class - GetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/get.property-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: GetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/get.property-formatter.ts:5\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      GetPropertyExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\n\nexport class GetPropertyExpressionFormatter{\n\n    public format(expression: GetPropertyExpression): string{\n        return `Getter of \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPropertyExpressionMatcher.html":{"url":"classes/GetPropertyExpressionMatcher.html","title":"class - GetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  GetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/get.property-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public matched\n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/get.property-matcher.ts:7\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              left\n                                                              \n                                                                      GetPropertyExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              right\n                                                              \n                                                                      ExpectedGetPropertyExpression | It\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {GetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ExpectedGetPropertyExpression} from '../expected-expressions/expected-expressions';\n\nexport class GetPropertyExpressionMatcher{\n\n    public matched(left: GetPropertyExpression, right: ExpectedGetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedGetPropertyExpression;\n        if (left.name === rightExpression.name) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Interceptor.html":{"url":"classes/Interceptor.html","title":"class - Interceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  Interceptor\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public object\n                                    \n                                    \n                                        Public prototypeof\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(interceptorCallbacks: IInterceptorCallbacksStrategy)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/interceptor.ts:14\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              interceptorCallbacks\n                                                              \n                                                                        IInterceptorCallbacksStrategy\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public object\n                                \n                            \n                            \n                                \n                                        \n                                    object()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor.ts:20\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     T\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public prototypeof\n                                \n                            \n                            \n                                \n                                        \n                                    prototypeof(prototype?: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor.ts:28\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              prototype\n                                                              \n                                                                      any\n                                                              \n                                                              \n                                                                  true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {\n    GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from './expressions';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks/interceptor-callbacks';\n\ndeclare var Proxy: any;\n\nexport class Interceptor {\n\n\n    private _proxy: T;\n    private _prototype: any;\n    private _values = {};\n\n    constructor(private interceptorCallbacks: IInterceptorCallbacksStrategy) {\n        this._prototype = Function;\n    }\n\n    public object(): T {\n        if (this._proxy === undefined) {\n            this._proxy = this.createObject();\n        }\n\n        return this._proxy;\n    }\n\n    public prototypeof(prototype?: any): any {\n        if (prototype !== undefined)\n            this._prototype = prototype;\n\n        return this._prototype;\n    }\n\n    private createObject(): T {\n        const options = {\n            get: (target, name) => {\n                const getPropertyExpression = new GetPropertyExpression(name);\n                const getPropertyResult = this.interceptorCallbacks.intercepted(getPropertyExpression);\n\n                if (this._values.hasOwnProperty(name) === true)\n                    return this._values[name];\n\n                if (this.interceptorCallbacks.hasNamedMethod(name, this._prototype) === false)\n                    return getPropertyResult;\n\n                return (...args) => {\n                    const namedMethodExpression = new NamedMethodExpression(name, args);\n                    return this.interceptorCallbacks.intercepted(namedMethodExpression);\n                }\n            },\n\n            set: (target, name, value) => {\n                const expression = new SetPropertyExpression(name, value);\n                const accepted = this.interceptorCallbacks.intercepted(expression);\n                if (accepted === true || accepted === undefined) {\n                    this._values[name] = value;\n                }\n\n                return accepted === undefined ? true : accepted;\n            },\n\n            apply: (target, thisArg, args) => {\n                const expression = new MethodExpression(args);\n                return this.interceptorCallbacks.intercepted(expression);\n            },\n\n            getPrototypeOf: (target) => {\n                if (this._prototype === null)\n                    return null;\n                return this._prototype.prototype;\n            },\n            setPrototypeOf: (target, prototype) => {\n                if (prototype !== undefined)\n                    this._prototype = prototype;\n                return true;\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacks.html":{"url":"classes/InterceptorCallbacks.html","title":"class - InterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacks\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacks\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public hasNamedMethod\n                                    \n                                    \n                                        Public intercepted\n                                    \n                                    \n                                        Public setBehaviorStrategy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(strictStrategy: IInterceptorCallbacksStrategy, looseStrategy: IInterceptorCallbacksStrategy)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:29\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              strictStrategy\n                                                              \n                                                                        IInterceptorCallbacksStrategy\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              looseStrategy\n                                                              \n                                                                        IInterceptorCallbacksStrategy\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public hasNamedMethod\n                                \n                            \n                            \n                                \n                                        \n                                    hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:41\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              methodName\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              prototype\n                                                              \n                                                                      any\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public intercepted\n                                \n                            \n                            \n                                \n                                        \n                                    intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:37\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      Expressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public setBehaviorStrategy\n                                \n                            \n                            \n                                \n                                        \n                                    setBehaviorStrategy(behavior: MockBehavior)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:45\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              behavior\n                                                              \n                                                                      MockBehavior\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksLooseStrategy.html":{"url":"classes/InterceptorCallbacksLooseStrategy.html","title":"class - InterceptorCallbacksLooseStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksLooseStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public hasNamedMethod\n                                    \n                                    \n                                        Public intercepted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(definedSetups: DefinedSetups, tracker: Tracker)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              definedSetups\n                                                              \n                                                                        DefinedSetups\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              tracker\n                                                              \n                                                                        Tracker\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public hasNamedMethod\n                                \n                            \n                            \n                                \n                                        \n                                    hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:32\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              methodName\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              prototype\n                                                              \n                                                                      any\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public intercepted\n                                \n                            \n                            \n                                \n                                        \n                                    intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts:16\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      Expressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {\n    Expressions, GetPropertyExpression, MethodExpression, NamedMethodExpression,\n    SetPropertyExpression\n} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksLooseStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const getPropertyExpression = new GetPropertyExpression(methodName);\n        const setup = this.definedSetups.get(getPropertyExpression);\n        return setup !== undefined ? false : true;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/InterceptorCallbacksStrictStrategy.html":{"url":"classes/InterceptorCallbacksStrictStrategy.html","title":"class - InterceptorCallbacksStrictStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  InterceptorCallbacksStrictStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IInterceptorCallbacksStrategy\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public hasNamedMethod\n                                    \n                                    \n                                        Public intercepted\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(definedSetups: DefinedSetups, tracker: Tracker)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              definedSetups\n                                                              \n                                                                        DefinedSetups\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              tracker\n                                                              \n                                                                        Tracker\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public hasNamedMethod\n                                \n                            \n                            \n                                \n                                        \n                                    hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:29\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              methodName\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              prototype\n                                                              \n                                                                      any\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public intercepted\n                                \n                            \n                            \n                                \n                                        \n                                    intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      Expressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Expressions, MethodExpression, NamedMethodExpression, SetPropertyExpression} from '../expressions';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {IInterceptorCallbacksStrategy} from './interceptor-callbacks';\n\nexport class InterceptorCallbacksStrictStrategy implements IInterceptorCallbacksStrategy {\n\n    constructor(private definedSetups: DefinedSetups,\n                private tracker: Tracker) {\n\n    }\n\n    public intercepted(expression: Expressions): any {\n        this.tracker.add(expression);\n        const setup = this.definedSetups.get(expression);\n        if (setup !== undefined) {\n            if (expression instanceof MethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof NamedMethodExpression)\n                return setup.invoke((expression).arguments);\n            if (expression instanceof SetPropertyExpression)\n                return setup.invoke([(expression).value]);\n\n            return setup.invoke();\n        }\n        return undefined;\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        const hasNamedMethod = this.definedSetups.hasNamedMethod(methodName);\n        if (hasNamedMethod === true) return true;\n\n        if (prototype !== null && prototype[methodName] instanceof Function)\n            return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/It.html":{"url":"classes/It.html","title":"class - It","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  It\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public predicate\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public Is\n                                    \n                                    \n                                        Public IsAny\n                                    \n                                    \n                                        Public test\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(predicate: IPredicate)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              predicate\n                                                              \n                                                                        IPredicate\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public Is\n                                \n                            \n                            \n                                \n                                        \n                                    Is(predicate: IPredicate)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:11\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              predicate\n                                                              \n                                                                      IPredicate\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :      | any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public IsAny\n                                \n                            \n                            \n                                \n                                        \n                                    IsAny()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :      | any\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public test\n                                \n                            \n                            \n                                \n                                        \n                                    test(instance: T)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:19\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              instance\n                                                              \n                                                                      T\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public predicate\n                                \n                            \n                            \n                                \n                                    predicate:     IPredicate\n            \n                                \n                            \n                                \n                                    \n                                        Type :     IPredicate\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:7\n                                        \n                                    \n            \n            \n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpression.html":{"url":"classes/MethodExpression.html","title":"class - MethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public arguments\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(args: any[])\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:11\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              args\n                                                              \n                                                                        any[]\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public arguments\n                                \n                            \n                            \n                                \n                                    arguments:     any[]\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any[]\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:11\n                                        \n                                    \n            \n            \n                        \n                    \n            \n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionFormatter.html":{"url":"classes/MethodExpressionFormatter.html","title":"class - MethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/method-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/method-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              constantFormatter\n                                                              \n                                                                        ConstantFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: MethodExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/method-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      MethodExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {MethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class MethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: MethodExpression): string{\n        const value = this.constantFormatter.format(expression.arguments);\n        return `(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MethodExpressionMatcher.html":{"url":"classes/MethodExpressionMatcher.html","title":"class - MethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  MethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/method-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(argumentsMatcher: ArgumentsMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/method-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              argumentsMatcher\n                                                              \n                                                                        ArgumentsMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public matched\n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: MethodExpression, right: ExpectedMethodExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/method-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              left\n                                                              \n                                                                      MethodExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              right\n                                                              \n                                                                      ExpectedMethodExpression | It\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {MethodExpression} from '../expressions';\nimport {ExpectedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class MethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: MethodExpression, right: ExpectedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedMethodExpression;\n        return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Mock.html":{"url":"classes/Mock.html","title":"class - Mock","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  Mock\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n            \n                Extends\n            \n            \n                    MockCore\n            \n\n\n\n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(name?: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/mock.ts:58\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              name\n                                                              \n                                                                        string\n                                                              \n                                                              \n                                                                      true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {IMock, ISetupInvoke, ISetup} from './moq';\nimport {Interceptor} from './interceptor';\nimport {ExpectedExpressionReflector, IExpectedExpression} from './expected-expressions/expected-expression-reflector';\nimport {Tracker} from './tracker';\nimport {DefinedSetups} from './defined-setups';\nimport {Setup} from './setup';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\nimport {Times} from './times';\nimport {Verifier, verifierFactory} from './verifier';\nimport {\n    IInterceptorCallbacks, interceptorCallbacksFactory,\n    MockBehavior\n} from './interceptor-callbacks/interceptor-callbacks';\n\n\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n    constructor(\n                private expressionReflector: ExpectedExpressionReflector,\n                private interceptorFactory: (callbacks: IInterceptorCallbacks)=> Interceptor,\n                private setupFactory: (mock: IMock)=> ISetupInvoke,\n                private definedSetups: DefinedSetups,\n                public tracker: Tracker,\n                private verifier: Verifier,\n                private interceptedCallbacks: IInterceptorCallbacks,\n                public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): void {\n        times = times === undefined ? Times.Once() : times;\n        this.verifier.test(expression, times, this.tracker.get(), this.name);\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = new Tracker();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MockCore.html":{"url":"classes/MockCore.html","title":"class - MockCore","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  MockCore\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/mock.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        IMock\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public name\n                                    \n                                    \n                                        Public tracker\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public object\n                                    \n                                    \n                                        Public prototypeof\n                                    \n                                    \n                                        Public setBehaviorStrategy\n                                    \n                                    \n                                        Public setup\n                                    \n                                    \n                                        Public verify\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(expressionReflector: ExpectedExpressionReflector, interceptorFactory: (callbacks: IInterceptorCallbacks) => void, setupFactory: (mock: IMock) => void, definedSetups: DefinedSetups, tracker: Tracker, verifier: Verifier, interceptedCallbacks: IInterceptorCallbacks, name?: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/mock.ts:17\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expressionReflector\n                                                              \n                                                                        ExpectedExpressionReflector\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              interceptorFactory\n                                                              \n                                                                        function\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              setupFactory\n                                                              \n                                                                        function\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              definedSetups\n                                                              \n                                                                        DefinedSetups\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              tracker\n                                                              \n                                                                        Tracker\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              verifier\n                                                              \n                                                                        Verifier\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              interceptedCallbacks\n                                                              \n                                                                        IInterceptorCallbacks\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              name\n                                                              \n                                                                        string\n                                                              \n                                                              \n                                                                      true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public object\n                                \n                            \n                            \n                                \n                                        \n                                    object()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/mock.ts:43\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     T\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public prototypeof\n                                \n                            \n                            \n                                \n                                        \n                                    prototypeof(prototype?: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/mock.ts:47\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              prototype\n                                                              \n                                                                      any\n                                                              \n                                                              \n                                                                  true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     IMock<>\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public setBehaviorStrategy\n                                \n                            \n                            \n                                \n                                        \n                                    setBehaviorStrategy(behaviorStrategy: MockBehavior)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/mock.ts:52\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              behaviorStrategy\n                                                              \n                                                                      MockBehavior\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     IMock<>\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public setup\n                                \n                            \n                            \n                                \n                                        \n                                    setup(expression: IExpectedExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/mock.ts:31\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      IExpectedExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     ISetup<>\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public verify\n                                \n                            \n                            \n                                \n                                        \n                                    verify(expression: IExpectedExpression, times?: Times)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/mock.ts:38\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      IExpectedExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              times\n                                                              \n                                                                      Times\n                                                              \n                                                              \n                                                                  true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public name\n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/mock.ts:26\n                                        \n                                    \n            \n            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public tracker\n                                \n                            \n                            \n                                \n                                    tracker:     Tracker\n            \n                                \n                            \n                                \n                                    \n                                        Type :     Tracker\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/mock.ts:23\n                                        \n                                    \n            \n            \n                        \n                    \n            \n    \n\n\n    \n        import {IMock, ISetupInvoke, ISetup} from './moq';\nimport {Interceptor} from './interceptor';\nimport {ExpectedExpressionReflector, IExpectedExpression} from './expected-expressions/expected-expression-reflector';\nimport {Tracker} from './tracker';\nimport {DefinedSetups} from './defined-setups';\nimport {Setup} from './setup';\nimport {expressionMatcherFactory} from './expression-matchers/factories';\nimport {Times} from './times';\nimport {Verifier, verifierFactory} from './verifier';\nimport {\n    IInterceptorCallbacks, interceptorCallbacksFactory,\n    MockBehavior\n} from './interceptor-callbacks/interceptor-callbacks';\n\n\nexport class MockCore implements IMock {\n    private interceptor: Interceptor;\n    constructor(\n                private expressionReflector: ExpectedExpressionReflector,\n                private interceptorFactory: (callbacks: IInterceptorCallbacks)=> Interceptor,\n                private setupFactory: (mock: IMock)=> ISetupInvoke,\n                private definedSetups: DefinedSetups,\n                public tracker: Tracker,\n                private verifier: Verifier,\n                private interceptedCallbacks: IInterceptorCallbacks,\n                public name?: string) {\n\n        this.interceptor = interceptorFactory(interceptedCallbacks);\n    }\n\n    public setup(expression: IExpectedExpression): ISetup {\n        const setup = this.setupFactory(this);\n        const expectedExpression = this.expressionReflector.reflect(expression);\n        this.definedSetups.add(expectedExpression, setup);\n        return setup;\n    }\n\n    public verify(expression: IExpectedExpression, times?: Times): void {\n        times = times === undefined ? Times.Once() : times;\n        this.verifier.test(expression, times, this.tracker.get(), this.name);\n    }\n\n    public object(): T {\n        return this.interceptor.object();\n    }\n\n    public prototypeof(prototype?: any): IMock {\n        this.interceptor.prototypeof(prototype);\n        return this;\n    }\n\n    public setBehaviorStrategy(behaviorStrategy: MockBehavior): IMock {\n        this.interceptedCallbacks.setBehaviorStrategy(behaviorStrategy);\n        return this;\n    }\n}\n\nexport class Mock extends MockCore {\n    constructor(name?: string) {\n        const definedSetups = new DefinedSetups(expressionMatcherFactory());\n        const tracker = new Tracker();\n        const callbacks = interceptorCallbacksFactory(definedSetups, tracker);\n\n        super(\n            new ExpectedExpressionReflector(),\n            (callback: IInterceptorCallbacks) => new Interceptor(callback),\n            (mock: IMock) => new Setup(mock),\n            definedSetups,\n            tracker,\n            verifierFactory(),\n            callbacks,\n            name)\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpression.html":{"url":"classes/NamedMethodExpression.html","title":"class - NamedMethodExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public arguments\n                                    \n                                    \n                                        Public name\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(name: string, args: any[])\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:2\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              name\n                                                              \n                                                                        string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              args\n                                                              \n                                                                        any[]\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public arguments\n                                \n                            \n                            \n                                \n                                    arguments:     any[]\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any[]\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:2\n                                        \n                                    \n            \n            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public name\n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:4\n                                        \n                                    \n            \n            \n                        \n                    \n            \n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionFormatter.html":{"url":"classes/NamedMethodExpressionFormatter.html","title":"class - NamedMethodExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/named.method-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/named.method-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              constantFormatter\n                                                              \n                                                                        ConstantFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: NamedMethodExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/named.method-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      NamedMethodExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {NamedMethodExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class NamedMethodExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: NamedMethodExpression): string{\n        const formatted: string[] = [];\n\n        expression.arguments.forEach(arg=>{\n            formatted.push(this.constantFormatter.format(arg));\n        });\n\n        const value = formatted.join(', ');\n        return `${expression.name}(${value})`;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NamedMethodExpressionMatcher.html":{"url":"classes/NamedMethodExpressionMatcher.html","title":"class - NamedMethodExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  NamedMethodExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/named.method-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(argumentsMatcher: ArgumentsMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/named.method-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              argumentsMatcher\n                                                              \n                                                                        ArgumentsMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public matched\n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/named.method-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              left\n                                                              \n                                                                      NamedMethodExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              right\n                                                              \n                                                                      ExpectedNamedMethodExpression | It\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ArgumentsMatcher} from './arguments-matcher';\nimport {NamedMethodExpression} from '../expressions';\nimport {ExpectedNamedMethodExpression} from '../expected-expressions/expected-expressions';\nimport {It} from '../expected-expressions/expression-predicates';\n\nexport class NamedMethodExpressionMatcher{\n\n    constructor(private argumentsMatcher: ArgumentsMatcher){\n\n    }\n\n    public matched(left: NamedMethodExpression, right: ExpectedNamedMethodExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedNamedMethodExpression;\n        if (left.name === rightExpression.name)\n            return this.argumentsMatcher.matched(left.arguments, rightExpression.arguments);\n\n        return false;\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpression.html":{"url":"classes/SetPropertyExpression.html","title":"class - SetPropertyExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expressions.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public name\n                                    \n                                    \n                                        Public value\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(name: string, value: any)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expressions.ts:24\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              name\n                                                              \n                                                                        string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              value\n                                                              \n                                                                        any\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public name\n                                \n                            \n                            \n                                \n                                    name:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:25\n                                        \n                                    \n            \n            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public value\n                                \n                            \n                            \n                                \n                                    value:     any\n            \n                                \n                            \n                                \n                                    \n                                        Type :     any\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/expressions.ts:26\n                                        \n                                    \n            \n            \n                        \n                    \n            \n    \n\n\n    \n        export class NamedMethodExpression {\n    public arguments: any[];\n\n    constructor(public name: string,\n                args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class MethodExpression {\n    public arguments: any[];\n\n    constructor(args: any[]) {\n        this.arguments = args;\n    }\n}\n\nexport class GetPropertyExpression {\n    constructor(public name: string) {\n\n    }\n}\n\nexport class SetPropertyExpression {\n    constructor(public name: string,\n                public value: any) {\n\n    }\n}\n\nexport type Expressions = MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression;\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionFormatter.html":{"url":"classes/SetPropertyExpressionFormatter.html","title":"class - SetPropertyExpressionFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/set.property-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(constantFormatter: ConstantFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/set.property-formatter.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              constantFormatter\n                                                              \n                                                                        ConstantFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(expression: SetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/set.property-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      SetPropertyExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {SetPropertyExpression} from '../expressions';\nimport {ConstantFormatter} from './constant-formatter';\n\nexport class SetPropertyExpressionFormatter{\n\n    constructor(private constantFormatter: ConstantFormatter){\n\n    }\n\n    public format(expression: SetPropertyExpression): string{\n        const value = this.constantFormatter.format(expression.value);\n        return `Assignment of ${value} to property \\'${expression.name}\\'`;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetPropertyExpressionMatcher.html":{"url":"classes/SetPropertyExpressionMatcher.html","title":"class - SetPropertyExpressionMatcher","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  SetPropertyExpressionMatcher\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expression-matchers/set.property-matcher.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public matched\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(constantMatcher: ConstantMatcher)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/set.property-matcher.ts:6\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              constantMatcher\n                                                              \n                                                                        ConstantMatcher\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public matched\n                                \n                            \n                            \n                                \n                                        \n                                    matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression | It)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/expression-matchers/set.property-matcher.ts:12\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              left\n                                                              \n                                                                      SetPropertyExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              right\n                                                              \n                                                                      ExpectedSetPropertyExpression | It\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ExpectedSetPropertyExpression} from '../expected-expressions/expected-expressions';\nimport {SetPropertyExpression} from '../expressions';\nimport {It} from '../expected-expressions/expression-predicates';\nimport {ConstantMatcher} from './constant-matcher';\n\nexport class SetPropertyExpressionMatcher{\n\n    constructor(private constantMatcher: ConstantMatcher){\n\n    }\n\n    public matched(left: SetPropertyExpression, right: ExpectedSetPropertyExpression|It): boolean{\n        if (right instanceof It)\n            return (right as It).test(left);\n\n        const rightExpression = right as ExpectedSetPropertyExpression;\n        if (left.name === rightExpression.name && this.constantMatcher.matched(left.value, rightExpression.value)) return true;\n\n        return false;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Setup.html":{"url":"classes/Setup.html","title":"class - Setup","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  Setup\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/setup.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                        ISetupInvoke\n            \n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public callback\n                                    \n                                    \n                                        Public invoke\n                                    \n                                    \n                                        Public returns\n                                    \n                                    \n                                        Public throws\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(mock: IMock)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/setup.ts:4\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              mock\n                                                              \n                                                                        IMock\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public callback\n                                \n                            \n                            \n                                \n                                        \n                                    callback(callback: (args: any[]) => void)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/setup.ts:24\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              callback\n                                                              \n                                                                      function\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     IMock<>\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public invoke\n                                \n                            \n                            \n                                \n                                        \n                                    invoke(args?: any[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/setup.ts:10\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              args\n                                                              \n                                                                      any[]\n                                                              \n                                                              \n                                                                  true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     TResult\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public returns\n                                \n                            \n                            \n                                \n                                        \n                                    returns(value: TValue)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/setup.ts:14\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              value\n                                                              \n                                                                      TValue\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     IMock<>\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public throws\n                                \n                            \n                            \n                                \n                                        \n                                    throws(exception: TException)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/setup.ts:19\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              exception\n                                                              \n                                                                      TException\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     IMock<>\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ISetupInvoke, IMock} from './moq';\n\nexport class Setup implements ISetupInvoke {\n    private action: Function;\n\n    constructor(private mock: IMock) {\n\n    }\n\n    public invoke(args?: any[]): TResult {\n        return this.action(args);\n    }\n\n    public returns(value: TValue): IMock {\n        this.action = ()=> value;\n        return this.mock;\n    }\n\n    public throws(exception: TException): IMock {\n        this.action = ()=> { throw exception; };\n        return this.mock;\n    }\n\n    public callback(callback: (args: any[])=> TValue): IMock {\n        this.action = (args?: any[])=> callback.apply(undefined, args);\n        return this.mock;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Times.html":{"url":"classes/Times.html","title":"class - Times","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  Times\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/times.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Properties\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public message\n                                    \n                                \n                            \n                        \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public AtLeast\n                                    \n                                    \n                                        Public AtLeastOnce\n                                    \n                                    \n                                        Public AtMost\n                                    \n                                    \n                                        Public AtMostOnce\n                                    \n                                    \n                                        Public Between\n                                    \n                                    \n                                        Public Exactly\n                                    \n                                    \n                                        Public Never\n                                    \n                                    \n                                        Public Once\n                                    \n                                    \n                                        Public test\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(evaluator: (callCount: number) => void, message: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/times.ts:10\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              evaluator\n                                                              \n                                                                        function\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              message\n                                                              \n                                                                        string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public AtLeast\n                                \n                            \n                            \n                                \n                                        \n                                    AtLeast(callCount: number)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:17\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              callCount\n                                                              \n                                                                      number\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     Times\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public AtLeastOnce\n                                \n                            \n                            \n                                \n                                        \n                                    AtLeastOnce()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:21\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     Times\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public AtMost\n                                \n                            \n                            \n                                \n                                        \n                                    AtMost(callCount: number)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:25\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              callCount\n                                                              \n                                                                      number\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     Times\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public AtMostOnce\n                                \n                            \n                            \n                                \n                                        \n                                    AtMostOnce()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:29\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     Times\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public Between\n                                \n                            \n                            \n                                \n                                        \n                                    Between(callCountFrom: number, callCountTo: number, range: Range)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:33\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              callCountFrom\n                                                              \n                                                                      number\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              callCountTo\n                                                              \n                                                                      number\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              range\n                                                              \n                                                                      Range\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     Times\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public Exactly\n                                \n                            \n                            \n                                \n                                        \n                                    Exactly(callCount: number)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:40\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              callCount\n                                                              \n                                                                      number\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     Times\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public Never\n                                \n                            \n                            \n                                \n                                        \n                                    Never()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:44\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     Times\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public Once\n                                \n                            \n                            \n                                \n                                        \n                                    Once()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:48\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     Times\n            \n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public test\n                                \n                            \n                            \n                                \n                                        \n                                    test(callCount: number)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/times.ts:52\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              callCount\n                                                              \n                                                                      number\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n            \n                \n                    \n                        Properties\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public message\n                                \n                            \n                            \n                                \n                                    message:     string\n            \n                                \n                            \n                                \n                                    \n                                        Type :     string\n            \n                                    \n                                \n                                    \n                                        \n                                            Defined in lib/times.ts:13\n                                        \n                                    \n            \n            \n                        \n                    \n            \n    \n\n\n    \n        export enum Range{\n    Exclusive,\n    Inclusive\n}\n\nexport class Times {\n    private static _once: Times =  new Times(expected => expected === 1, `Should be called once`);\n    private static _never: Times =  new Times(expected => expected === 0, `Should be called never`);\n    private static _atMostOnce: Times =  new Times(expected => expected  expected >= 1, `Should be called at least once`);\n\n    constructor(private evaluator: (callCount: number)=>boolean,\n                public message: string) {\n\n    }\n\n    public static AtLeast(callCount: number): Times {\n        return new Times(expected => expected >= callCount, `Should be called at least ${callCount} time(s)`);\n    }\n\n    public static AtLeastOnce(): Times {\n        return Times._atLeastOnce;\n    }\n\n    public static AtMost(callCount: number): Times {\n        return new Times(expected => expected  expected > callCountFrom && expected  expected >= callCountFrom && expected  expected === callCount, `Should be called exactly ${callCount} time(s)`);\n    }\n\n    public static Never(): Times {\n        return Times._never;\n    }\n\n    public static Once(): Times {\n        return Times._once;\n    }\n\n    public test(callCount: number): boolean {\n        return this.evaluator(callCount);\n    }\n}\n\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrackedExpressionsFormatter.html":{"url":"classes/TrackedExpressionsFormatter.html","title":"class - TrackedExpressionsFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  TrackedExpressionsFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/tracked-expressions-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(expressionFormatter: ExpressionFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/tracked-expressions-formatter.ts:9\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expressionFormatter\n                                                              \n                                                                        ExpressionFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(trackedExpressions: Expressions[])\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/tracked-expressions-formatter.ts:15\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              trackedExpressions\n                                                              \n                                                                      Expressions[]\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ExpressionFormatter} from './expression-formatter';\nimport {expressionFormatterFactory} from './factories';\nimport {Expressions} from '../expressions';\n\nexport function trackedExpressionsFormatterFactory (): TrackedExpressionsFormatter {\n    return new TrackedExpressionsFormatter(expressionFormatterFactory());\n}\n\nexport class TrackedExpressionsFormatter {\n\n    constructor(private expressionFormatter: ExpressionFormatter) {\n\n    }\n\n    public format(trackedExpressions: Expressions[]): string {\n        let result: string = '';\n        for (const expression of trackedExpressions) {\n            result += `${this.expressionFormatter.format(expression)}\\n`;\n        }\n\n        return result.substr(0, result.length - 1);\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tracker.html":{"url":"classes/Tracker.html","title":"class - Tracker","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  Tracker\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/tracker.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public add\n                                    \n                                    \n                                        Public get\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public add\n                                \n                            \n                            \n                                \n                                        \n                                    add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/tracker.ts:9\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              action\n                                                              \n                                                                      MethodExpression | GetPropertyExpression | SetPropertyExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public get\n                                \n                            \n                            \n                                \n                                        \n                                    get()\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/tracker.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                            Returns :     []\n            \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {\n    Expressions, SetPropertyExpression, GetPropertyExpression, MethodExpression,\n    NamedMethodExpression\n} from './expressions';\n\nexport class Tracker{\n    private log: Expressions[] = [];\n\n    public add(action: MethodExpression | GetPropertyExpression | SetPropertyExpression): void{\n        this.log.push(action);\n    }\n\n    public get(): Expressions[]{\n        return this.log;\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Verifier.html":{"url":"classes/Verifier.html","title":"class - Verifier","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  Verifier\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public test\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(reflector: ExpectedExpressionReflector, callCounter: CallCounter, verifyFormatter: VerifyFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:17\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              reflector\n                                                              \n                                                                        ExpectedExpressionReflector\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              callCounter\n                                                              \n                                                                        CallCounter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              verifyFormatter\n                                                              \n                                                                        VerifyFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public test\n                                \n                            \n                            \n                                \n                                        \n                                    test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:26\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expected\n                                                              \n                                                                      IExpectedExpression\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              times\n                                                              \n                                                                      Times\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              expressions\n                                                              \n                                                                      Expressions[]\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              mockName\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                                  true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyError.html":{"url":"classes/VerifyError.html","title":"class - VerifyError","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyError\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/verifier.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Error\n            \n\n\n\n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(message: string)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/verifier.ts:7\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              message\n                                                              \n                                                                        string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n\n\n    \n\n\n    \n        import {Times} from './times';\nimport {Expressions} from './expressions';\nimport {IExpectedExpression, ExpectedExpressionReflector} from './expected-expressions/expected-expression-reflector';\nimport {CallCounter, callCounterFactory} from './call-counter';\nimport {VerifyFormatter, verifyFormatterFactory} from './formatters/verify-formatter';\n\nexport class VerifyError extends Error{\n    constructor(message: string){\n        super(message);\n    }\n}\n\nexport function verifierFactory(): Verifier {\n    return new Verifier(new ExpectedExpressionReflector(), callCounterFactory(), verifyFormatterFactory());\n}\n\nexport class Verifier{\n\n    constructor(\n        private reflector: ExpectedExpressionReflector,\n        private callCounter: CallCounter,\n        private verifyFormatter: VerifyFormatter){\n\n    }\n\n    public test(expected: IExpectedExpression, times: Times, expressions: Expressions[], mockName?: string): void {\n        const expression = this.reflector.reflect(expected);\n        const callCount = this.callCounter.count(expression, expressions);\n        const passed = times.test(callCount);\n        if (passed === false) {\n            const message = this.verifyFormatter.format(expression, times.message, callCount, expressions, mockName);\n            throw new VerifyError(message);\n        }\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerifyFormatter.html":{"url":"classes/VerifyFormatter.html","title":"class - VerifyFormatter","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Classes\n  VerifyFormatter\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/formatters/verify-formatter.ts\n        \n\n\n\n\n\n            \n                Index\n                \n                    \n                        \n                            \n                                Methods\n                            \n                        \n                        \n                            \n                                \n                                    \n                                        Public format\n                                    \n                                \n                            \n                        \n                    \n                \n            \n\n            \n                Constructor\n                    \n                        \n                            \n                                \n                                    constructor(expectedExpressionFormatter: ExpectedExpressionFormatter, trackedExpressionsFormatter: TrackedExpressionsFormatter)\n                                \n                            \n                                    \n                                        \n                                            Defined in lib/formatters/verify-formatter.ts:10\n                                        \n                                    \n            \n                            \n                                \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expectedExpressionFormatter\n                                                              \n                                                                        ExpectedExpressionFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              trackedExpressionsFormatter\n                                                              \n                                                                        TrackedExpressionsFormatter\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                \n                            \n                        \n                    \n            \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                    Public format\n                                \n                            \n                            \n                                \n                                        \n                                    format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/formatters/verify-formatter.ts:18\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expected\n                                                              \n                                                                      ExpectedExpressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              timesMessage\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              haveBeenCalledTimes\n                                                              \n                                                                      number\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              trackedExpressions\n                                                              \n                                                                      Expressions[]\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              mockName\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                                  true\n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     string\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {ExpectedExpressions} from '../expected-expressions/expected-expressions';\nimport {Expressions} from '../expressions';\nimport {ExpectedExpressionFormatter, expectedExpressionFormatterFactory} from './expected-expression-formatter';\nimport {TrackedExpressionsFormatter, trackedExpressionsFormatterFactory} from './tracked-expressions-formatter';\n\nexport function verifyFormatterFactory(): VerifyFormatter {\n    return new VerifyFormatter(expectedExpressionFormatterFactory(), trackedExpressionsFormatterFactory());\n}\n\nexport class VerifyFormatter {\n\n    constructor(\n        private expectedExpressionFormatter: ExpectedExpressionFormatter,\n        private trackedExpressionsFormatter: TrackedExpressionsFormatter) {\n\n    }\n\n    public format(expected: ExpectedExpressions, timesMessage: string, haveBeenCalledTimes: number, trackedExpressions: Expressions[], mockName?: string): string {\n        const expectedExpressionMessage = this.expectedExpressionFormatter.format(expected, timesMessage, haveBeenCalledTimes, mockName);\n        const trackedExpressionsMessage = this.trackedExpressionsFormatter.format(trackedExpressions);\n        const delimiter = '-------------------------------------';\n        return `${expectedExpressionMessage}\\n${delimiter}\\nTracked calls:\\n${trackedExpressionsMessage}\\n${delimiter}\\n`\n    }\n}\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IExpectedExpression.html":{"url":"interfaces/IExpectedExpression.html","title":"interface - IExpectedExpression","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IExpectedExpression\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expected-expression-reflector.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     void | any | \n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expected-expression-reflector.ts:7\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        import {It} from './expression-predicates';\nimport {\n    ExpectedGetPropertyExpression, ExpectedNamedMethodExpression,\n    ExpectedSetPropertyExpression, ExpectedMethodExpression, ExpectedExpressions\n} from './expected-expressions';\n\nexport interface IExpectedExpression {\n    (instance: T): void | any | It;\n}\n\ndeclare var Proxy:any;\n\nexport class ExpectedExpressionReflector {\n\n    private reflectedInfo;\n\n    private expressionProxy(): any {\n\n        const options = {\n            get: (target, name) => {\n                this.reflectedInfo = new ExpectedGetPropertyExpression(name);\n                return (...args) => {\n                    this.reflectedInfo = new ExpectedNamedMethodExpression(name, args);\n                }\n            },\n\n            set: (target, name, value) => {\n                this.reflectedInfo = new ExpectedSetPropertyExpression(name, value);\n                return true;\n            },\n\n            apply: (target, thisArg, args) => {\n                this.reflectedInfo = new ExpectedMethodExpression(args);\n            }\n        };\n\n        return new Proxy(function () {\n        }, options);\n    }\n\n    public reflect(expression: IExpectedExpression): ExpectedExpressions {\n        this.reflectedInfo = undefined;\n\n        const proxy = this.expressionProxy();\n        const predicate = expression(proxy);\n\n        return predicate instanceof It ? predicate : this.reflectedInfo;\n    }\n}\n\n\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacks.html":{"url":"interfaces/IInterceptorCallbacks.html","title":"interface - IInterceptorCallbacks","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacks\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n            \n                Extends\n            \n            \n                    IInterceptorCallbacksStrategy\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                     setBehaviorStrategy\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                     setBehaviorStrategy\n                                \n                            \n                            \n                                \n            setBehaviorStrategy(behavior: MockBehavior)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:18\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              behavior\n                                                              \n                                                                      MockBehavior\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     void\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IInterceptorCallbacksStrategy.html":{"url":"interfaces/IInterceptorCallbacksStrategy.html","title":"interface - IInterceptorCallbacksStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IInterceptorCallbacksStrategy\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/interceptor-callbacks/interceptor-callbacks.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                     hasNamedMethod\n                                \n                                \n                                     intercepted\n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n                \n                    \n                        Methods\n                    \n                    \n                        \n                            \n                                \n                                    \n                                     hasNamedMethod\n                                \n                            \n                            \n                                \n            hasNamedMethod(methodName: string, prototype: any)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:14\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              methodName\n                                                              \n                                                                      string\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                            \n                                                              prototype\n                                                              \n                                                                      any\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     boolean\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                     intercepted\n                                \n                            \n                            \n                                \n            intercepted(expression: Expressions)\n                                \n                            \n            \n            \n                                    \n                                        \n                                            Defined in lib/interceptor-callbacks/interceptor-callbacks.ts:13\n                                        \n                                    \n            \n                            \n                                \n            \n                                        \n                                                Parameters :\n                                                \n                                                    \n                                                        \n                                                            Name\n                                                            Type\n                                                            Optional\n                                                            Description\n                                                        \n                                                    \n                                                    \n                                                            \n                                                              expression\n                                                              \n                                                                      Expressions\n                                                              \n                                                              \n                                                              \n                                                              \n                                                            \n                                                    \n                                                \n                                        \n                                        \n                                        \n                                        \n                                            Returns :     any\n            \n                                        \n                                            \n                                                \n                                            \n                                \n                            \n                        \n                    \n            \n\n\n    \n\n\n    \n        import {Expressions} from '../expressions';\nimport {InterceptorCallbacksStrictStrategy} from './interceptor-callbacks.strict.strategy';\nimport {DefinedSetups} from '../defined-setups';\nimport {Tracker} from '../tracker';\nimport {InterceptorCallbacksLooseStrategy} from './interceptor-callbacks.loose.strategy';\n\nexport enum MockBehavior{\n    Strict,\n    Loose\n}\n\nexport interface IInterceptorCallbacksStrategy {\n    intercepted(expression: Expressions): any;\n    hasNamedMethod(methodName: string, prototype: any): boolean;\n}\n\nexport interface IInterceptorCallbacks extends IInterceptorCallbacksStrategy {\n    setBehaviorStrategy(behavior: MockBehavior): void;\n}\n\n\nexport function interceptorCallbacksFactory(definedSetups: DefinedSetups, tracker: Tracker): InterceptorCallbacks {\n    const strictStrategy = new InterceptorCallbacksStrictStrategy(definedSetups, tracker);\n    const looseStrategy = new InterceptorCallbacksLooseStrategy(definedSetups, tracker);\n    return new InterceptorCallbacks(strictStrategy, looseStrategy);\n}\n\nexport class InterceptorCallbacks implements IInterceptorCallbacks {\n    private activeStrategy: IInterceptorCallbacksStrategy;\n\n    constructor(private strictStrategy: IInterceptorCallbacksStrategy,\n                private looseStrategy: IInterceptorCallbacksStrategy) {\n\n        this.activeStrategy = strictStrategy;\n    }\n\n    public intercepted(expression: Expressions): any {\n        return this.activeStrategy.intercepted(expression);\n    }\n\n    public hasNamedMethod(methodName: string, prototype: any): boolean {\n        return this.activeStrategy.hasNamedMethod(methodName, prototype);\n    }\n\n    public setBehaviorStrategy(behavior: MockBehavior): void {\n        if (behavior === MockBehavior.Strict)\n            this.activeStrategy = this.strictStrategy;\n\n        if (behavior === MockBehavior.Loose)\n            this.activeStrategy = this.looseStrategy;\n    }\n}\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IPredicate.html":{"url":"interfaces/IPredicate.html","title":"interface - IPredicate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IPredicate\n\n\n\n    \n        Info\n    \n\n\n    \n        Source\n    \n\n\n\n    \n        \n            File\n        \n        \n            lib/expected-expressions/expression-predicates.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [instance: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     boolean\n\n                                        \n                                    \n\n\n\n                                    \n                                        \n                                            Defined in lib/expected-expressions/expression-predicates.ts:1\n                                        \n                                    \n\n                        \n                    \n            \n    \n\n\n    \n        export interface IPredicate {\n    (instance: T): boolean;\n}\n\n\nexport class It {\n    constructor(public predicate: IPredicate) {\n\n    }\n\n    public static Is(predicate: IPredicate): It | any {\n        return new It(predicate);\n    }\n\n    public static IsAny(): It | any {\n        return new It(() => true);\n    }\n\n    public test(instance: T): boolean {\n        try {\n            const result = this.predicate(instance);\n            return result === true || result === undefined;\n        } catch (e) {\n            return false;\n        }\n    }\n}\n\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous - Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            argumentsMatcherFactory\n                        \n                        \n                            callCounterFactory\n                        \n                        \n                            expectedExpressionFormatterFactory\n                        \n                        \n                            expressionFormatterFactory\n                        \n                        \n                            expressionMatcherFactory\n                        \n                        \n                            format\n                        \n                        \n                            interceptorCallbacksFactory\n                        \n                        \n                            methodFormatterFactory\n                        \n                        \n                            methodMatcherFactory\n                        \n                        \n                            namedMethodFormatterFactory\n                        \n                        \n                            namedMethodMatcherFactory\n                        \n                        \n                            setPropertyFormatterFactory\n                        \n                        \n                            setPropertyMatcherFactory\n                        \n                        \n                            trackedExpressionsFormatterFactory\n                        \n                        \n                            verifierFactory\n                        \n                        \n                            verifyFormatterFactory\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expression-matchers/factories.ts\n    \n                \n                \n                    \n                        \n                            \n                             argumentsMatcherFactory\n                        \n                    \n                    \n                        \n    argumentsMatcherFactory()\n                        \n                    \n    \n    \n    \n                \n            \n            \n                \n                    \n                        \n                            \n                             expressionMatcherFactory\n                        \n                    \n                    \n                        \n    expressionMatcherFactory()\n                        \n                    \n    \n    \n    \n                \n            \n            \n                \n                    \n                        \n                            \n                             methodMatcherFactory\n                        \n                    \n                    \n                        \n    methodMatcherFactory()\n                        \n                    \n    \n    \n    \n                \n            \n            \n                \n                    \n                        \n                            \n                             namedMethodMatcherFactory\n                        \n                    \n                    \n                        \n    namedMethodMatcherFactory()\n                        \n                    \n    \n    \n    \n                \n            \n            \n                \n                    \n                        \n                            \n                             setPropertyMatcherFactory\n                        \n                    \n                    \n                        \n    setPropertyMatcherFactory()\n                        \n                    \n    \n    \n    \n                \n            \n    \n    lib/call-counter.ts\n    \n                \n                \n                    \n                        \n                            \n                             callCounterFactory\n                        \n                    \n                    \n                        \n    callCounterFactory()\n                        \n                    \n    \n    \n    \n                \n            \n    \n    lib/formatters/expected-expression-formatter.ts\n    \n                \n                \n                    \n                        \n                            \n                             expectedExpressionFormatterFactory\n                        \n                    \n                    \n                        \n    expectedExpressionFormatterFactory()\n                        \n                    \n    \n    \n    \n                \n            \n    \n    lib/formatters/factories.ts\n    \n                \n                \n                    \n                        \n                            \n                             expressionFormatterFactory\n                        \n                    \n                    \n                        \n    expressionFormatterFactory()\n                        \n                    \n    \n    \n    \n                \n            \n            \n                \n                    \n                        \n                            \n                             methodFormatterFactory\n                        \n                    \n                    \n                        \n    methodFormatterFactory()\n                        \n                    \n    \n    \n    \n                \n            \n            \n                \n                    \n                        \n                            \n                             namedMethodFormatterFactory\n                        \n                    \n                    \n                        \n    namedMethodFormatterFactory()\n                        \n                    \n    \n    \n    \n                \n            \n            \n                \n                    \n                        \n                            \n                             setPropertyFormatterFactory\n                        \n                    \n                    \n                        \n    setPropertyFormatterFactory()\n                        \n                    \n    \n    \n    \n                \n            \n    \n    lib/format-string.ts\n    \n                \n                \n                    \n                        \n                            \n                             format\n                        \n                    \n                    \n                        \n    format(template: undefined, args: undefined)\n                        \n                    \n    \n    \n    \n                \n            \n    \n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n                \n                \n                    \n                        \n                            \n                             interceptorCallbacksFactory\n                        \n                    \n                    \n                        \n    interceptorCallbacksFactory(definedSetups: undefined, tracker: undefined)\n                        \n                    \n    \n    \n    \n                \n            \n    \n    lib/formatters/tracked-expressions-formatter.ts\n    \n                \n                \n                    \n                        \n                            \n                             trackedExpressionsFormatterFactory\n                        \n                    \n                    \n                        \n    trackedExpressionsFormatterFactory()\n                        \n                    \n    \n    \n    \n                \n            \n    \n    lib/verifier.ts\n    \n                \n                \n                    \n                        \n                            \n                             verifierFactory\n                        \n                    \n                    \n                        \n    verifierFactory()\n                        \n                    \n    \n    \n    \n                \n            \n    \n    lib/formatters/verify-formatter.ts\n    \n                \n                \n                    \n                        \n                            \n                             verifyFormatterFactory\n                        \n                    \n                    \n                        \n    verifyFormatterFactory()\n                        \n                    \n    \n    \n    \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous - Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Proxy\n                        \n                        \n                            Proxy\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor.ts\n    \n                \n                \n                    \n                        \n                            \n                             Proxy\n                        \n                    \n                    \n                        \n                            Proxy:     any\n    \n                        \n                    \n                        \n                            \n                                Type :     any\n    \n                            \n                        \n    \n    \n                \n            \n    \n    lib/expected-expressions/expected-expression-reflector.ts\n    \n                \n                \n                    \n                        \n                            \n                             Proxy\n                        \n                    \n                    \n                        \n                            Proxy:     any\n    \n                        \n                    \n                        \n                            \n                                Type :     any\n    \n                            \n                        \n    \n    \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous - Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExpectedExpressions\n                        \n                        \n                            Expressions\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/expected-expressions/expected-expressions.ts\n    \n            \n                \n                    \n                        \n                            \n                            ExpectedExpressions\n                        \n                    \n                    \n                        \n                            ExpectedExpressions:     ExpectedMethodExpression | ExpectedGetPropertyExpression | ExpectedSetPropertyExpression | ExpectedNamedMethodExpression | It\n    \n                        \n                    \n                \n            \n    \n    lib/expressions.ts\n    \n            \n                \n                    \n                        \n                            \n                            Expressions\n                        \n                    \n                    \n                        \n                            Expressions:     MethodExpression | GetPropertyExpression | SetPropertyExpression | NamedMethodExpression\n    \n                        \n                    \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous - Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MockBehavior\n                        \n                        \n                            Range\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/interceptor-callbacks/interceptor-callbacks.ts\n    \n            \n                \n                    \n                        \n                            \n                            MockBehavior\n                        \n                    \n                            \n                                \n                                     Strict\n                                \n                            \n                            \n                                \n                                     Loose\n                                \n                            \n                \n            \n    \n    lib/times.ts\n    \n            \n                \n                    \n                        \n                            \n                            Range\n                        \n                    \n                            \n                                \n                                     Exclusive\n                                \n                            \n                            \n                                \n                                     Inclusive\n                                \n                            \n                \n            \n    \n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Documentation coverage\n\n\n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                lib/call-counter.ts\n            \n            \n                class\n            \n            \n                CallCounter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/defined-setups.ts\n            \n            \n                class\n            \n            \n                DefinedSetups\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                class\n            \n            \n                ExpectedExpressionReflector\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/expected-expressions/expected-expression-reflector.ts\n            \n            \n                interface\n            \n            \n                IExpectedExpression\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedGetPropertyExpression\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedMethodExpression\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedNamedMethodExpression\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                lib/expected-expressions/expected-expressions.ts\n            \n            \n                class\n            \n            \n                ExpectedSetPropertyExpression\n            \n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                lib/expected-expressions/expression-predicates.ts\n            \n            \n                class\n            \n            \n                It\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                lib/expected-expressions/expression-predicates.ts\n            \n            \n                interface\n            \n            \n                IPredicate\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/expression-matchers/arguments-matcher.ts\n            \n            \n                class\n            \n            \n                ArgumentsMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/expression-matchers/constant-matcher.ts\n            \n            \n                class\n            \n            \n                ConstantMatcher\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/expression-matchers/expression-matcher.ts\n            \n            \n                class\n            \n            \n                ExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/expression-matchers/get.property-matcher.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpressionMatcher\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/expression-matchers/method-matcher.ts\n            \n            \n                class\n            \n            \n                MethodExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/expression-matchers/named.method-matcher.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/expression-matchers/set.property-matcher.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpressionMatcher\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                MethodExpression\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpression\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                lib/expressions.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpression\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                lib/formatters/constant-formatter.ts\n            \n            \n                class\n            \n            \n                ConstantFormatter\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/formatters/expected-expression-formatter.ts\n            \n            \n                class\n            \n            \n                ExpectedExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/formatters/expression-formatter.ts\n            \n            \n                class\n            \n            \n                ExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/formatters/get.property-formatter.ts\n            \n            \n                class\n            \n            \n                GetPropertyExpressionFormatter\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/formatters/method-formatter.ts\n            \n            \n                class\n            \n            \n                MethodExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/formatters/named.method-formatter.ts\n            \n            \n                class\n            \n            \n                NamedMethodExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/formatters/set.property-formatter.ts\n            \n            \n                class\n            \n            \n                SetPropertyExpressionFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/formatters/tracked-expressions-formatter.ts\n            \n            \n                class\n            \n            \n                TrackedExpressionsFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/formatters/verify-formatter.ts\n            \n            \n                class\n            \n            \n                VerifyFormatter\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/interceptor-callbacks/interceptor-callbacks.loose.strategy.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacksLooseStrategy\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                lib/interceptor-callbacks/interceptor-callbacks.strict.strategy.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacksStrictStrategy\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                class\n            \n            \n                InterceptorCallbacks\n            \n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                interface\n            \n            \n                IInterceptorCallbacks\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/interceptor-callbacks/interceptor-callbacks.ts\n            \n            \n                interface\n            \n            \n                IInterceptorCallbacksStrategy\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/interceptor.ts\n            \n            \n                class\n            \n            \n                Interceptor\n            \n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                lib/mock.ts\n            \n            \n                class\n            \n            \n                Mock\n            \n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                lib/mock.ts\n            \n            \n                class\n            \n            \n                MockCore\n            \n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                lib/setup.ts\n            \n            \n                class\n            \n            \n                Setup\n            \n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                lib/times.ts\n            \n            \n                class\n            \n            \n                Times\n            \n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                lib/tracker.ts\n            \n            \n                class\n            \n            \n                Tracker\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/verifier.ts\n            \n            \n                class\n            \n            \n                Verifier\n            \n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                lib/verifier.ts\n            \n            \n                class\n            \n            \n                VerifyError\n            \n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
